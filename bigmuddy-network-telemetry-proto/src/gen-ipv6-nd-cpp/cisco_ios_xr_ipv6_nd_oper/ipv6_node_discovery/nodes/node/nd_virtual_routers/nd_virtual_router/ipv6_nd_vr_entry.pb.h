// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/nd_virtual_routers/nd_virtual_router/ipv6_nd_vr_entry.proto

#ifndef PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto__INCLUDED
#define PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsipv6_nd_vr_entry_KEYSImpl();
void InitDefaultsipv6_nd_vr_entry_KEYS();
void InitDefaultsipv6_nd_vr_entryImpl();
void InitDefaultsipv6_nd_vr_entry();
void InitDefaultsipv6_nd_addrImpl();
void InitDefaultsipv6_nd_addr();
inline void InitDefaults() {
  InitDefaultsipv6_nd_vr_entry_KEYS();
  InitDefaultsipv6_nd_vr_entry();
  InitDefaultsipv6_nd_addr();
}
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace nd_virtual_routers {
namespace nd_virtual_router {
class ipv6_nd_addr;
class ipv6_nd_addrDefaultTypeInternal;
extern ipv6_nd_addrDefaultTypeInternal _ipv6_nd_addr_default_instance_;
class ipv6_nd_vr_entry;
class ipv6_nd_vr_entryDefaultTypeInternal;
extern ipv6_nd_vr_entryDefaultTypeInternal _ipv6_nd_vr_entry_default_instance_;
class ipv6_nd_vr_entry_KEYS;
class ipv6_nd_vr_entry_KEYSDefaultTypeInternal;
extern ipv6_nd_vr_entry_KEYSDefaultTypeInternal _ipv6_nd_vr_entry_KEYS_default_instance_;
}  // namespace nd_virtual_router
}  // namespace nd_virtual_routers
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace nd_virtual_routers {
namespace nd_virtual_router {

// ===================================================================

class ipv6_nd_vr_entry_KEYS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS) */ {
 public:
  ipv6_nd_vr_entry_KEYS();
  virtual ~ipv6_nd_vr_entry_KEYS();

  ipv6_nd_vr_entry_KEYS(const ipv6_nd_vr_entry_KEYS& from);

  inline ipv6_nd_vr_entry_KEYS& operator=(const ipv6_nd_vr_entry_KEYS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_vr_entry_KEYS(ipv6_nd_vr_entry_KEYS&& from) noexcept
    : ipv6_nd_vr_entry_KEYS() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_vr_entry_KEYS& operator=(ipv6_nd_vr_entry_KEYS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_vr_entry_KEYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_vr_entry_KEYS* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_vr_entry_KEYS*>(
               &_ipv6_nd_vr_entry_KEYS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ipv6_nd_vr_entry_KEYS* other);
  friend void swap(ipv6_nd_vr_entry_KEYS& a, ipv6_nd_vr_entry_KEYS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_vr_entry_KEYS* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_vr_entry_KEYS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_vr_entry_KEYS& from);
  void MergeFrom(const ipv6_nd_vr_entry_KEYS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_vr_entry_KEYS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string interface_name = 2;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 2;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entry_KEYSImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_vr_entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry) */ {
 public:
  ipv6_nd_vr_entry();
  virtual ~ipv6_nd_vr_entry();

  ipv6_nd_vr_entry(const ipv6_nd_vr_entry& from);

  inline ipv6_nd_vr_entry& operator=(const ipv6_nd_vr_entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_vr_entry(ipv6_nd_vr_entry&& from) noexcept
    : ipv6_nd_vr_entry() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_vr_entry& operator=(ipv6_nd_vr_entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_vr_entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_vr_entry* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_vr_entry*>(
               &_ipv6_nd_vr_entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ipv6_nd_vr_entry* other);
  friend void swap(ipv6_nd_vr_entry& a, ipv6_nd_vr_entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_vr_entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_vr_entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_vr_entry& from);
  void MergeFrom(const ipv6_nd_vr_entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_vr_entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
  int vr_global_address_list_size() const;
  void clear_vr_global_address_list();
  static const int kVrGlobalAddressListFieldNumber = 56;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr& vr_global_address_list(int index) const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* mutable_vr_global_address_list(int index);
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* add_vr_global_address_list();
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr >*
      mutable_vr_global_address_list();
  const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr >&
      vr_global_address_list() const;

  // string link_layer_address = 50;
  void clear_link_layer_address();
  static const int kLinkLayerAddressFieldNumber = 50;
  const ::std::string& link_layer_address() const;
  void set_link_layer_address(const ::std::string& value);
  #if LANG_CXX11
  void set_link_layer_address(::std::string&& value);
  #endif
  void set_link_layer_address(const char* value);
  void set_link_layer_address(const char* value, size_t size);
  ::std::string* mutable_link_layer_address();
  ::std::string* release_link_layer_address();
  void set_allocated_link_layer_address(::std::string* link_layer_address);

  // string state = 53;
  void clear_state();
  static const int kStateFieldNumber = 53;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string flags = 54;
  void clear_flags();
  static const int kFlagsFieldNumber = 54;
  const ::std::string& flags() const;
  void set_flags(const ::std::string& value);
  #if LANG_CXX11
  void set_flags(::std::string&& value);
  #endif
  void set_flags(const char* value);
  void set_flags(const char* value, size_t size);
  ::std::string* mutable_flags();
  ::std::string* release_flags();
  void set_allocated_flags(::std::string* flags);

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
  bool has_local_address() const;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 51;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr& local_address() const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* release_local_address();
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* mutable_local_address();
  void set_allocated_local_address(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* local_address);

  // uint32 context = 52;
  void clear_context();
  static const int kContextFieldNumber = 52;
  ::google::protobuf::uint32 context() const;
  void set_context(::google::protobuf::uint32 value);

  // uint32 vr_gl_addr_ct = 55;
  void clear_vr_gl_addr_ct();
  static const int kVrGlAddrCtFieldNumber = 55;
  ::google::protobuf::uint32 vr_gl_addr_ct() const;
  void set_vr_gl_addr_ct(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr > vr_global_address_list_;
  ::google::protobuf::internal::ArenaStringPtr link_layer_address_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr flags_;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* local_address_;
  ::google::protobuf::uint32 context_;
  ::google::protobuf::uint32 vr_gl_addr_ct_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entryImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_addr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr) */ {
 public:
  ipv6_nd_addr();
  virtual ~ipv6_nd_addr();

  ipv6_nd_addr(const ipv6_nd_addr& from);

  inline ipv6_nd_addr& operator=(const ipv6_nd_addr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_addr(ipv6_nd_addr&& from) noexcept
    : ipv6_nd_addr() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_addr& operator=(ipv6_nd_addr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_addr* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_addr*>(
               &_ipv6_nd_addr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ipv6_nd_addr* other);
  friend void swap(ipv6_nd_addr& a, ipv6_nd_addr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_addr* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_addr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_addr& from);
  void MergeFrom(const ipv6_nd_addr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_addr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipv6_address = 1;
  void clear_ipv6_address();
  static const int kIpv6AddressFieldNumber = 1;
  const ::std::string& ipv6_address() const;
  void set_ipv6_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6_address(::std::string&& value);
  #endif
  void set_ipv6_address(const char* value);
  void set_ipv6_address(const char* value, size_t size);
  ::std::string* mutable_ipv6_address();
  ::std::string* release_ipv6_address();
  void set_allocated_ipv6_address(::std::string* ipv6_address);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_address_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_addrImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ipv6_nd_vr_entry_KEYS

// string node_name = 1;
inline void ipv6_nd_vr_entry_KEYS::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_vr_entry_KEYS::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_vr_entry_KEYS::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_vr_entry_KEYS::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
}
#endif
inline void ipv6_nd_vr_entry_KEYS::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
}
inline void ipv6_nd_vr_entry_KEYS::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
}
inline ::std::string* ipv6_nd_vr_entry_KEYS::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_vr_entry_KEYS::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_vr_entry_KEYS::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name)
}

// string interface_name = 2;
inline void ipv6_nd_vr_entry_KEYS::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_vr_entry_KEYS::interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
  return interface_name_.GetNoArena();
}
inline void ipv6_nd_vr_entry_KEYS::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_vr_entry_KEYS::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
}
#endif
inline void ipv6_nd_vr_entry_KEYS::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
}
inline void ipv6_nd_vr_entry_KEYS::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
}
inline ::std::string* ipv6_nd_vr_entry_KEYS::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_vr_entry_KEYS::release_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_vr_entry_KEYS::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name)
}

// -------------------------------------------------------------------

// ipv6_nd_vr_entry

// string link_layer_address = 50;
inline void ipv6_nd_vr_entry::clear_link_layer_address() {
  link_layer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_vr_entry::link_layer_address() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
  return link_layer_address_.GetNoArena();
}
inline void ipv6_nd_vr_entry::set_link_layer_address(const ::std::string& value) {
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
}
#if LANG_CXX11
inline void ipv6_nd_vr_entry::set_link_layer_address(::std::string&& value) {
  
  link_layer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
}
#endif
inline void ipv6_nd_vr_entry::set_link_layer_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
}
inline void ipv6_nd_vr_entry::set_link_layer_address(const char* value, size_t size) {
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
}
inline ::std::string* ipv6_nd_vr_entry::mutable_link_layer_address() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
  return link_layer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_vr_entry::release_link_layer_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
  
  return link_layer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_vr_entry::set_allocated_link_layer_address(::std::string* link_layer_address) {
  if (link_layer_address != NULL) {
    
  } else {
    
  }
  link_layer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_layer_address);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address)
}

// .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
inline bool ipv6_nd_vr_entry::has_local_address() const {
  return this != internal_default_instance() && local_address_ != NULL;
}
inline void ipv6_nd_vr_entry::clear_local_address() {
  if (GetArenaNoVirtual() == NULL && local_address_ != NULL) {
    delete local_address_;
  }
  local_address_ = NULL;
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr& ipv6_nd_vr_entry::local_address() const {
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* p = local_address_;
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.local_address)
  return p != NULL ? *p : *reinterpret_cast<const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr*>(
      &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_addr_default_instance_);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* ipv6_nd_vr_entry::release_local_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.local_address)
  
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* temp = local_address_;
  local_address_ = NULL;
  return temp;
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* ipv6_nd_vr_entry::mutable_local_address() {
  
  if (local_address_ == NULL) {
    local_address_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr;
  }
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.local_address)
  return local_address_;
}
inline void ipv6_nd_vr_entry::set_allocated_local_address(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* local_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_address_;
  }
  if (local_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_address, submessage_arena);
    }
    
  } else {
    
  }
  local_address_ = local_address;
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.local_address)
}

// uint32 context = 52;
inline void ipv6_nd_vr_entry::clear_context() {
  context_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_vr_entry::context() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.context)
  return context_;
}
inline void ipv6_nd_vr_entry::set_context(::google::protobuf::uint32 value) {
  
  context_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.context)
}

// string state = 53;
inline void ipv6_nd_vr_entry::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_vr_entry::state() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
  return state_.GetNoArena();
}
inline void ipv6_nd_vr_entry::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
}
#if LANG_CXX11
inline void ipv6_nd_vr_entry::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
}
#endif
inline void ipv6_nd_vr_entry::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
}
inline void ipv6_nd_vr_entry::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
}
inline ::std::string* ipv6_nd_vr_entry::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_vr_entry::release_state() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_vr_entry::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state)
}

// string flags = 54;
inline void ipv6_nd_vr_entry::clear_flags() {
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_vr_entry::flags() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
  return flags_.GetNoArena();
}
inline void ipv6_nd_vr_entry::set_flags(const ::std::string& value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
}
#if LANG_CXX11
inline void ipv6_nd_vr_entry::set_flags(::std::string&& value) {
  
  flags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
}
#endif
inline void ipv6_nd_vr_entry::set_flags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
}
inline void ipv6_nd_vr_entry::set_flags(const char* value, size_t size) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
}
inline ::std::string* ipv6_nd_vr_entry::mutable_flags() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
  return flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_vr_entry::release_flags() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
  
  return flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_vr_entry::set_allocated_flags(::std::string* flags) {
  if (flags != NULL) {
    
  } else {
    
  }
  flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags)
}

// uint32 vr_gl_addr_ct = 55;
inline void ipv6_nd_vr_entry::clear_vr_gl_addr_ct() {
  vr_gl_addr_ct_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_vr_entry::vr_gl_addr_ct() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_gl_addr_ct)
  return vr_gl_addr_ct_;
}
inline void ipv6_nd_vr_entry::set_vr_gl_addr_ct(::google::protobuf::uint32 value) {
  
  vr_gl_addr_ct_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_gl_addr_ct)
}

// repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
inline int ipv6_nd_vr_entry::vr_global_address_list_size() const {
  return vr_global_address_list_.size();
}
inline void ipv6_nd_vr_entry::clear_vr_global_address_list() {
  vr_global_address_list_.Clear();
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr& ipv6_nd_vr_entry::vr_global_address_list(int index) const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_global_address_list)
  return vr_global_address_list_.Get(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* ipv6_nd_vr_entry::mutable_vr_global_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_global_address_list)
  return vr_global_address_list_.Mutable(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr* ipv6_nd_vr_entry::add_vr_global_address_list() {
  // @@protoc_insertion_point(field_add:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_global_address_list)
  return vr_global_address_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr >*
ipv6_nd_vr_entry::mutable_vr_global_address_list() {
  // @@protoc_insertion_point(field_mutable_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_global_address_list)
  return &vr_global_address_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr >&
ipv6_nd_vr_entry::vr_global_address_list() const {
  // @@protoc_insertion_point(field_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.vr_global_address_list)
  return vr_global_address_list_;
}

// -------------------------------------------------------------------

// ipv6_nd_addr

// string ipv6_address = 1;
inline void ipv6_nd_addr::clear_ipv6_address() {
  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_addr::ipv6_address() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
  return ipv6_address_.GetNoArena();
}
inline void ipv6_nd_addr::set_ipv6_address(const ::std::string& value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
}
#if LANG_CXX11
inline void ipv6_nd_addr::set_ipv6_address(::std::string&& value) {
  
  ipv6_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
}
#endif
inline void ipv6_nd_addr::set_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
}
inline void ipv6_nd_addr::set_ipv6_address(const char* value, size_t size) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
}
inline ::std::string* ipv6_nd_addr::mutable_ipv6_address() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
  return ipv6_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_addr::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
  
  return ipv6_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_addr::set_allocated_ipv6_address(::std::string* ipv6_address) {
  if (ipv6_address != NULL) {
    
  } else {
    
  }
  ipv6_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nd_virtual_router
}  // namespace nd_virtual_routers
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto__INCLUDED
