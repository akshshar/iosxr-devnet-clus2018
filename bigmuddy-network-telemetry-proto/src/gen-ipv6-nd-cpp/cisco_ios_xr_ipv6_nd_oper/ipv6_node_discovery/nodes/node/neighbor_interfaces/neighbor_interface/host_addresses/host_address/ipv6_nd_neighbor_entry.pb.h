// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_interfaces/neighbor_interface/host_addresses/host_address/ipv6_nd_neighbor_entry.proto

#ifndef PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto__INCLUDED
#define PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsipv6_nd_neighbor_entry_KEYSImpl();
void InitDefaultsipv6_nd_neighbor_entry_KEYS();
void InitDefaultsipv6_nd_neighbor_entryImpl();
void InitDefaultsipv6_nd_neighbor_entry();
void InitDefaultsbag_timespecImpl();
void InitDefaultsbag_timespec();
inline void InitDefaults() {
  InitDefaultsipv6_nd_neighbor_entry_KEYS();
  InitDefaultsipv6_nd_neighbor_entry();
  InitDefaultsbag_timespec();
}
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace neighbor_interfaces {
namespace neighbor_interface {
namespace host_addresses {
namespace host_address {
class bag_timespec;
class bag_timespecDefaultTypeInternal;
extern bag_timespecDefaultTypeInternal _bag_timespec_default_instance_;
class ipv6_nd_neighbor_entry;
class ipv6_nd_neighbor_entryDefaultTypeInternal;
extern ipv6_nd_neighbor_entryDefaultTypeInternal _ipv6_nd_neighbor_entry_default_instance_;
class ipv6_nd_neighbor_entry_KEYS;
class ipv6_nd_neighbor_entry_KEYSDefaultTypeInternal;
extern ipv6_nd_neighbor_entry_KEYSDefaultTypeInternal _ipv6_nd_neighbor_entry_KEYS_default_instance_;
}  // namespace host_address
}  // namespace host_addresses
}  // namespace neighbor_interface
}  // namespace neighbor_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace neighbor_interfaces {
namespace neighbor_interface {
namespace host_addresses {
namespace host_address {

// ===================================================================

class ipv6_nd_neighbor_entry_KEYS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS) */ {
 public:
  ipv6_nd_neighbor_entry_KEYS();
  virtual ~ipv6_nd_neighbor_entry_KEYS();

  ipv6_nd_neighbor_entry_KEYS(const ipv6_nd_neighbor_entry_KEYS& from);

  inline ipv6_nd_neighbor_entry_KEYS& operator=(const ipv6_nd_neighbor_entry_KEYS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_neighbor_entry_KEYS(ipv6_nd_neighbor_entry_KEYS&& from) noexcept
    : ipv6_nd_neighbor_entry_KEYS() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_neighbor_entry_KEYS& operator=(ipv6_nd_neighbor_entry_KEYS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_neighbor_entry_KEYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_neighbor_entry_KEYS* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_neighbor_entry_KEYS*>(
               &_ipv6_nd_neighbor_entry_KEYS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ipv6_nd_neighbor_entry_KEYS* other);
  friend void swap(ipv6_nd_neighbor_entry_KEYS& a, ipv6_nd_neighbor_entry_KEYS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_neighbor_entry_KEYS* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_neighbor_entry_KEYS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_neighbor_entry_KEYS& from);
  void MergeFrom(const ipv6_nd_neighbor_entry_KEYS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_neighbor_entry_KEYS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string interface_name = 2;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 2;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // string host_address = 3;
  void clear_host_address();
  static const int kHostAddressFieldNumber = 3;
  const ::std::string& host_address() const;
  void set_host_address(const ::std::string& value);
  #if LANG_CXX11
  void set_host_address(::std::string&& value);
  #endif
  void set_host_address(const char* value);
  void set_host_address(const char* value, size_t size);
  ::std::string* mutable_host_address();
  ::std::string* release_host_address();
  void set_allocated_host_address(::std::string* host_address);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  ::google::protobuf::internal::ArenaStringPtr host_address_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::InitDefaultsipv6_nd_neighbor_entry_KEYSImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_neighbor_entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry) */ {
 public:
  ipv6_nd_neighbor_entry();
  virtual ~ipv6_nd_neighbor_entry();

  ipv6_nd_neighbor_entry(const ipv6_nd_neighbor_entry& from);

  inline ipv6_nd_neighbor_entry& operator=(const ipv6_nd_neighbor_entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_neighbor_entry(ipv6_nd_neighbor_entry&& from) noexcept
    : ipv6_nd_neighbor_entry() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_neighbor_entry& operator=(ipv6_nd_neighbor_entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_neighbor_entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_neighbor_entry* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_neighbor_entry*>(
               &_ipv6_nd_neighbor_entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ipv6_nd_neighbor_entry* other);
  friend void swap(ipv6_nd_neighbor_entry& a, ipv6_nd_neighbor_entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_neighbor_entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_neighbor_entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_neighbor_entry& from);
  void MergeFrom(const ipv6_nd_neighbor_entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_neighbor_entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reachability_state = 51;
  void clear_reachability_state();
  static const int kReachabilityStateFieldNumber = 51;
  const ::std::string& reachability_state() const;
  void set_reachability_state(const ::std::string& value);
  #if LANG_CXX11
  void set_reachability_state(::std::string&& value);
  #endif
  void set_reachability_state(const char* value);
  void set_reachability_state(const char* value, size_t size);
  ::std::string* mutable_reachability_state();
  ::std::string* release_reachability_state();
  void set_allocated_reachability_state(::std::string* reachability_state);

  // string link_layer_address = 52;
  void clear_link_layer_address();
  static const int kLinkLayerAddressFieldNumber = 52;
  const ::std::string& link_layer_address() const;
  void set_link_layer_address(const ::std::string& value);
  #if LANG_CXX11
  void set_link_layer_address(::std::string&& value);
  #endif
  void set_link_layer_address(const char* value);
  void set_link_layer_address(const char* value, size_t size);
  ::std::string* mutable_link_layer_address();
  ::std::string* release_link_layer_address();
  void set_allocated_link_layer_address(::std::string* link_layer_address);

  // string encapsulation = 53;
  void clear_encapsulation();
  static const int kEncapsulationFieldNumber = 53;
  const ::std::string& encapsulation() const;
  void set_encapsulation(const ::std::string& value);
  #if LANG_CXX11
  void set_encapsulation(::std::string&& value);
  #endif
  void set_encapsulation(const char* value);
  void set_encapsulation(const char* value, size_t size);
  ::std::string* mutable_encapsulation();
  ::std::string* release_encapsulation();
  void set_allocated_encapsulation(::std::string* encapsulation);

  // string selected_encapsulation = 54;
  void clear_selected_encapsulation();
  static const int kSelectedEncapsulationFieldNumber = 54;
  const ::std::string& selected_encapsulation() const;
  void set_selected_encapsulation(const ::std::string& value);
  #if LANG_CXX11
  void set_selected_encapsulation(::std::string&& value);
  #endif
  void set_selected_encapsulation(const char* value);
  void set_selected_encapsulation(const char* value, size_t size);
  ::std::string* mutable_selected_encapsulation();
  ::std::string* release_selected_encapsulation();
  void set_allocated_selected_encapsulation(::std::string* selected_encapsulation);

  // string origin_encapsulation = 55;
  void clear_origin_encapsulation();
  static const int kOriginEncapsulationFieldNumber = 55;
  const ::std::string& origin_encapsulation() const;
  void set_origin_encapsulation(const ::std::string& value);
  #if LANG_CXX11
  void set_origin_encapsulation(::std::string&& value);
  #endif
  void set_origin_encapsulation(const char* value);
  void set_origin_encapsulation(const char* value, size_t size);
  ::std::string* mutable_origin_encapsulation();
  ::std::string* release_origin_encapsulation();
  void set_allocated_origin_encapsulation(::std::string* origin_encapsulation);

  // string interface_name = 56;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 56;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // string location = 57;
  void clear_location();
  static const int kLocationFieldNumber = 57;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec last_reached_time = 50;
  bool has_last_reached_time() const;
  void clear_last_reached_time();
  static const int kLastReachedTimeFieldNumber = 50;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec& last_reached_time() const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* release_last_reached_time();
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* mutable_last_reached_time();
  void set_allocated_last_reached_time(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* last_reached_time);

  // bool is_router = 58;
  void clear_is_router();
  static const int kIsRouterFieldNumber = 58;
  bool is_router() const;
  void set_is_router(bool value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reachability_state_;
  ::google::protobuf::internal::ArenaStringPtr link_layer_address_;
  ::google::protobuf::internal::ArenaStringPtr encapsulation_;
  ::google::protobuf::internal::ArenaStringPtr selected_encapsulation_;
  ::google::protobuf::internal::ArenaStringPtr origin_encapsulation_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* last_reached_time_;
  bool is_router_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::InitDefaultsipv6_nd_neighbor_entryImpl();
};
// -------------------------------------------------------------------

class bag_timespec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec) */ {
 public:
  bag_timespec();
  virtual ~bag_timespec();

  bag_timespec(const bag_timespec& from);

  inline bag_timespec& operator=(const bag_timespec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bag_timespec(bag_timespec&& from) noexcept
    : bag_timespec() {
    *this = ::std::move(from);
  }

  inline bag_timespec& operator=(bag_timespec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_timespec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bag_timespec* internal_default_instance() {
    return reinterpret_cast<const bag_timespec*>(
               &_bag_timespec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(bag_timespec* other);
  friend void swap(bag_timespec& a, bag_timespec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bag_timespec* New() const PROTOBUF_FINAL { return New(NULL); }

  bag_timespec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bag_timespec& from);
  void MergeFrom(const bag_timespec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bag_timespec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seconds = 1;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::uint32 seconds() const;
  void set_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto::InitDefaultsbag_timespecImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ipv6_nd_neighbor_entry_KEYS

// string node_name = 1;
inline void ipv6_nd_neighbor_entry_KEYS::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry_KEYS::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry_KEYS::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry_KEYS::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
}
#endif
inline void ipv6_nd_neighbor_entry_KEYS::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
}
inline void ipv6_nd_neighbor_entry_KEYS::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry_KEYS::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.node_name)
}

// string interface_name = 2;
inline void ipv6_nd_neighbor_entry_KEYS::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry_KEYS::interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
  return interface_name_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry_KEYS::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry_KEYS::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
}
#endif
inline void ipv6_nd_neighbor_entry_KEYS::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
}
inline void ipv6_nd_neighbor_entry_KEYS::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::release_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry_KEYS::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.interface_name)
}

// string host_address = 3;
inline void ipv6_nd_neighbor_entry_KEYS::clear_host_address() {
  host_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry_KEYS::host_address() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
  return host_address_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry_KEYS::set_host_address(const ::std::string& value) {
  
  host_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry_KEYS::set_host_address(::std::string&& value) {
  
  host_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
}
#endif
inline void ipv6_nd_neighbor_entry_KEYS::set_host_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
}
inline void ipv6_nd_neighbor_entry_KEYS::set_host_address(const char* value, size_t size) {
  
  host_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::mutable_host_address() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
  return host_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry_KEYS::release_host_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
  
  return host_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry_KEYS::set_allocated_host_address(::std::string* host_address) {
  if (host_address != NULL) {
    
  } else {
    
  }
  host_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_address);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry_KEYS.host_address)
}

// -------------------------------------------------------------------

// ipv6_nd_neighbor_entry

// .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec last_reached_time = 50;
inline bool ipv6_nd_neighbor_entry::has_last_reached_time() const {
  return this != internal_default_instance() && last_reached_time_ != NULL;
}
inline void ipv6_nd_neighbor_entry::clear_last_reached_time() {
  if (GetArenaNoVirtual() == NULL && last_reached_time_ != NULL) {
    delete last_reached_time_;
  }
  last_reached_time_ = NULL;
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec& ipv6_nd_neighbor_entry::last_reached_time() const {
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* p = last_reached_time_;
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.last_reached_time)
  return p != NULL ? *p : *reinterpret_cast<const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec*>(
      &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::_bag_timespec_default_instance_);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* ipv6_nd_neighbor_entry::release_last_reached_time() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.last_reached_time)
  
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* temp = last_reached_time_;
  last_reached_time_ = NULL;
  return temp;
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* ipv6_nd_neighbor_entry::mutable_last_reached_time() {
  
  if (last_reached_time_ == NULL) {
    last_reached_time_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec;
  }
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.last_reached_time)
  return last_reached_time_;
}
inline void ipv6_nd_neighbor_entry::set_allocated_last_reached_time(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_interfaces::neighbor_interface::host_addresses::host_address::bag_timespec* last_reached_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_reached_time_;
  }
  if (last_reached_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_reached_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_reached_time, submessage_arena);
    }
    
  } else {
    
  }
  last_reached_time_ = last_reached_time;
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.last_reached_time)
}

// string reachability_state = 51;
inline void ipv6_nd_neighbor_entry::clear_reachability_state() {
  reachability_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::reachability_state() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
  return reachability_state_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_reachability_state(const ::std::string& value) {
  
  reachability_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_reachability_state(::std::string&& value) {
  
  reachability_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
}
#endif
inline void ipv6_nd_neighbor_entry::set_reachability_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reachability_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
}
inline void ipv6_nd_neighbor_entry::set_reachability_state(const char* value, size_t size) {
  
  reachability_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_reachability_state() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
  return reachability_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_reachability_state() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
  
  return reachability_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_reachability_state(::std::string* reachability_state) {
  if (reachability_state != NULL) {
    
  } else {
    
  }
  reachability_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reachability_state);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.reachability_state)
}

// string link_layer_address = 52;
inline void ipv6_nd_neighbor_entry::clear_link_layer_address() {
  link_layer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::link_layer_address() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
  return link_layer_address_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_link_layer_address(const ::std::string& value) {
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_link_layer_address(::std::string&& value) {
  
  link_layer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
}
#endif
inline void ipv6_nd_neighbor_entry::set_link_layer_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
}
inline void ipv6_nd_neighbor_entry::set_link_layer_address(const char* value, size_t size) {
  
  link_layer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_link_layer_address() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
  return link_layer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_link_layer_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
  
  return link_layer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_link_layer_address(::std::string* link_layer_address) {
  if (link_layer_address != NULL) {
    
  } else {
    
  }
  link_layer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_layer_address);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.link_layer_address)
}

// string encapsulation = 53;
inline void ipv6_nd_neighbor_entry::clear_encapsulation() {
  encapsulation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::encapsulation() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
  return encapsulation_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_encapsulation(const ::std::string& value) {
  
  encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_encapsulation(::std::string&& value) {
  
  encapsulation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
}
#endif
inline void ipv6_nd_neighbor_entry::set_encapsulation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
}
inline void ipv6_nd_neighbor_entry::set_encapsulation(const char* value, size_t size) {
  
  encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_encapsulation() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
  return encapsulation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_encapsulation() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
  
  return encapsulation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_encapsulation(::std::string* encapsulation) {
  if (encapsulation != NULL) {
    
  } else {
    
  }
  encapsulation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encapsulation);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.encapsulation)
}

// string selected_encapsulation = 54;
inline void ipv6_nd_neighbor_entry::clear_selected_encapsulation() {
  selected_encapsulation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::selected_encapsulation() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
  return selected_encapsulation_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_selected_encapsulation(const ::std::string& value) {
  
  selected_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_selected_encapsulation(::std::string&& value) {
  
  selected_encapsulation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
}
#endif
inline void ipv6_nd_neighbor_entry::set_selected_encapsulation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selected_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
}
inline void ipv6_nd_neighbor_entry::set_selected_encapsulation(const char* value, size_t size) {
  
  selected_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_selected_encapsulation() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
  return selected_encapsulation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_selected_encapsulation() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
  
  return selected_encapsulation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_selected_encapsulation(::std::string* selected_encapsulation) {
  if (selected_encapsulation != NULL) {
    
  } else {
    
  }
  selected_encapsulation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selected_encapsulation);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.selected_encapsulation)
}

// string origin_encapsulation = 55;
inline void ipv6_nd_neighbor_entry::clear_origin_encapsulation() {
  origin_encapsulation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::origin_encapsulation() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
  return origin_encapsulation_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_origin_encapsulation(const ::std::string& value) {
  
  origin_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_origin_encapsulation(::std::string&& value) {
  
  origin_encapsulation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
}
#endif
inline void ipv6_nd_neighbor_entry::set_origin_encapsulation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origin_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
}
inline void ipv6_nd_neighbor_entry::set_origin_encapsulation(const char* value, size_t size) {
  
  origin_encapsulation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_origin_encapsulation() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
  return origin_encapsulation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_origin_encapsulation() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
  
  return origin_encapsulation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_origin_encapsulation(::std::string* origin_encapsulation) {
  if (origin_encapsulation != NULL) {
    
  } else {
    
  }
  origin_encapsulation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_encapsulation);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.origin_encapsulation)
}

// string interface_name = 56;
inline void ipv6_nd_neighbor_entry::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
  return interface_name_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
}
#endif
inline void ipv6_nd_neighbor_entry::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
}
inline void ipv6_nd_neighbor_entry::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.interface_name)
}

// string location = 57;
inline void ipv6_nd_neighbor_entry::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_neighbor_entry::location() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
  return location_.GetNoArena();
}
inline void ipv6_nd_neighbor_entry::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
}
#if LANG_CXX11
inline void ipv6_nd_neighbor_entry::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
}
#endif
inline void ipv6_nd_neighbor_entry::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
}
inline void ipv6_nd_neighbor_entry::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
}
inline ::std::string* ipv6_nd_neighbor_entry::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_neighbor_entry::release_location() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_neighbor_entry::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.location)
}

// bool is_router = 58;
inline void ipv6_nd_neighbor_entry::clear_is_router() {
  is_router_ = false;
}
inline bool ipv6_nd_neighbor_entry::is_router() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.is_router)
  return is_router_;
}
inline void ipv6_nd_neighbor_entry::set_is_router(bool value) {
  
  is_router_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.ipv6_nd_neighbor_entry.is_router)
}

// -------------------------------------------------------------------

// bag_timespec

// uint32 seconds = 1;
inline void bag_timespec::clear_seconds() {
  seconds_ = 0u;
}
inline ::google::protobuf::uint32 bag_timespec::seconds() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec.seconds)
  return seconds_;
}
inline void bag_timespec::set_seconds(::google::protobuf::uint32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_interfaces.neighbor_interface.host_addresses.host_address.bag_timespec.seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace host_address
}  // namespace host_addresses
}  // namespace neighbor_interface
}  // namespace neighbor_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5finterfaces_2fneighbor_5finterface_2fhost_5faddresses_2fhost_5faddress_2fipv6_5fnd_5fneighbor_5fentry_2eproto__INCLUDED
