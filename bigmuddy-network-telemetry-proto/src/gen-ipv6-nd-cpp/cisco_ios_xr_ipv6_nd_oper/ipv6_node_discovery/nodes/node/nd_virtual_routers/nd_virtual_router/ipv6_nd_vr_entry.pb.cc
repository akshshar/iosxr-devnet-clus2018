// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/nd_virtual_routers/nd_virtual_router/ipv6_nd_vr_entry.proto

#include "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/nd_virtual_routers/nd_virtual_router/ipv6_nd_vr_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace nd_virtual_routers {
namespace nd_virtual_router {
class ipv6_nd_vr_entry_KEYSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_vr_entry_KEYS>
      _instance;
} _ipv6_nd_vr_entry_KEYS_default_instance_;
class ipv6_nd_vr_entryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_vr_entry>
      _instance;
} _ipv6_nd_vr_entry_default_instance_;
class ipv6_nd_addrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_addr>
      _instance;
} _ipv6_nd_addr_default_instance_;
}  // namespace nd_virtual_router
}  // namespace nd_virtual_routers
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto {
void InitDefaultsipv6_nd_vr_entry_KEYSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_vr_entry_KEYS_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_vr_entry_KEYS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_vr_entry_KEYSImpl);
}

void InitDefaultsipv6_nd_vr_entryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_vr_entry_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_vr_entry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_vr_entryImpl);
}

void InitDefaultsipv6_nd_addrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_addr_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_addr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_addrImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS, interface_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, link_layer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, local_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, vr_gl_addr_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry, vr_global_address_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr, ipv6_address_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry_KEYS)},
  { 7, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_vr_entry)},
  { 19, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_vr_entry_KEYS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_vr_entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_addr_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/nd_virtual_routers/nd_virtual_router/ipv6_nd_vr_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\ntcisco_ios_xr_ipv6_nd_oper/ipv6_node_di"
      "scovery/nodes/node/nd_virtual_routers/nd"
      "_virtual_router/ipv6_nd_vr_entry.proto\022]"
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_disc"
      "overy.nodes.node.nd_virtual_routers.nd_v"
      "irtual_router\"B\n\025ipv6_nd_vr_entry_KEYS\022\021"
      "\n\tnode_name\030\001 \001(\t\022\026\n\016interface_name\030\002 \001("
      "\t\"\207\003\n\020ipv6_nd_vr_entry\022\032\n\022link_layer_add"
      "ress\0302 \001(\t\022\202\001\n\rlocal_address\0303 \001(\0132k.cis"
      "co_ios_xr_ipv6_nd_oper.ipv6_node_discove"
      "ry.nodes.node.nd_virtual_routers.nd_virt"
      "ual_router.ipv6_nd_addr\022\017\n\007context\0304 \001(\r"
      "\022\r\n\005state\0305 \001(\t\022\r\n\005flags\0306 \001(\t\022\025\n\rvr_gl_"
      "addr_ct\0307 \001(\r\022\213\001\n\026vr_global_address_list"
      "\0308 \003(\0132k.cisco_ios_xr_ipv6_nd_oper.ipv6_"
      "node_discovery.nodes.node.nd_virtual_rou"
      "ters.nd_virtual_router.ipv6_nd_addr\"$\n\014i"
      "pv6_nd_addr\022\024\n\014ipv6_address\030\001 \001(\tb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/nd_virtual_routers/nd_virtual_router/ipv6_nd_vr_entry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace nd_virtual_routers {
namespace nd_virtual_router {

// ===================================================================

void ipv6_nd_vr_entry_KEYS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_vr_entry_KEYS::kNodeNameFieldNumber;
const int ipv6_nd_vr_entry_KEYS::kInterfaceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_vr_entry_KEYS::ipv6_nd_vr_entry_KEYS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entry_KEYS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
}
ipv6_nd_vr_entry_KEYS::ipv6_nd_vr_entry_KEYS(const ipv6_nd_vr_entry_KEYS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_name().size() > 0) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
}

void ipv6_nd_vr_entry_KEYS::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_vr_entry_KEYS::~ipv6_nd_vr_entry_KEYS() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  SharedDtor();
}

void ipv6_nd_vr_entry_KEYS::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_vr_entry_KEYS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_vr_entry_KEYS::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_vr_entry_KEYS& ipv6_nd_vr_entry_KEYS::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entry_KEYS();
  return *internal_default_instance();
}

ipv6_nd_vr_entry_KEYS* ipv6_nd_vr_entry_KEYS::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_vr_entry_KEYS* n = new ipv6_nd_vr_entry_KEYS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_vr_entry_KEYS::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_vr_entry_KEYS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_name().data(), static_cast<int>(this->interface_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  return false;
#undef DO_
}

void ipv6_nd_vr_entry_KEYS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
}

::google::protobuf::uint8* ipv6_nd_vr_entry_KEYS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  return target;
}

size_t ipv6_nd_vr_entry_KEYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_vr_entry_KEYS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_vr_entry_KEYS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_vr_entry_KEYS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
    MergeFrom(*source);
  }
}

void ipv6_nd_vr_entry_KEYS::MergeFrom(const ipv6_nd_vr_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.interface_name().size() > 0) {

    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
}

void ipv6_nd_vr_entry_KEYS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_vr_entry_KEYS::CopyFrom(const ipv6_nd_vr_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_vr_entry_KEYS::IsInitialized() const {
  return true;
}

void ipv6_nd_vr_entry_KEYS::Swap(ipv6_nd_vr_entry_KEYS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_vr_entry_KEYS::InternalSwap(ipv6_nd_vr_entry_KEYS* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  interface_name_.Swap(&other->interface_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_vr_entry_KEYS::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_vr_entry::InitAsDefaultInstance() {
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::_ipv6_nd_vr_entry_default_instance_._instance.get_mutable()->local_address_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_vr_entry::kLinkLayerAddressFieldNumber;
const int ipv6_nd_vr_entry::kLocalAddressFieldNumber;
const int ipv6_nd_vr_entry::kContextFieldNumber;
const int ipv6_nd_vr_entry::kStateFieldNumber;
const int ipv6_nd_vr_entry::kFlagsFieldNumber;
const int ipv6_nd_vr_entry::kVrGlAddrCtFieldNumber;
const int ipv6_nd_vr_entry::kVrGlobalAddressListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_vr_entry::ipv6_nd_vr_entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
}
ipv6_nd_vr_entry::ipv6_nd_vr_entry(const ipv6_nd_vr_entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vr_global_address_list_(from.vr_global_address_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_layer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link_layer_address().size() > 0) {
    link_layer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_layer_address_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flags().size() > 0) {
    flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flags_);
  }
  if (from.has_local_address()) {
    local_address_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr(*from.local_address_);
  } else {
    local_address_ = NULL;
  }
  ::memcpy(&context_, &from.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&vr_gl_addr_ct_) -
    reinterpret_cast<char*>(&context_)) + sizeof(vr_gl_addr_ct_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
}

void ipv6_nd_vr_entry::SharedCtor() {
  link_layer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vr_gl_addr_ct_) -
      reinterpret_cast<char*>(&local_address_)) + sizeof(vr_gl_addr_ct_));
  _cached_size_ = 0;
}

ipv6_nd_vr_entry::~ipv6_nd_vr_entry() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  SharedDtor();
}

void ipv6_nd_vr_entry::SharedDtor() {
  link_layer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_address_;
}

void ipv6_nd_vr_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_vr_entry::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_vr_entry& ipv6_nd_vr_entry::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_vr_entry();
  return *internal_default_instance();
}

ipv6_nd_vr_entry* ipv6_nd_vr_entry::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_vr_entry* n = new ipv6_nd_vr_entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_vr_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vr_global_address_list_.Clear();
  link_layer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && local_address_ != NULL) {
    delete local_address_;
  }
  local_address_ = NULL;
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vr_gl_addr_ct_) -
      reinterpret_cast<char*>(&context_)) + sizeof(vr_gl_addr_ct_));
  _internal_metadata_.Clear();
}

bool ipv6_nd_vr_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string link_layer_address = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_layer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link_layer_address().data(), static_cast<int>(this->link_layer_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 context = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flags = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flags().data(), static_cast<int>(this->flags().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vr_gl_addr_ct = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vr_gl_addr_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vr_global_address_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  return false;
#undef DO_
}

void ipv6_nd_vr_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_layer_address = 50;
  if (this->link_layer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_layer_address().data(), static_cast<int>(this->link_layer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->link_layer_address(), output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
  if (this->has_local_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->local_address_, output);
  }

  // uint32 context = 52;
  if (this->context() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->context(), output);
  }

  // string state = 53;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->state(), output);
  }

  // string flags = 54;
  if (this->flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), static_cast<int>(this->flags().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->flags(), output);
  }

  // uint32 vr_gl_addr_ct = 55;
  if (this->vr_gl_addr_ct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->vr_gl_addr_ct(), output);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vr_global_address_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->vr_global_address_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
}

::google::protobuf::uint8* ipv6_nd_vr_entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_layer_address = 50;
  if (this->link_layer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_layer_address().data(), static_cast<int>(this->link_layer_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.link_layer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->link_layer_address(), target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
  if (this->has_local_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, *this->local_address_, deterministic, target);
  }

  // uint32 context = 52;
  if (this->context() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->context(), target);
  }

  // string state = 53;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->state(), target);
  }

  // string flags = 54;
  if (this->flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), static_cast<int>(this->flags().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry.flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->flags(), target);
  }

  // uint32 vr_gl_addr_ct = 55;
  if (this->vr_gl_addr_ct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->vr_gl_addr_ct(), target);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vr_global_address_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        56, this->vr_global_address_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  return target;
}

size_t ipv6_nd_vr_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr vr_global_address_list = 56;
  {
    unsigned int count = static_cast<unsigned int>(this->vr_global_address_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vr_global_address_list(static_cast<int>(i)));
    }
  }

  // string link_layer_address = 50;
  if (this->link_layer_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_layer_address());
  }

  // string state = 53;
  if (this->state().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string flags = 54;
  if (this->flags().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flags());
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr local_address = 51;
  if (this->has_local_address()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_address_);
  }

  // uint32 context = 52;
  if (this->context() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->context());
  }

  // uint32 vr_gl_addr_ct = 55;
  if (this->vr_gl_addr_ct() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vr_gl_addr_ct());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_vr_entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_vr_entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_vr_entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
    MergeFrom(*source);
  }
}

void ipv6_nd_vr_entry::MergeFrom(const ipv6_nd_vr_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vr_global_address_list_.MergeFrom(from.vr_global_address_list_);
  if (from.link_layer_address().size() > 0) {

    link_layer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_layer_address_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.flags().size() > 0) {

    flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flags_);
  }
  if (from.has_local_address()) {
    mutable_local_address()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::nd_virtual_routers::nd_virtual_router::ipv6_nd_addr::MergeFrom(from.local_address());
  }
  if (from.context() != 0) {
    set_context(from.context());
  }
  if (from.vr_gl_addr_ct() != 0) {
    set_vr_gl_addr_ct(from.vr_gl_addr_ct());
  }
}

void ipv6_nd_vr_entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_vr_entry::CopyFrom(const ipv6_nd_vr_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_vr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_vr_entry::IsInitialized() const {
  return true;
}

void ipv6_nd_vr_entry::Swap(ipv6_nd_vr_entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_vr_entry::InternalSwap(ipv6_nd_vr_entry* other) {
  using std::swap;
  vr_global_address_list_.InternalSwap(&other->vr_global_address_list_);
  link_layer_address_.Swap(&other->link_layer_address_);
  state_.Swap(&other->state_);
  flags_.Swap(&other->flags_);
  swap(local_address_, other->local_address_);
  swap(context_, other->context_);
  swap(vr_gl_addr_ct_, other->vr_gl_addr_ct_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_vr_entry::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_addr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_addr::kIpv6AddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_addr::ipv6_nd_addr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
}
ipv6_nd_addr::ipv6_nd_addr(const ipv6_nd_addr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv6_address().size() > 0) {
    ipv6_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
}

void ipv6_nd_addr::SharedCtor() {
  ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_addr::~ipv6_nd_addr() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  SharedDtor();
}

void ipv6_nd_addr::SharedDtor() {
  ipv6_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_addr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_addr::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_addr& ipv6_nd_addr::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  return *internal_default_instance();
}

ipv6_nd_addr* ipv6_nd_addr::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_addr* n = new ipv6_nd_addr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_addr::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_addr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipv6_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  return false;
#undef DO_
}

void ipv6_nd_addr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipv6_address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
}

::google::protobuf::uint8* ipv6_nd_addr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr.ipv6_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipv6_address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  return target;
}

size_t ipv6_nd_addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv6_address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_addr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_addr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_addr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
    MergeFrom(*source);
  }
}

void ipv6_nd_addr::MergeFrom(const ipv6_nd_addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipv6_address().size() > 0) {

    ipv6_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
}

void ipv6_nd_addr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_addr::CopyFrom(const ipv6_nd_addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.nd_virtual_routers.nd_virtual_router.ipv6_nd_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_addr::IsInitialized() const {
  return true;
}

void ipv6_nd_addr::Swap(ipv6_nd_addr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_addr::InternalSwap(ipv6_nd_addr* other) {
  using std::swap;
  ipv6_address_.Swap(&other->ipv6_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_addr::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fnd_5fvirtual_5frouters_2fnd_5fvirtual_5frouter_2fipv6_5fnd_5fvr_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nd_virtual_router
}  // namespace nd_virtual_routers
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)
