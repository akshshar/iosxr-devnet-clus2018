// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#include "telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace telemetry {
class TelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Telemetry>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr node_id_str_;
  ::google::protobuf::internal::ArenaStringPtr subscription_id_str_;
} _Telemetry_default_instance_;
class TelemetryFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryField>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr bytes_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool bool_value_;
  ::google::protobuf::uint32 uint32_value_;
  ::google::protobuf::uint64 uint64_value_;
  ::google::protobuf::int32 sint32_value_;
  ::google::protobuf::int64 sint64_value_;
  double double_value_;
  float float_value_;
} _TelemetryField_default_instance_;
class TelemetryGPBTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryGPBTable>
      _instance;
} _TelemetryGPBTable_default_instance_;
class TelemetryRowGPBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryRowGPB>
      _instance;
} _TelemetryRowGPB_default_instance_;
}  // namespace telemetry
namespace protobuf_telemetry_2eproto {
void InitDefaultsTelemetryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_telemetry_2eproto::InitDefaultsTelemetryField();
  protobuf_telemetry_2eproto::InitDefaultsTelemetryGPBTable();
  {
    void* ptr = &::telemetry::_Telemetry_default_instance_;
    new (ptr) ::telemetry::Telemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::Telemetry::InitAsDefaultInstance();
}

void InitDefaultsTelemetry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetryImpl);
}

void InitDefaultsTelemetryFieldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_TelemetryField_default_instance_;
    new (ptr) ::telemetry::TelemetryField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::TelemetryField::InitAsDefaultInstance();
}

void InitDefaultsTelemetryField() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetryFieldImpl);
}

void InitDefaultsTelemetryGPBTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_telemetry_2eproto::InitDefaultsTelemetryRowGPB();
  {
    void* ptr = &::telemetry::_TelemetryGPBTable_default_instance_;
    new (ptr) ::telemetry::TelemetryGPBTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::TelemetryGPBTable::InitAsDefaultInstance();
}

void InitDefaultsTelemetryGPBTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetryGPBTableImpl);
}

void InitDefaultsTelemetryRowGPBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_TelemetryRowGPB_default_instance_;
    new (ptr) ::telemetry::TelemetryRowGPB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::TelemetryRowGPB::InitAsDefaultInstance();
}

void InitDefaultsTelemetryRowGPB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelemetryRowGPBImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::telemetry::TelemetryDefaultTypeInternal, node_id_str_),
  offsetof(::telemetry::TelemetryDefaultTypeInternal, subscription_id_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, encoding_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, collection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, collection_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, msg_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, data_gpbkv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, data_gpb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, collection_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Telemetry, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, name_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, bytes_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, string_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, bool_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, uint32_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, uint64_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, sint32_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, sint64_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, double_value_),
  offsetof(::telemetry::TelemetryFieldDefaultTypeInternal, float_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryField, value_by_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryGPBTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryGPBTable, row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryRowGPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryRowGPB, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryRowGPB, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::TelemetryRowGPB, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::telemetry::Telemetry)},
  { 16, -1, sizeof(::telemetry::TelemetryField)},
  { 34, -1, sizeof(::telemetry::TelemetryGPBTable)},
  { 40, -1, sizeof(::telemetry::TelemetryRowGPB)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_Telemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_TelemetryField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_TelemetryGPBTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_TelemetryRowGPB_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "telemetry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017telemetry.proto\022\ttelemetry\"\274\002\n\tTelemet"
      "ry\022\025\n\013node_id_str\030\001 \001(\tH\000\022\035\n\023subscriptio"
      "n_id_str\030\003 \001(\tH\001\022\025\n\rencoding_path\030\006 \001(\t\022"
      "\025\n\rcollection_id\030\010 \001(\004\022\035\n\025collection_sta"
      "rt_time\030\t \001(\004\022\025\n\rmsg_timestamp\030\n \001(\004\022-\n\n"
      "data_gpbkv\030\013 \003(\0132\031.telemetry.TelemetryFi"
      "eld\022.\n\010data_gpb\030\014 \001(\0132\034.telemetry.Teleme"
      "tryGPBTable\022\033\n\023collection_end_time\030\r \001(\004"
      "B\t\n\007node_idB\016\n\014subscription\"\301\002\n\016Telemetr"
      "yField\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022"
      "\025\n\013bytes_value\030\004 \001(\014H\000\022\026\n\014string_value\030\005"
      " \001(\tH\000\022\024\n\nbool_value\030\006 \001(\010H\000\022\026\n\014uint32_v"
      "alue\030\007 \001(\rH\000\022\026\n\014uint64_value\030\010 \001(\004H\000\022\026\n\014"
      "sint32_value\030\t \001(\021H\000\022\026\n\014sint64_value\030\n \001"
      "(\022H\000\022\026\n\014double_value\030\013 \001(\001H\000\022\025\n\013float_va"
      "lue\030\014 \001(\002H\000\022)\n\006fields\030\017 \003(\0132\031.telemetry."
      "TelemetryFieldB\017\n\rvalue_by_type\"<\n\021Telem"
      "etryGPBTable\022\'\n\003row\030\001 \003(\0132\032.telemetry.Te"
      "lemetryRowGPB\"C\n\017TelemetryRowGPB\022\021\n\ttime"
      "stamp\030\001 \001(\004\022\014\n\004keys\030\n \001(\014\022\017\n\007content\030\013 \001"
      "(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "telemetry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_telemetry_2eproto
namespace telemetry {

// ===================================================================

void Telemetry::InitAsDefaultInstance() {
  ::telemetry::_Telemetry_default_instance_.node_id_str_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::telemetry::_Telemetry_default_instance_.subscription_id_str_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::telemetry::_Telemetry_default_instance_._instance.get_mutable()->data_gpb_ = const_cast< ::telemetry::TelemetryGPBTable*>(
      ::telemetry::TelemetryGPBTable::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telemetry::kNodeIdStrFieldNumber;
const int Telemetry::kSubscriptionIdStrFieldNumber;
const int Telemetry::kEncodingPathFieldNumber;
const int Telemetry::kCollectionIdFieldNumber;
const int Telemetry::kCollectionStartTimeFieldNumber;
const int Telemetry::kMsgTimestampFieldNumber;
const int Telemetry::kDataGpbkvFieldNumber;
const int Telemetry::kDataGpbFieldNumber;
const int Telemetry::kCollectionEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telemetry::Telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_2eproto::InitDefaultsTelemetry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_gpbkv_(from.data_gpbkv_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encoding_path().size() > 0) {
    encoding_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_path_);
  }
  if (from.has_data_gpb()) {
    data_gpb_ = new ::telemetry::TelemetryGPBTable(*from.data_gpb_);
  } else {
    data_gpb_ = NULL;
  }
  ::memcpy(&collection_id_, &from.collection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&collection_end_time_) -
    reinterpret_cast<char*>(&collection_id_)) + sizeof(collection_end_time_));
  clear_has_node_id();
  switch (from.node_id_case()) {
    case kNodeIdStr: {
      set_node_id_str(from.node_id_str());
      break;
    }
    case NODE_ID_NOT_SET: {
      break;
    }
  }
  clear_has_subscription();
  switch (from.subscription_case()) {
    case kSubscriptionIdStr: {
      set_subscription_id_str(from.subscription_id_str());
      break;
    }
    case SUBSCRIPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:telemetry.Telemetry)
}

void Telemetry::SharedCtor() {
  encoding_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_gpb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collection_end_time_) -
      reinterpret_cast<char*>(&data_gpb_)) + sizeof(collection_end_time_));
  clear_has_node_id();
  clear_has_subscription();
  _cached_size_ = 0;
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:telemetry.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  encoding_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_gpb_;
  if (has_node_id()) {
    clear_node_id();
  }
  if (has_subscription()) {
    clear_subscription();
  }
}

void Telemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Telemetry& Telemetry::default_instance() {
  ::protobuf_telemetry_2eproto::InitDefaultsTelemetry();
  return *internal_default_instance();
}

Telemetry* Telemetry::New(::google::protobuf::Arena* arena) const {
  Telemetry* n = new Telemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Telemetry::clear_node_id() {
// @@protoc_insertion_point(one_of_clear_start:telemetry.Telemetry)
  switch (node_id_case()) {
    case kNodeIdStr: {
      node_id_.node_id_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NODE_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_ID_NOT_SET;
}

void Telemetry::clear_subscription() {
// @@protoc_insertion_point(one_of_clear_start:telemetry.Telemetry)
  switch (subscription_case()) {
    case kSubscriptionIdStr: {
      subscription_.subscription_id_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SUBSCRIPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SUBSCRIPTION_NOT_SET;
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_gpbkv_.Clear();
  encoding_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_gpb_ != NULL) {
    delete data_gpb_;
  }
  data_gpb_ = NULL;
  ::memset(&collection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collection_end_time_) -
      reinterpret_cast<char*>(&collection_id_)) + sizeof(collection_end_time_));
  clear_node_id();
  clear_subscription();
  _internal_metadata_.Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.Telemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id_str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id_str().data(), static_cast<int>(this->node_id_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "telemetry.Telemetry.node_id_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subscription_id_str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription_id_str().data(), static_cast<int>(this->subscription_id_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "telemetry.Telemetry.subscription_id_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encoding_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encoding_path().data(), static_cast<int>(this->encoding_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "telemetry.Telemetry.encoding_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collection_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collection_start_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msg_timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .telemetry.TelemetryField data_gpbkv = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_gpbkv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry.TelemetryGPBTable data_gpb = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_gpb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collection_end_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.Telemetry)
  return false;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id_str = 1;
  if (has_node_id_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id_str().data(), static_cast<int>(this->node_id_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.node_id_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id_str(), output);
  }

  // string subscription_id_str = 3;
  if (has_subscription_id_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription_id_str().data(), static_cast<int>(this->subscription_id_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.subscription_id_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subscription_id_str(), output);
  }

  // string encoding_path = 6;
  if (this->encoding_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encoding_path().data(), static_cast<int>(this->encoding_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.encoding_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encoding_path(), output);
  }

  // uint64 collection_id = 8;
  if (this->collection_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->collection_id(), output);
  }

  // uint64 collection_start_time = 9;
  if (this->collection_start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->collection_start_time(), output);
  }

  // uint64 msg_timestamp = 10;
  if (this->msg_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->msg_timestamp(), output);
  }

  // repeated .telemetry.TelemetryField data_gpbkv = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_gpbkv_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data_gpbkv(static_cast<int>(i)), output);
  }

  // .telemetry.TelemetryGPBTable data_gpb = 12;
  if (this->has_data_gpb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->data_gpb_, output);
  }

  // uint64 collection_end_time = 13;
  if (this->collection_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->collection_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.Telemetry)
}

::google::protobuf::uint8* Telemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id_str = 1;
  if (has_node_id_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id_str().data(), static_cast<int>(this->node_id_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.node_id_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id_str(), target);
  }

  // string subscription_id_str = 3;
  if (has_subscription_id_str()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription_id_str().data(), static_cast<int>(this->subscription_id_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.subscription_id_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subscription_id_str(), target);
  }

  // string encoding_path = 6;
  if (this->encoding_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encoding_path().data(), static_cast<int>(this->encoding_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.encoding_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encoding_path(), target);
  }

  // uint64 collection_id = 8;
  if (this->collection_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->collection_id(), target);
  }

  // uint64 collection_start_time = 9;
  if (this->collection_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->collection_start_time(), target);
  }

  // uint64 msg_timestamp = 10;
  if (this->msg_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->msg_timestamp(), target);
  }

  // repeated .telemetry.TelemetryField data_gpbkv = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_gpbkv_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->data_gpbkv(static_cast<int>(i)), deterministic, target);
  }

  // .telemetry.TelemetryGPBTable data_gpb = 12;
  if (this->has_data_gpb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->data_gpb_, deterministic, target);
  }

  // uint64 collection_end_time = 13;
  if (this->collection_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->collection_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Telemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry.TelemetryField data_gpbkv = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->data_gpbkv_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_gpbkv(static_cast<int>(i)));
    }
  }

  // string encoding_path = 6;
  if (this->encoding_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encoding_path());
  }

  // .telemetry.TelemetryGPBTable data_gpb = 12;
  if (this->has_data_gpb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_gpb_);
  }

  // uint64 collection_id = 8;
  if (this->collection_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collection_id());
  }

  // uint64 collection_start_time = 9;
  if (this->collection_start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collection_start_time());
  }

  // uint64 msg_timestamp = 10;
  if (this->msg_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_timestamp());
  }

  // uint64 collection_end_time = 13;
  if (this->collection_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collection_end_time());
  }

  switch (node_id_case()) {
    // string node_id_str = 1;
    case kNodeIdStr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id_str());
      break;
    }
    case NODE_ID_NOT_SET: {
      break;
    }
  }
  switch (subscription_case()) {
    // string subscription_id_str = 3;
    case kSubscriptionIdStr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subscription_id_str());
      break;
    }
    case SUBSCRIPTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Telemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.Telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_gpbkv_.MergeFrom(from.data_gpbkv_);
  if (from.encoding_path().size() > 0) {

    encoding_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_path_);
  }
  if (from.has_data_gpb()) {
    mutable_data_gpb()->::telemetry::TelemetryGPBTable::MergeFrom(from.data_gpb());
  }
  if (from.collection_id() != 0) {
    set_collection_id(from.collection_id());
  }
  if (from.collection_start_time() != 0) {
    set_collection_start_time(from.collection_start_time());
  }
  if (from.msg_timestamp() != 0) {
    set_msg_timestamp(from.msg_timestamp());
  }
  if (from.collection_end_time() != 0) {
    set_collection_end_time(from.collection_end_time());
  }
  switch (from.node_id_case()) {
    case kNodeIdStr: {
      set_node_id_str(from.node_id_str());
      break;
    }
    case NODE_ID_NOT_SET: {
      break;
    }
  }
  switch (from.subscription_case()) {
    case kSubscriptionIdStr: {
      set_subscription_id_str(from.subscription_id_str());
      break;
    }
    case SUBSCRIPTION_NOT_SET: {
      break;
    }
  }
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  data_gpbkv_.InternalSwap(&other->data_gpbkv_);
  encoding_path_.Swap(&other->encoding_path_);
  swap(data_gpb_, other->data_gpb_);
  swap(collection_id_, other->collection_id_);
  swap(collection_start_time_, other->collection_start_time_);
  swap(msg_timestamp_, other->msg_timestamp_);
  swap(collection_end_time_, other->collection_end_time_);
  swap(node_id_, other->node_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(subscription_, other->subscription_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetryField::InitAsDefaultInstance() {
  ::telemetry::_TelemetryField_default_instance_.bytes_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::telemetry::_TelemetryField_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::telemetry::_TelemetryField_default_instance_.bool_value_ = false;
  ::telemetry::_TelemetryField_default_instance_.uint32_value_ = 0u;
  ::telemetry::_TelemetryField_default_instance_.uint64_value_ = GOOGLE_ULONGLONG(0);
  ::telemetry::_TelemetryField_default_instance_.sint32_value_ = 0;
  ::telemetry::_TelemetryField_default_instance_.sint64_value_ = GOOGLE_LONGLONG(0);
  ::telemetry::_TelemetryField_default_instance_.double_value_ = 0;
  ::telemetry::_TelemetryField_default_instance_.float_value_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryField::kTimestampFieldNumber;
const int TelemetryField::kNameFieldNumber;
const int TelemetryField::kBytesValueFieldNumber;
const int TelemetryField::kStringValueFieldNumber;
const int TelemetryField::kBoolValueFieldNumber;
const int TelemetryField::kUint32ValueFieldNumber;
const int TelemetryField::kUint64ValueFieldNumber;
const int TelemetryField::kSint32ValueFieldNumber;
const int TelemetryField::kSint64ValueFieldNumber;
const int TelemetryField::kDoubleValueFieldNumber;
const int TelemetryField::kFloatValueFieldNumber;
const int TelemetryField::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryField::TelemetryField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_2eproto::InitDefaultsTelemetryField();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.TelemetryField)
}
TelemetryField::TelemetryField(const TelemetryField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  timestamp_ = from.timestamp_;
  clear_has_value_by_type();
  switch (from.value_by_type_case()) {
    case kBytesValue: {
      set_bytes_value(from.bytes_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kUint32Value: {
      set_uint32_value(from.uint32_value());
      break;
    }
    case kUint64Value: {
      set_uint64_value(from.uint64_value());
      break;
    }
    case kSint32Value: {
      set_sint32_value(from.sint32_value());
      break;
    }
    case kSint64Value: {
      set_sint64_value(from.sint64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case VALUE_BY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryField)
}

void TelemetryField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_value_by_type();
  _cached_size_ = 0;
}

TelemetryField::~TelemetryField() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryField)
  SharedDtor();
}

void TelemetryField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value_by_type()) {
    clear_value_by_type();
  }
}

void TelemetryField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryField::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryField& TelemetryField::default_instance() {
  ::protobuf_telemetry_2eproto::InitDefaultsTelemetryField();
  return *internal_default_instance();
}

TelemetryField* TelemetryField::New(::google::protobuf::Arena* arena) const {
  TelemetryField* n = new TelemetryField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryField::clear_value_by_type() {
// @@protoc_insertion_point(one_of_clear_start:telemetry.TelemetryField)
  switch (value_by_type_case()) {
    case kBytesValue: {
      value_by_type_.bytes_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStringValue: {
      value_by_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUint32Value: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kSint32Value: {
      // No need to clear
      break;
    }
    case kSint64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case VALUE_BY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_BY_TYPE_NOT_SET;
}


void TelemetryField::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_value_by_type();
  _internal_metadata_.Clear();
}

bool TelemetryField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.TelemetryField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "telemetry.TelemetryField.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bytes_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "telemetry.TelemetryField.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_by_type_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uint32_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_by_type_.uint32_value_)));
          set_has_uint32_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uint64_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_by_type_.uint64_value_)));
          set_has_uint64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 sint32_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value_by_type_.sint32_value_)));
          set_has_sint32_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 sint64_value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_by_type_.sint64_value_)));
          set_has_sint64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_by_type_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_value = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          clear_value_by_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_by_type_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .telemetry.TelemetryField fields = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.TelemetryField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.TelemetryField)
  return false;
#undef DO_
}

void TelemetryField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.TelemetryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetryField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bytes bytes_value = 4;
  if (has_bytes_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bytes_value(), output);
  }

  // string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetryField.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  // bool bool_value = 6;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bool_value(), output);
  }

  // uint32 uint32_value = 7;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uint32_value(), output);
  }

  // uint64 uint64_value = 8;
  if (has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->uint64_value(), output);
  }

  // sint32 sint32_value = 9;
  if (has_sint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->sint32_value(), output);
  }

  // sint64 sint64_value = 10;
  if (has_sint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->sint64_value(), output);
  }

  // double double_value = 11;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->double_value(), output);
  }

  // float float_value = 12;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->float_value(), output);
  }

  // repeated .telemetry.TelemetryField fields = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fields(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.TelemetryField)
}

::google::protobuf::uint8* TelemetryField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetryField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bytes bytes_value = 4;
  if (has_bytes_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bytes_value(), target);
  }

  // string string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetryField.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  // bool bool_value = 6;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bool_value(), target);
  }

  // uint32 uint32_value = 7;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uint32_value(), target);
  }

  // uint64 uint64_value = 8;
  if (has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->uint64_value(), target);
  }

  // sint32 sint32_value = 9;
  if (has_sint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->sint32_value(), target);
  }

  // sint64 sint64_value = 10;
  if (has_sint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->sint64_value(), target);
  }

  // double double_value = 11;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->double_value(), target);
  }

  // float float_value = 12;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->float_value(), target);
  }

  // repeated .telemetry.TelemetryField fields = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->fields(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryField)
  return target;
}

size_t TelemetryField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry.TelemetryField fields = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  switch (value_by_type_case()) {
    // bytes bytes_value = 4;
    case kBytesValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_value());
      break;
    }
    // string string_value = 5;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // bool bool_value = 6;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // uint32 uint32_value = 7;
    case kUint32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
      break;
    }
    // uint64 uint64_value = 8;
    case kUint64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_value());
      break;
    }
    // sint32 sint32_value = 9;
    case kSint32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32_value());
      break;
    }
    // sint64 sint64_value = 10;
    case kSint64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64_value());
      break;
    }
    // double double_value = 11;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // float float_value = 12;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_BY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.TelemetryField)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.TelemetryField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.TelemetryField)
    MergeFrom(*source);
  }
}

void TelemetryField::MergeFrom(const TelemetryField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.value_by_type_case()) {
    case kBytesValue: {
      set_bytes_value(from.bytes_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kUint32Value: {
      set_uint32_value(from.uint32_value());
      break;
    }
    case kUint64Value: {
      set_uint64_value(from.uint64_value());
      break;
    }
    case kSint32Value: {
      set_sint32_value(from.sint32_value());
      break;
    }
    case kSint64Value: {
      set_sint64_value(from.sint64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case VALUE_BY_TYPE_NOT_SET: {
      break;
    }
  }
}

void TelemetryField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.TelemetryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryField::CopyFrom(const TelemetryField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryField::IsInitialized() const {
  return true;
}

void TelemetryField::Swap(TelemetryField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryField::InternalSwap(TelemetryField* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  name_.Swap(&other->name_);
  swap(timestamp_, other->timestamp_);
  swap(value_by_type_, other->value_by_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryField::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetryGPBTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryGPBTable::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryGPBTable::TelemetryGPBTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_2eproto::InitDefaultsTelemetryGPBTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.TelemetryGPBTable)
}
TelemetryGPBTable::TelemetryGPBTable(const TelemetryGPBTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      row_(from.row_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryGPBTable)
}

void TelemetryGPBTable::SharedCtor() {
  _cached_size_ = 0;
}

TelemetryGPBTable::~TelemetryGPBTable() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryGPBTable)
  SharedDtor();
}

void TelemetryGPBTable::SharedDtor() {
}

void TelemetryGPBTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryGPBTable::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryGPBTable& TelemetryGPBTable::default_instance() {
  ::protobuf_telemetry_2eproto::InitDefaultsTelemetryGPBTable();
  return *internal_default_instance();
}

TelemetryGPBTable* TelemetryGPBTable::New(::google::protobuf::Arena* arena) const {
  TelemetryGPBTable* n = new TelemetryGPBTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryGPBTable::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryGPBTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetryGPBTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.TelemetryGPBTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .telemetry.TelemetryRowGPB row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.TelemetryGPBTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.TelemetryGPBTable)
  return false;
#undef DO_
}

void TelemetryGPBTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.TelemetryGPBTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryRowGPB row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->row(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.TelemetryGPBTable)
}

::google::protobuf::uint8* TelemetryGPBTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryGPBTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryRowGPB row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->row(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryGPBTable)
  return target;
}

size_t TelemetryGPBTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryGPBTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry.TelemetryRowGPB row = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->row_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->row(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryGPBTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.TelemetryGPBTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryGPBTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryGPBTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.TelemetryGPBTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.TelemetryGPBTable)
    MergeFrom(*source);
  }
}

void TelemetryGPBTable::MergeFrom(const TelemetryGPBTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryGPBTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
}

void TelemetryGPBTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.TelemetryGPBTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryGPBTable::CopyFrom(const TelemetryGPBTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryGPBTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryGPBTable::IsInitialized() const {
  return true;
}

void TelemetryGPBTable::Swap(TelemetryGPBTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryGPBTable::InternalSwap(TelemetryGPBTable* other) {
  using std::swap;
  row_.InternalSwap(&other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryGPBTable::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetryRowGPB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryRowGPB::kTimestampFieldNumber;
const int TelemetryRowGPB::kKeysFieldNumber;
const int TelemetryRowGPB::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryRowGPB::TelemetryRowGPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_2eproto::InitDefaultsTelemetryRowGPB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.TelemetryRowGPB)
}
TelemetryRowGPB::TelemetryRowGPB(const TelemetryRowGPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.keys().size() > 0) {
    keys_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keys_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryRowGPB)
}

void TelemetryRowGPB::SharedCtor() {
  keys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TelemetryRowGPB::~TelemetryRowGPB() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryRowGPB)
  SharedDtor();
}

void TelemetryRowGPB::SharedDtor() {
  keys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TelemetryRowGPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryRowGPB::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryRowGPB& TelemetryRowGPB::default_instance() {
  ::protobuf_telemetry_2eproto::InitDefaultsTelemetryRowGPB();
  return *internal_default_instance();
}

TelemetryRowGPB* TelemetryRowGPB::New(::google::protobuf::Arena* arena) const {
  TelemetryRowGPB* n = new TelemetryRowGPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryRowGPB::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryRowGPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TelemetryRowGPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.TelemetryRowGPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes keys = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.TelemetryRowGPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.TelemetryRowGPB)
  return false;
#undef DO_
}

void TelemetryRowGPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.TelemetryRowGPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // bytes keys = 10;
  if (this->keys().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->keys(), output);
  }

  // bytes content = 11;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.TelemetryRowGPB)
}

::google::protobuf::uint8* TelemetryRowGPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryRowGPB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // bytes keys = 10;
  if (this->keys().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->keys(), target);
  }

  // bytes content = 11;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryRowGPB)
  return target;
}

size_t TelemetryRowGPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryRowGPB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes keys = 10;
  if (this->keys().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keys());
  }

  // bytes content = 11;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryRowGPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.TelemetryRowGPB)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryRowGPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryRowGPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.TelemetryRowGPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.TelemetryRowGPB)
    MergeFrom(*source);
  }
}

void TelemetryRowGPB::MergeFrom(const TelemetryRowGPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryRowGPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keys().size() > 0) {

    keys_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keys_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TelemetryRowGPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.TelemetryRowGPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryRowGPB::CopyFrom(const TelemetryRowGPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryRowGPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryRowGPB::IsInitialized() const {
  return true;
}

void TelemetryRowGPB::Swap(TelemetryRowGPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryRowGPB::InternalSwap(TelemetryRowGPB* other) {
  using std::swap;
  keys_.Swap(&other->keys_);
  content_.Swap(&other->content_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryRowGPB::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry

// @@protoc_insertion_point(global_scope)
