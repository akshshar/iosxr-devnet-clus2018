// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#ifndef PROTOBUF_telemetry_2eproto__INCLUDED
#define PROTOBUF_telemetry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_telemetry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTelemetryImpl();
void InitDefaultsTelemetry();
void InitDefaultsTelemetryFieldImpl();
void InitDefaultsTelemetryField();
void InitDefaultsTelemetryGPBTableImpl();
void InitDefaultsTelemetryGPBTable();
void InitDefaultsTelemetryRowGPBImpl();
void InitDefaultsTelemetryRowGPB();
inline void InitDefaults() {
  InitDefaultsTelemetry();
  InitDefaultsTelemetryField();
  InitDefaultsTelemetryGPBTable();
  InitDefaultsTelemetryRowGPB();
}
}  // namespace protobuf_telemetry_2eproto
namespace telemetry {
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class TelemetryField;
class TelemetryFieldDefaultTypeInternal;
extern TelemetryFieldDefaultTypeInternal _TelemetryField_default_instance_;
class TelemetryGPBTable;
class TelemetryGPBTableDefaultTypeInternal;
extern TelemetryGPBTableDefaultTypeInternal _TelemetryGPBTable_default_instance_;
class TelemetryRowGPB;
class TelemetryRowGPBDefaultTypeInternal;
extern TelemetryRowGPBDefaultTypeInternal _TelemetryRowGPB_default_instance_;
}  // namespace telemetry
namespace telemetry {

// ===================================================================

class Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:telemetry.Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  enum NodeIdCase {
    kNodeIdStr = 1,
    NODE_ID_NOT_SET = 0,
  };

  enum SubscriptionCase {
    kSubscriptionIdStr = 3,
    SUBSCRIPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Telemetry* other);
  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const PROTOBUF_FINAL { return New(NULL); }

  Telemetry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .telemetry.TelemetryField data_gpbkv = 11;
  int data_gpbkv_size() const;
  void clear_data_gpbkv();
  static const int kDataGpbkvFieldNumber = 11;
  const ::telemetry::TelemetryField& data_gpbkv(int index) const;
  ::telemetry::TelemetryField* mutable_data_gpbkv(int index);
  ::telemetry::TelemetryField* add_data_gpbkv();
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >*
      mutable_data_gpbkv();
  const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >&
      data_gpbkv() const;

  // string encoding_path = 6;
  void clear_encoding_path();
  static const int kEncodingPathFieldNumber = 6;
  const ::std::string& encoding_path() const;
  void set_encoding_path(const ::std::string& value);
  #if LANG_CXX11
  void set_encoding_path(::std::string&& value);
  #endif
  void set_encoding_path(const char* value);
  void set_encoding_path(const char* value, size_t size);
  ::std::string* mutable_encoding_path();
  ::std::string* release_encoding_path();
  void set_allocated_encoding_path(::std::string* encoding_path);

  // .telemetry.TelemetryGPBTable data_gpb = 12;
  bool has_data_gpb() const;
  void clear_data_gpb();
  static const int kDataGpbFieldNumber = 12;
  const ::telemetry::TelemetryGPBTable& data_gpb() const;
  ::telemetry::TelemetryGPBTable* release_data_gpb();
  ::telemetry::TelemetryGPBTable* mutable_data_gpb();
  void set_allocated_data_gpb(::telemetry::TelemetryGPBTable* data_gpb);

  // uint64 collection_id = 8;
  void clear_collection_id();
  static const int kCollectionIdFieldNumber = 8;
  ::google::protobuf::uint64 collection_id() const;
  void set_collection_id(::google::protobuf::uint64 value);

  // uint64 collection_start_time = 9;
  void clear_collection_start_time();
  static const int kCollectionStartTimeFieldNumber = 9;
  ::google::protobuf::uint64 collection_start_time() const;
  void set_collection_start_time(::google::protobuf::uint64 value);

  // uint64 msg_timestamp = 10;
  void clear_msg_timestamp();
  static const int kMsgTimestampFieldNumber = 10;
  ::google::protobuf::uint64 msg_timestamp() const;
  void set_msg_timestamp(::google::protobuf::uint64 value);

  // uint64 collection_end_time = 13;
  void clear_collection_end_time();
  static const int kCollectionEndTimeFieldNumber = 13;
  ::google::protobuf::uint64 collection_end_time() const;
  void set_collection_end_time(::google::protobuf::uint64 value);

  // string node_id_str = 1;
  private:
  bool has_node_id_str() const;
  public:
  void clear_node_id_str();
  static const int kNodeIdStrFieldNumber = 1;
  const ::std::string& node_id_str() const;
  void set_node_id_str(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id_str(::std::string&& value);
  #endif
  void set_node_id_str(const char* value);
  void set_node_id_str(const char* value, size_t size);
  ::std::string* mutable_node_id_str();
  ::std::string* release_node_id_str();
  void set_allocated_node_id_str(::std::string* node_id_str);

  // string subscription_id_str = 3;
  private:
  bool has_subscription_id_str() const;
  public:
  void clear_subscription_id_str();
  static const int kSubscriptionIdStrFieldNumber = 3;
  const ::std::string& subscription_id_str() const;
  void set_subscription_id_str(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription_id_str(::std::string&& value);
  #endif
  void set_subscription_id_str(const char* value);
  void set_subscription_id_str(const char* value, size_t size);
  ::std::string* mutable_subscription_id_str();
  ::std::string* release_subscription_id_str();
  void set_allocated_subscription_id_str(::std::string* subscription_id_str);

  NodeIdCase node_id_case() const;
  SubscriptionCase subscription_case() const;
  // @@protoc_insertion_point(class_scope:telemetry.Telemetry)
 private:
  void set_has_node_id_str();
  void set_has_subscription_id_str();

  inline bool has_node_id() const;
  void clear_node_id();
  inline void clear_has_node_id();

  inline bool has_subscription() const;
  void clear_subscription();
  inline void clear_has_subscription();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField > data_gpbkv_;
  ::google::protobuf::internal::ArenaStringPtr encoding_path_;
  ::telemetry::TelemetryGPBTable* data_gpb_;
  ::google::protobuf::uint64 collection_id_;
  ::google::protobuf::uint64 collection_start_time_;
  ::google::protobuf::uint64 msg_timestamp_;
  ::google::protobuf::uint64 collection_end_time_;
  union NodeIdUnion {
    NodeIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr node_id_str_;
  } node_id_;
  union SubscriptionUnion {
    SubscriptionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr subscription_id_str_;
  } subscription_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_telemetry_2eproto::TableStruct;
  friend void ::protobuf_telemetry_2eproto::InitDefaultsTelemetryImpl();
};
// -------------------------------------------------------------------

class TelemetryField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:telemetry.TelemetryField) */ {
 public:
  TelemetryField();
  virtual ~TelemetryField();

  TelemetryField(const TelemetryField& from);

  inline TelemetryField& operator=(const TelemetryField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryField(TelemetryField&& from) noexcept
    : TelemetryField() {
    *this = ::std::move(from);
  }

  inline TelemetryField& operator=(TelemetryField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryField& default_instance();

  enum ValueByTypeCase {
    kBytesValue = 4,
    kStringValue = 5,
    kBoolValue = 6,
    kUint32Value = 7,
    kUint64Value = 8,
    kSint32Value = 9,
    kSint64Value = 10,
    kDoubleValue = 11,
    kFloatValue = 12,
    VALUE_BY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryField* internal_default_instance() {
    return reinterpret_cast<const TelemetryField*>(
               &_TelemetryField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TelemetryField* other);
  friend void swap(TelemetryField& a, TelemetryField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryField* New() const PROTOBUF_FINAL { return New(NULL); }

  TelemetryField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TelemetryField& from);
  void MergeFrom(const TelemetryField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TelemetryField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .telemetry.TelemetryField fields = 15;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 15;
  const ::telemetry::TelemetryField& fields(int index) const;
  ::telemetry::TelemetryField* mutable_fields(int index);
  ::telemetry::TelemetryField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >&
      fields() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // bytes bytes_value = 4;
  private:
  bool has_bytes_value() const;
  public:
  void clear_bytes_value();
  static const int kBytesValueFieldNumber = 4;
  const ::std::string& bytes_value() const;
  void set_bytes_value(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_value(::std::string&& value);
  #endif
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  ::std::string* mutable_bytes_value();
  ::std::string* release_bytes_value();
  void set_allocated_bytes_value(::std::string* bytes_value);

  // string string_value = 5;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // bool bool_value = 6;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 6;
  bool bool_value() const;
  void set_bool_value(bool value);

  // uint32 uint32_value = 7;
  private:
  bool has_uint32_value() const;
  public:
  void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 7;
  ::google::protobuf::uint32 uint32_value() const;
  void set_uint32_value(::google::protobuf::uint32 value);

  // uint64 uint64_value = 8;
  private:
  bool has_uint64_value() const;
  public:
  void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 8;
  ::google::protobuf::uint64 uint64_value() const;
  void set_uint64_value(::google::protobuf::uint64 value);

  // sint32 sint32_value = 9;
  private:
  bool has_sint32_value() const;
  public:
  void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 9;
  ::google::protobuf::int32 sint32_value() const;
  void set_sint32_value(::google::protobuf::int32 value);

  // sint64 sint64_value = 10;
  private:
  bool has_sint64_value() const;
  public:
  void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 10;
  ::google::protobuf::int64 sint64_value() const;
  void set_sint64_value(::google::protobuf::int64 value);

  // double double_value = 11;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 11;
  double double_value() const;
  void set_double_value(double value);

  // float float_value = 12;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  static const int kFloatValueFieldNumber = 12;
  float float_value() const;
  void set_float_value(float value);

  ValueByTypeCase value_by_type_case() const;
  // @@protoc_insertion_point(class_scope:telemetry.TelemetryField)
 private:
  void set_has_bytes_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_double_value();
  void set_has_float_value();

  inline bool has_value_by_type() const;
  void clear_value_by_type();
  inline void clear_has_value_by_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField > fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 timestamp_;
  union ValueByTypeUnion {
    ValueByTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr bytes_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::google::protobuf::uint32 uint32_value_;
    ::google::protobuf::uint64 uint64_value_;
    ::google::protobuf::int32 sint32_value_;
    ::google::protobuf::int64 sint64_value_;
    double double_value_;
    float float_value_;
  } value_by_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_telemetry_2eproto::TableStruct;
  friend void ::protobuf_telemetry_2eproto::InitDefaultsTelemetryFieldImpl();
};
// -------------------------------------------------------------------

class TelemetryGPBTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:telemetry.TelemetryGPBTable) */ {
 public:
  TelemetryGPBTable();
  virtual ~TelemetryGPBTable();

  TelemetryGPBTable(const TelemetryGPBTable& from);

  inline TelemetryGPBTable& operator=(const TelemetryGPBTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryGPBTable(TelemetryGPBTable&& from) noexcept
    : TelemetryGPBTable() {
    *this = ::std::move(from);
  }

  inline TelemetryGPBTable& operator=(TelemetryGPBTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryGPBTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryGPBTable* internal_default_instance() {
    return reinterpret_cast<const TelemetryGPBTable*>(
               &_TelemetryGPBTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TelemetryGPBTable* other);
  friend void swap(TelemetryGPBTable& a, TelemetryGPBTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryGPBTable* New() const PROTOBUF_FINAL { return New(NULL); }

  TelemetryGPBTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TelemetryGPBTable& from);
  void MergeFrom(const TelemetryGPBTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TelemetryGPBTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .telemetry.TelemetryRowGPB row = 1;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::telemetry::TelemetryRowGPB& row(int index) const;
  ::telemetry::TelemetryRowGPB* mutable_row(int index);
  ::telemetry::TelemetryRowGPB* add_row();
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryRowGPB >*
      mutable_row();
  const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryRowGPB >&
      row() const;

  // @@protoc_insertion_point(class_scope:telemetry.TelemetryGPBTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryRowGPB > row_;
  mutable int _cached_size_;
  friend struct ::protobuf_telemetry_2eproto::TableStruct;
  friend void ::protobuf_telemetry_2eproto::InitDefaultsTelemetryGPBTableImpl();
};
// -------------------------------------------------------------------

class TelemetryRowGPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:telemetry.TelemetryRowGPB) */ {
 public:
  TelemetryRowGPB();
  virtual ~TelemetryRowGPB();

  TelemetryRowGPB(const TelemetryRowGPB& from);

  inline TelemetryRowGPB& operator=(const TelemetryRowGPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryRowGPB(TelemetryRowGPB&& from) noexcept
    : TelemetryRowGPB() {
    *this = ::std::move(from);
  }

  inline TelemetryRowGPB& operator=(TelemetryRowGPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryRowGPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryRowGPB* internal_default_instance() {
    return reinterpret_cast<const TelemetryRowGPB*>(
               &_TelemetryRowGPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TelemetryRowGPB* other);
  friend void swap(TelemetryRowGPB& a, TelemetryRowGPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryRowGPB* New() const PROTOBUF_FINAL { return New(NULL); }

  TelemetryRowGPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TelemetryRowGPB& from);
  void MergeFrom(const TelemetryRowGPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TelemetryRowGPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes keys = 10;
  void clear_keys();
  static const int kKeysFieldNumber = 10;
  const ::std::string& keys() const;
  void set_keys(const ::std::string& value);
  #if LANG_CXX11
  void set_keys(::std::string&& value);
  #endif
  void set_keys(const char* value);
  void set_keys(const void* value, size_t size);
  ::std::string* mutable_keys();
  ::std::string* release_keys();
  void set_allocated_keys(::std::string* keys);

  // bytes content = 11;
  void clear_content();
  static const int kContentFieldNumber = 11;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:telemetry.TelemetryRowGPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr keys_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_telemetry_2eproto::TableStruct;
  friend void ::protobuf_telemetry_2eproto::InitDefaultsTelemetryRowGPBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Telemetry

// string node_id_str = 1;
inline bool Telemetry::has_node_id_str() const {
  return node_id_case() == kNodeIdStr;
}
inline void Telemetry::set_has_node_id_str() {
  _oneof_case_[0] = kNodeIdStr;
}
inline void Telemetry::clear_node_id_str() {
  if (has_node_id_str()) {
    node_id_.node_id_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_node_id();
  }
}
inline const ::std::string& Telemetry::node_id_str() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.node_id_str)
  if (has_node_id_str()) {
    return node_id_.node_id_str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Telemetry::set_node_id_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.node_id_str)
  if (!has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.node_id_str)
}
#if LANG_CXX11
inline void Telemetry::set_node_id_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.node_id_str)
  if (!has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.Telemetry.node_id_str)
}
#endif
inline void Telemetry::set_node_id_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.Telemetry.node_id_str)
}
inline void Telemetry::set_node_id_str(const char* value, size_t size) {
  if (!has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.Telemetry.node_id_str)
}
inline ::std::string* Telemetry::mutable_node_id_str() {
  if (!has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:telemetry.Telemetry.node_id_str)
  return node_id_.node_id_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Telemetry::release_node_id_str() {
  // @@protoc_insertion_point(field_release:telemetry.Telemetry.node_id_str)
  if (has_node_id_str()) {
    clear_has_node_id();
    return node_id_.node_id_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Telemetry::set_allocated_node_id_str(::std::string* node_id_str) {
  if (!has_node_id_str()) {
    node_id_.node_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_node_id();
  if (node_id_str != NULL) {
    set_has_node_id_str();
    node_id_.node_id_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        node_id_str);
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.Telemetry.node_id_str)
}

// string subscription_id_str = 3;
inline bool Telemetry::has_subscription_id_str() const {
  return subscription_case() == kSubscriptionIdStr;
}
inline void Telemetry::set_has_subscription_id_str() {
  _oneof_case_[1] = kSubscriptionIdStr;
}
inline void Telemetry::clear_subscription_id_str() {
  if (has_subscription_id_str()) {
    subscription_.subscription_id_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_subscription();
  }
}
inline const ::std::string& Telemetry::subscription_id_str() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.subscription_id_str)
  if (has_subscription_id_str()) {
    return subscription_.subscription_id_str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Telemetry::set_subscription_id_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.subscription_id_str)
  if (!has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.subscription_id_str)
}
#if LANG_CXX11
inline void Telemetry::set_subscription_id_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.subscription_id_str)
  if (!has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.Telemetry.subscription_id_str)
}
#endif
inline void Telemetry::set_subscription_id_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.Telemetry.subscription_id_str)
}
inline void Telemetry::set_subscription_id_str(const char* value, size_t size) {
  if (!has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.Telemetry.subscription_id_str)
}
inline ::std::string* Telemetry::mutable_subscription_id_str() {
  if (!has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:telemetry.Telemetry.subscription_id_str)
  return subscription_.subscription_id_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Telemetry::release_subscription_id_str() {
  // @@protoc_insertion_point(field_release:telemetry.Telemetry.subscription_id_str)
  if (has_subscription_id_str()) {
    clear_has_subscription();
    return subscription_.subscription_id_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Telemetry::set_allocated_subscription_id_str(::std::string* subscription_id_str) {
  if (!has_subscription_id_str()) {
    subscription_.subscription_id_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_subscription();
  if (subscription_id_str != NULL) {
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        subscription_id_str);
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.Telemetry.subscription_id_str)
}

// string encoding_path = 6;
inline void Telemetry::clear_encoding_path() {
  encoding_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Telemetry::encoding_path() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.encoding_path)
  return encoding_path_.GetNoArena();
}
inline void Telemetry::set_encoding_path(const ::std::string& value) {
  
  encoding_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.encoding_path)
}
#if LANG_CXX11
inline void Telemetry::set_encoding_path(::std::string&& value) {
  
  encoding_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.Telemetry.encoding_path)
}
#endif
inline void Telemetry::set_encoding_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encoding_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.Telemetry.encoding_path)
}
inline void Telemetry::set_encoding_path(const char* value, size_t size) {
  
  encoding_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.Telemetry.encoding_path)
}
inline ::std::string* Telemetry::mutable_encoding_path() {
  
  // @@protoc_insertion_point(field_mutable:telemetry.Telemetry.encoding_path)
  return encoding_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Telemetry::release_encoding_path() {
  // @@protoc_insertion_point(field_release:telemetry.Telemetry.encoding_path)
  
  return encoding_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Telemetry::set_allocated_encoding_path(::std::string* encoding_path) {
  if (encoding_path != NULL) {
    
  } else {
    
  }
  encoding_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding_path);
  // @@protoc_insertion_point(field_set_allocated:telemetry.Telemetry.encoding_path)
}

// uint64 collection_id = 8;
inline void Telemetry::clear_collection_id() {
  collection_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Telemetry::collection_id() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.collection_id)
  return collection_id_;
}
inline void Telemetry::set_collection_id(::google::protobuf::uint64 value) {
  
  collection_id_ = value;
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.collection_id)
}

// uint64 collection_start_time = 9;
inline void Telemetry::clear_collection_start_time() {
  collection_start_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Telemetry::collection_start_time() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.collection_start_time)
  return collection_start_time_;
}
inline void Telemetry::set_collection_start_time(::google::protobuf::uint64 value) {
  
  collection_start_time_ = value;
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.collection_start_time)
}

// uint64 msg_timestamp = 10;
inline void Telemetry::clear_msg_timestamp() {
  msg_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Telemetry::msg_timestamp() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.msg_timestamp)
  return msg_timestamp_;
}
inline void Telemetry::set_msg_timestamp(::google::protobuf::uint64 value) {
  
  msg_timestamp_ = value;
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.msg_timestamp)
}

// repeated .telemetry.TelemetryField data_gpbkv = 11;
inline int Telemetry::data_gpbkv_size() const {
  return data_gpbkv_.size();
}
inline void Telemetry::clear_data_gpbkv() {
  data_gpbkv_.Clear();
}
inline const ::telemetry::TelemetryField& Telemetry::data_gpbkv(int index) const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_.Get(index);
}
inline ::telemetry::TelemetryField* Telemetry::mutable_data_gpbkv(int index) {
  // @@protoc_insertion_point(field_mutable:telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_.Mutable(index);
}
inline ::telemetry::TelemetryField* Telemetry::add_data_gpbkv() {
  // @@protoc_insertion_point(field_add:telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >*
Telemetry::mutable_data_gpbkv() {
  // @@protoc_insertion_point(field_mutable_list:telemetry.Telemetry.data_gpbkv)
  return &data_gpbkv_;
}
inline const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >&
Telemetry::data_gpbkv() const {
  // @@protoc_insertion_point(field_list:telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_;
}

// .telemetry.TelemetryGPBTable data_gpb = 12;
inline bool Telemetry::has_data_gpb() const {
  return this != internal_default_instance() && data_gpb_ != NULL;
}
inline void Telemetry::clear_data_gpb() {
  if (GetArenaNoVirtual() == NULL && data_gpb_ != NULL) {
    delete data_gpb_;
  }
  data_gpb_ = NULL;
}
inline const ::telemetry::TelemetryGPBTable& Telemetry::data_gpb() const {
  const ::telemetry::TelemetryGPBTable* p = data_gpb_;
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.data_gpb)
  return p != NULL ? *p : *reinterpret_cast<const ::telemetry::TelemetryGPBTable*>(
      &::telemetry::_TelemetryGPBTable_default_instance_);
}
inline ::telemetry::TelemetryGPBTable* Telemetry::release_data_gpb() {
  // @@protoc_insertion_point(field_release:telemetry.Telemetry.data_gpb)
  
  ::telemetry::TelemetryGPBTable* temp = data_gpb_;
  data_gpb_ = NULL;
  return temp;
}
inline ::telemetry::TelemetryGPBTable* Telemetry::mutable_data_gpb() {
  
  if (data_gpb_ == NULL) {
    data_gpb_ = new ::telemetry::TelemetryGPBTable;
  }
  // @@protoc_insertion_point(field_mutable:telemetry.Telemetry.data_gpb)
  return data_gpb_;
}
inline void Telemetry::set_allocated_data_gpb(::telemetry::TelemetryGPBTable* data_gpb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_gpb_;
  }
  if (data_gpb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_gpb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_gpb, submessage_arena);
    }
    
  } else {
    
  }
  data_gpb_ = data_gpb;
  // @@protoc_insertion_point(field_set_allocated:telemetry.Telemetry.data_gpb)
}

// uint64 collection_end_time = 13;
inline void Telemetry::clear_collection_end_time() {
  collection_end_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Telemetry::collection_end_time() const {
  // @@protoc_insertion_point(field_get:telemetry.Telemetry.collection_end_time)
  return collection_end_time_;
}
inline void Telemetry::set_collection_end_time(::google::protobuf::uint64 value) {
  
  collection_end_time_ = value;
  // @@protoc_insertion_point(field_set:telemetry.Telemetry.collection_end_time)
}

inline bool Telemetry::has_node_id() const {
  return node_id_case() != NODE_ID_NOT_SET;
}
inline void Telemetry::clear_has_node_id() {
  _oneof_case_[0] = NODE_ID_NOT_SET;
}
inline bool Telemetry::has_subscription() const {
  return subscription_case() != SUBSCRIPTION_NOT_SET;
}
inline void Telemetry::clear_has_subscription() {
  _oneof_case_[1] = SUBSCRIPTION_NOT_SET;
}
inline Telemetry::NodeIdCase Telemetry::node_id_case() const {
  return Telemetry::NodeIdCase(_oneof_case_[0]);
}
inline Telemetry::SubscriptionCase Telemetry::subscription_case() const {
  return Telemetry::SubscriptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TelemetryField

// uint64 timestamp = 1;
inline void TelemetryField::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TelemetryField::timestamp() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.timestamp)
  return timestamp_;
}
inline void TelemetryField::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.timestamp)
}

// string name = 2;
inline void TelemetryField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryField::name() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.name)
  return name_.GetNoArena();
}
inline void TelemetryField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.name)
}
#if LANG_CXX11
inline void TelemetryField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.TelemetryField.name)
}
#endif
inline void TelemetryField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.TelemetryField.name)
}
inline void TelemetryField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.TelemetryField.name)
}
inline ::std::string* TelemetryField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryField::release_name() {
  // @@protoc_insertion_point(field_release:telemetry.TelemetryField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:telemetry.TelemetryField.name)
}

// bytes bytes_value = 4;
inline bool TelemetryField::has_bytes_value() const {
  return value_by_type_case() == kBytesValue;
}
inline void TelemetryField::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void TelemetryField::clear_bytes_value() {
  if (has_bytes_value()) {
    value_by_type_.bytes_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value_by_type();
  }
}
inline const ::std::string& TelemetryField::bytes_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.bytes_value)
  if (has_bytes_value()) {
    return value_by_type_.bytes_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TelemetryField::set_bytes_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.bytes_value)
  if (!has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.bytes_value)
}
#if LANG_CXX11
inline void TelemetryField::set_bytes_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.bytes_value)
  if (!has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.TelemetryField.bytes_value)
}
#endif
inline void TelemetryField::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.TelemetryField.bytes_value)
}
inline void TelemetryField::set_bytes_value(const void* value, size_t size) {
  if (!has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.TelemetryField.bytes_value)
}
inline ::std::string* TelemetryField::mutable_bytes_value() {
  if (!has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryField.bytes_value)
  return value_by_type_.bytes_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryField::release_bytes_value() {
  // @@protoc_insertion_point(field_release:telemetry.TelemetryField.bytes_value)
  if (has_bytes_value()) {
    clear_has_value_by_type();
    return value_by_type_.bytes_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TelemetryField::set_allocated_bytes_value(::std::string* bytes_value) {
  if (!has_bytes_value()) {
    value_by_type_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_by_type();
  if (bytes_value != NULL) {
    set_has_bytes_value();
    value_by_type_.bytes_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bytes_value);
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.TelemetryField.bytes_value)
}

// string string_value = 5;
inline bool TelemetryField::has_string_value() const {
  return value_by_type_case() == kStringValue;
}
inline void TelemetryField::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void TelemetryField::clear_string_value() {
  if (has_string_value()) {
    value_by_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value_by_type();
  }
}
inline const ::std::string& TelemetryField::string_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.string_value)
  if (has_string_value()) {
    return value_by_type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TelemetryField::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.string_value)
  if (!has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.string_value)
}
#if LANG_CXX11
inline void TelemetryField::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.string_value)
  if (!has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.TelemetryField.string_value)
}
#endif
inline void TelemetryField::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.TelemetryField.string_value)
}
inline void TelemetryField::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.TelemetryField.string_value)
}
inline ::std::string* TelemetryField::mutable_string_value() {
  if (!has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryField.string_value)
  return value_by_type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryField::release_string_value() {
  // @@protoc_insertion_point(field_release:telemetry.TelemetryField.string_value)
  if (has_string_value()) {
    clear_has_value_by_type();
    return value_by_type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TelemetryField::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_by_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_by_type();
  if (string_value != NULL) {
    set_has_string_value();
    value_by_type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:telemetry.TelemetryField.string_value)
}

// bool bool_value = 6;
inline bool TelemetryField::has_bool_value() const {
  return value_by_type_case() == kBoolValue;
}
inline void TelemetryField::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void TelemetryField::clear_bool_value() {
  if (has_bool_value()) {
    value_by_type_.bool_value_ = false;
    clear_has_value_by_type();
  }
}
inline bool TelemetryField::bool_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.bool_value)
  if (has_bool_value()) {
    return value_by_type_.bool_value_;
  }
  return false;
}
inline void TelemetryField::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value_by_type();
    set_has_bool_value();
  }
  value_by_type_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.bool_value)
}

// uint32 uint32_value = 7;
inline bool TelemetryField::has_uint32_value() const {
  return value_by_type_case() == kUint32Value;
}
inline void TelemetryField::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void TelemetryField::clear_uint32_value() {
  if (has_uint32_value()) {
    value_by_type_.uint32_value_ = 0u;
    clear_has_value_by_type();
  }
}
inline ::google::protobuf::uint32 TelemetryField::uint32_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.uint32_value)
  if (has_uint32_value()) {
    return value_by_type_.uint32_value_;
  }
  return 0u;
}
inline void TelemetryField::set_uint32_value(::google::protobuf::uint32 value) {
  if (!has_uint32_value()) {
    clear_value_by_type();
    set_has_uint32_value();
  }
  value_by_type_.uint32_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.uint32_value)
}

// uint64 uint64_value = 8;
inline bool TelemetryField::has_uint64_value() const {
  return value_by_type_case() == kUint64Value;
}
inline void TelemetryField::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void TelemetryField::clear_uint64_value() {
  if (has_uint64_value()) {
    value_by_type_.uint64_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value_by_type();
  }
}
inline ::google::protobuf::uint64 TelemetryField::uint64_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.uint64_value)
  if (has_uint64_value()) {
    return value_by_type_.uint64_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void TelemetryField::set_uint64_value(::google::protobuf::uint64 value) {
  if (!has_uint64_value()) {
    clear_value_by_type();
    set_has_uint64_value();
  }
  value_by_type_.uint64_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.uint64_value)
}

// sint32 sint32_value = 9;
inline bool TelemetryField::has_sint32_value() const {
  return value_by_type_case() == kSint32Value;
}
inline void TelemetryField::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void TelemetryField::clear_sint32_value() {
  if (has_sint32_value()) {
    value_by_type_.sint32_value_ = 0;
    clear_has_value_by_type();
  }
}
inline ::google::protobuf::int32 TelemetryField::sint32_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.sint32_value)
  if (has_sint32_value()) {
    return value_by_type_.sint32_value_;
  }
  return 0;
}
inline void TelemetryField::set_sint32_value(::google::protobuf::int32 value) {
  if (!has_sint32_value()) {
    clear_value_by_type();
    set_has_sint32_value();
  }
  value_by_type_.sint32_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.sint32_value)
}

// sint64 sint64_value = 10;
inline bool TelemetryField::has_sint64_value() const {
  return value_by_type_case() == kSint64Value;
}
inline void TelemetryField::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void TelemetryField::clear_sint64_value() {
  if (has_sint64_value()) {
    value_by_type_.sint64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value_by_type();
  }
}
inline ::google::protobuf::int64 TelemetryField::sint64_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.sint64_value)
  if (has_sint64_value()) {
    return value_by_type_.sint64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TelemetryField::set_sint64_value(::google::protobuf::int64 value) {
  if (!has_sint64_value()) {
    clear_value_by_type();
    set_has_sint64_value();
  }
  value_by_type_.sint64_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.sint64_value)
}

// double double_value = 11;
inline bool TelemetryField::has_double_value() const {
  return value_by_type_case() == kDoubleValue;
}
inline void TelemetryField::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void TelemetryField::clear_double_value() {
  if (has_double_value()) {
    value_by_type_.double_value_ = 0;
    clear_has_value_by_type();
  }
}
inline double TelemetryField::double_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.double_value)
  if (has_double_value()) {
    return value_by_type_.double_value_;
  }
  return 0;
}
inline void TelemetryField::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value_by_type();
    set_has_double_value();
  }
  value_by_type_.double_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.double_value)
}

// float float_value = 12;
inline bool TelemetryField::has_float_value() const {
  return value_by_type_case() == kFloatValue;
}
inline void TelemetryField::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void TelemetryField::clear_float_value() {
  if (has_float_value()) {
    value_by_type_.float_value_ = 0;
    clear_has_value_by_type();
  }
}
inline float TelemetryField::float_value() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.float_value)
  if (has_float_value()) {
    return value_by_type_.float_value_;
  }
  return 0;
}
inline void TelemetryField::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value_by_type();
    set_has_float_value();
  }
  value_by_type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryField.float_value)
}

// repeated .telemetry.TelemetryField fields = 15;
inline int TelemetryField::fields_size() const {
  return fields_.size();
}
inline void TelemetryField::clear_fields() {
  fields_.Clear();
}
inline const ::telemetry::TelemetryField& TelemetryField::fields(int index) const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryField.fields)
  return fields_.Get(index);
}
inline ::telemetry::TelemetryField* TelemetryField::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryField.fields)
  return fields_.Mutable(index);
}
inline ::telemetry::TelemetryField* TelemetryField::add_fields() {
  // @@protoc_insertion_point(field_add:telemetry.TelemetryField.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >*
TelemetryField::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:telemetry.TelemetryField.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryField >&
TelemetryField::fields() const {
  // @@protoc_insertion_point(field_list:telemetry.TelemetryField.fields)
  return fields_;
}

inline bool TelemetryField::has_value_by_type() const {
  return value_by_type_case() != VALUE_BY_TYPE_NOT_SET;
}
inline void TelemetryField::clear_has_value_by_type() {
  _oneof_case_[0] = VALUE_BY_TYPE_NOT_SET;
}
inline TelemetryField::ValueByTypeCase TelemetryField::value_by_type_case() const {
  return TelemetryField::ValueByTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TelemetryGPBTable

// repeated .telemetry.TelemetryRowGPB row = 1;
inline int TelemetryGPBTable::row_size() const {
  return row_.size();
}
inline void TelemetryGPBTable::clear_row() {
  row_.Clear();
}
inline const ::telemetry::TelemetryRowGPB& TelemetryGPBTable::row(int index) const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryGPBTable.row)
  return row_.Get(index);
}
inline ::telemetry::TelemetryRowGPB* TelemetryGPBTable::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryGPBTable.row)
  return row_.Mutable(index);
}
inline ::telemetry::TelemetryRowGPB* TelemetryGPBTable::add_row() {
  // @@protoc_insertion_point(field_add:telemetry.TelemetryGPBTable.row)
  return row_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryRowGPB >*
TelemetryGPBTable::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:telemetry.TelemetryGPBTable.row)
  return &row_;
}
inline const ::google::protobuf::RepeatedPtrField< ::telemetry::TelemetryRowGPB >&
TelemetryGPBTable::row() const {
  // @@protoc_insertion_point(field_list:telemetry.TelemetryGPBTable.row)
  return row_;
}

// -------------------------------------------------------------------

// TelemetryRowGPB

// uint64 timestamp = 1;
inline void TelemetryRowGPB::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TelemetryRowGPB::timestamp() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryRowGPB.timestamp)
  return timestamp_;
}
inline void TelemetryRowGPB::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:telemetry.TelemetryRowGPB.timestamp)
}

// bytes keys = 10;
inline void TelemetryRowGPB::clear_keys() {
  keys_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryRowGPB::keys() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryRowGPB.keys)
  return keys_.GetNoArena();
}
inline void TelemetryRowGPB::set_keys(const ::std::string& value) {
  
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.TelemetryRowGPB.keys)
}
#if LANG_CXX11
inline void TelemetryRowGPB::set_keys(::std::string&& value) {
  
  keys_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.TelemetryRowGPB.keys)
}
#endif
inline void TelemetryRowGPB::set_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.TelemetryRowGPB.keys)
}
inline void TelemetryRowGPB::set_keys(const void* value, size_t size) {
  
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.TelemetryRowGPB.keys)
}
inline ::std::string* TelemetryRowGPB::mutable_keys() {
  
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryRowGPB.keys)
  return keys_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryRowGPB::release_keys() {
  // @@protoc_insertion_point(field_release:telemetry.TelemetryRowGPB.keys)
  
  return keys_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryRowGPB::set_allocated_keys(::std::string* keys) {
  if (keys != NULL) {
    
  } else {
    
  }
  keys_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keys);
  // @@protoc_insertion_point(field_set_allocated:telemetry.TelemetryRowGPB.keys)
}

// bytes content = 11;
inline void TelemetryRowGPB::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryRowGPB::content() const {
  // @@protoc_insertion_point(field_get:telemetry.TelemetryRowGPB.content)
  return content_.GetNoArena();
}
inline void TelemetryRowGPB::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.TelemetryRowGPB.content)
}
#if LANG_CXX11
inline void TelemetryRowGPB::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.TelemetryRowGPB.content)
}
#endif
inline void TelemetryRowGPB::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.TelemetryRowGPB.content)
}
inline void TelemetryRowGPB::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.TelemetryRowGPB.content)
}
inline ::std::string* TelemetryRowGPB::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:telemetry.TelemetryRowGPB.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryRowGPB::release_content() {
  // @@protoc_insertion_point(field_release:telemetry.TelemetryRowGPB.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryRowGPB::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:telemetry.TelemetryRowGPB.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace telemetry

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_telemetry_2eproto__INCLUDED
