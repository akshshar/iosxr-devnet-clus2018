// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/interfaces/interface/ipv6_nd_if_params.proto

#include "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/interfaces/interface/ipv6_nd_if_params.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace interfaces {
namespace interface {
class ipv6_nd_if_params_KEYSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_if_params_KEYS>
      _instance;
} _ipv6_nd_if_params_KEYS_default_instance_;
class ipv6_nd_if_paramsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_if_params>
      _instance;
} _ipv6_nd_if_params_default_instance_;
}  // namespace interface
}  // namespace interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto {
void InitDefaultsipv6_nd_if_params_KEYSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::_ipv6_nd_if_params_KEYS_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_if_params_KEYS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_if_params_KEYSImpl);
}

void InitDefaultsipv6_nd_if_paramsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::_ipv6_nd_if_params_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_if_params() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_if_paramsImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS, interface_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, is_dad_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, dad_attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, is_icm_pv6_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, is_dhcp_managed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, is_route_address_managed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, is_suppressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_retransmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_min_transmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_max_transmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_advertisement_lifetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_reachable_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, nd_cache_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, complete_protocol_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, complete_glean_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, incomplete_protocol_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, incomplete_glean_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, dropped_protocol_req_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params, dropped_glean_req_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params_KEYS)},
  { 7, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::ipv6_nd_if_params)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::_ipv6_nd_if_params_KEYS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::interfaces::interface::_ipv6_nd_if_params_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/interfaces/interface/ipv6_nd_if_params.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\necisco_ios_xr_ipv6_nd_oper/ipv6_node_di"
      "scovery/nodes/node/interfaces/interface/"
      "ipv6_nd_if_params.proto\022Mcisco_ios_xr_ip"
      "v6_nd_oper.ipv6_node_discovery.nodes.nod"
      "e.interfaces.interface\"C\n\026ipv6_nd_if_par"
      "ams_KEYS\022\021\n\tnode_name\030\001 \001(\t\022\026\n\016interface"
      "_name\030\002 \001(\t\"\261\004\n\021ipv6_nd_if_params\022\026\n\016is_"
      "dad_enabled\0302 \001(\010\022\024\n\014dad_attempts\0303 \001(\r\022"
      "\033\n\023is_icm_pv6_redirect\0304 \001(\010\022\027\n\017is_dhcp_"
      "managed\0305 \001(\010\022 \n\030is_route_address_manage"
      "d\0306 \001(\010\022\025\n\ris_suppressed\0307 \001(\010\022\036\n\026nd_ret"
      "ransmit_interval\0308 \001(\r\022 \n\030nd_min_transmi"
      "t_interval\0309 \001(\r\022 \n\030nd_max_transmit_inte"
      "rval\030: \001(\r\022!\n\031nd_advertisement_lifetime\030"
      "; \001(\r\022\031\n\021nd_reachable_time\030< \001(\r\022\026\n\016nd_c"
      "ache_limit\030= \001(\r\022\037\n\027complete_protocol_co"
      "unt\030> \001(\r\022\034\n\024complete_glean_count\030\? \001(\r\022"
      "!\n\031incomplete_protocol_count\030@ \001(\r\022\036\n\026in"
      "complete_glean_count\030A \001(\r\022\"\n\032dropped_pr"
      "otocol_req_count\030B \001(\r\022\037\n\027dropped_glean_"
      "req_count\030C \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/interfaces/interface/ipv6_nd_if_params.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace interfaces {
namespace interface {

// ===================================================================

void ipv6_nd_if_params_KEYS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_if_params_KEYS::kNodeNameFieldNumber;
const int ipv6_nd_if_params_KEYS::kInterfaceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_if_params_KEYS::ipv6_nd_if_params_KEYS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_params_KEYS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
}
ipv6_nd_if_params_KEYS::ipv6_nd_if_params_KEYS(const ipv6_nd_if_params_KEYS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_name().size() > 0) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
}

void ipv6_nd_if_params_KEYS::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_if_params_KEYS::~ipv6_nd_if_params_KEYS() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  SharedDtor();
}

void ipv6_nd_if_params_KEYS::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_if_params_KEYS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_if_params_KEYS::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_if_params_KEYS& ipv6_nd_if_params_KEYS::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_params_KEYS();
  return *internal_default_instance();
}

ipv6_nd_if_params_KEYS* ipv6_nd_if_params_KEYS::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_if_params_KEYS* n = new ipv6_nd_if_params_KEYS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_if_params_KEYS::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_if_params_KEYS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_name().data(), static_cast<int>(this->interface_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  return false;
#undef DO_
}

void ipv6_nd_if_params_KEYS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
}

::google::protobuf::uint8* ipv6_nd_if_params_KEYS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  return target;
}

size_t ipv6_nd_if_params_KEYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_if_params_KEYS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_if_params_KEYS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_if_params_KEYS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
    MergeFrom(*source);
  }
}

void ipv6_nd_if_params_KEYS::MergeFrom(const ipv6_nd_if_params_KEYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.interface_name().size() > 0) {

    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
}

void ipv6_nd_if_params_KEYS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_if_params_KEYS::CopyFrom(const ipv6_nd_if_params_KEYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_if_params_KEYS::IsInitialized() const {
  return true;
}

void ipv6_nd_if_params_KEYS::Swap(ipv6_nd_if_params_KEYS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_if_params_KEYS::InternalSwap(ipv6_nd_if_params_KEYS* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  interface_name_.Swap(&other->interface_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_if_params_KEYS::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_if_params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_if_params::kIsDadEnabledFieldNumber;
const int ipv6_nd_if_params::kDadAttemptsFieldNumber;
const int ipv6_nd_if_params::kIsIcmPv6RedirectFieldNumber;
const int ipv6_nd_if_params::kIsDhcpManagedFieldNumber;
const int ipv6_nd_if_params::kIsRouteAddressManagedFieldNumber;
const int ipv6_nd_if_params::kIsSuppressedFieldNumber;
const int ipv6_nd_if_params::kNdRetransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdMinTransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdMaxTransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdAdvertisementLifetimeFieldNumber;
const int ipv6_nd_if_params::kNdReachableTimeFieldNumber;
const int ipv6_nd_if_params::kNdCacheLimitFieldNumber;
const int ipv6_nd_if_params::kCompleteProtocolCountFieldNumber;
const int ipv6_nd_if_params::kCompleteGleanCountFieldNumber;
const int ipv6_nd_if_params::kIncompleteProtocolCountFieldNumber;
const int ipv6_nd_if_params::kIncompleteGleanCountFieldNumber;
const int ipv6_nd_if_params::kDroppedProtocolReqCountFieldNumber;
const int ipv6_nd_if_params::kDroppedGleanReqCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_if_params::ipv6_nd_if_params()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_params();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
}
ipv6_nd_if_params::ipv6_nd_if_params(const ipv6_nd_if_params& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropped_glean_req_count_, &from.dropped_glean_req_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_protocol_req_count_) -
    reinterpret_cast<char*>(&dropped_glean_req_count_)) + sizeof(dropped_protocol_req_count_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
}

void ipv6_nd_if_params::SharedCtor() {
  ::memset(&dropped_glean_req_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_protocol_req_count_) -
      reinterpret_cast<char*>(&dropped_glean_req_count_)) + sizeof(dropped_protocol_req_count_));
  _cached_size_ = 0;
}

ipv6_nd_if_params::~ipv6_nd_if_params() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  SharedDtor();
}

void ipv6_nd_if_params::SharedDtor() {
}

void ipv6_nd_if_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_if_params::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_if_params& ipv6_nd_if_params::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_params();
  return *internal_default_instance();
}

ipv6_nd_if_params* ipv6_nd_if_params::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_if_params* n = new ipv6_nd_if_params;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_if_params::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dropped_glean_req_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_protocol_req_count_) -
      reinterpret_cast<char*>(&dropped_glean_req_count_)) + sizeof(dropped_protocol_req_count_));
  _internal_metadata_.Clear();
}

bool ipv6_nd_if_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_dad_enabled = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dad_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dad_attempts = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dad_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_icm_pv6_redirect = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_icm_pv6_redirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_managed = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_route_address_managed = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_route_address_managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_suppressed = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suppressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_retransmit_interval = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_retransmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_min_transmit_interval = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_min_transmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_max_transmit_interval = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_max_transmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_advertisement_lifetime = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_advertisement_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_reachable_time = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_reachable_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_cache_limit = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_cache_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 complete_protocol_count = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_protocol_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 complete_glean_count = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_glean_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incomplete_protocol_count = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incomplete_protocol_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incomplete_glean_count = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incomplete_glean_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropped_protocol_req_count = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropped_protocol_req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropped_glean_req_count = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropped_glean_req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  return false;
#undef DO_
}

void ipv6_nd_if_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dad_enabled = 50;
  if (this->is_dad_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->is_dad_enabled(), output);
  }

  // uint32 dad_attempts = 51;
  if (this->dad_attempts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->dad_attempts(), output);
  }

  // bool is_icm_pv6_redirect = 52;
  if (this->is_icm_pv6_redirect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->is_icm_pv6_redirect(), output);
  }

  // bool is_dhcp_managed = 53;
  if (this->is_dhcp_managed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->is_dhcp_managed(), output);
  }

  // bool is_route_address_managed = 54;
  if (this->is_route_address_managed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->is_route_address_managed(), output);
  }

  // bool is_suppressed = 55;
  if (this->is_suppressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->is_suppressed(), output);
  }

  // uint32 nd_retransmit_interval = 56;
  if (this->nd_retransmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->nd_retransmit_interval(), output);
  }

  // uint32 nd_min_transmit_interval = 57;
  if (this->nd_min_transmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->nd_min_transmit_interval(), output);
  }

  // uint32 nd_max_transmit_interval = 58;
  if (this->nd_max_transmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->nd_max_transmit_interval(), output);
  }

  // uint32 nd_advertisement_lifetime = 59;
  if (this->nd_advertisement_lifetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->nd_advertisement_lifetime(), output);
  }

  // uint32 nd_reachable_time = 60;
  if (this->nd_reachable_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->nd_reachable_time(), output);
  }

  // uint32 nd_cache_limit = 61;
  if (this->nd_cache_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->nd_cache_limit(), output);
  }

  // uint32 complete_protocol_count = 62;
  if (this->complete_protocol_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->complete_protocol_count(), output);
  }

  // uint32 complete_glean_count = 63;
  if (this->complete_glean_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->complete_glean_count(), output);
  }

  // uint32 incomplete_protocol_count = 64;
  if (this->incomplete_protocol_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->incomplete_protocol_count(), output);
  }

  // uint32 incomplete_glean_count = 65;
  if (this->incomplete_glean_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->incomplete_glean_count(), output);
  }

  // uint32 dropped_protocol_req_count = 66;
  if (this->dropped_protocol_req_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->dropped_protocol_req_count(), output);
  }

  // uint32 dropped_glean_req_count = 67;
  if (this->dropped_glean_req_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->dropped_glean_req_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
}

::google::protobuf::uint8* ipv6_nd_if_params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dad_enabled = 50;
  if (this->is_dad_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->is_dad_enabled(), target);
  }

  // uint32 dad_attempts = 51;
  if (this->dad_attempts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->dad_attempts(), target);
  }

  // bool is_icm_pv6_redirect = 52;
  if (this->is_icm_pv6_redirect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->is_icm_pv6_redirect(), target);
  }

  // bool is_dhcp_managed = 53;
  if (this->is_dhcp_managed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->is_dhcp_managed(), target);
  }

  // bool is_route_address_managed = 54;
  if (this->is_route_address_managed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->is_route_address_managed(), target);
  }

  // bool is_suppressed = 55;
  if (this->is_suppressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->is_suppressed(), target);
  }

  // uint32 nd_retransmit_interval = 56;
  if (this->nd_retransmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->nd_retransmit_interval(), target);
  }

  // uint32 nd_min_transmit_interval = 57;
  if (this->nd_min_transmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->nd_min_transmit_interval(), target);
  }

  // uint32 nd_max_transmit_interval = 58;
  if (this->nd_max_transmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->nd_max_transmit_interval(), target);
  }

  // uint32 nd_advertisement_lifetime = 59;
  if (this->nd_advertisement_lifetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->nd_advertisement_lifetime(), target);
  }

  // uint32 nd_reachable_time = 60;
  if (this->nd_reachable_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->nd_reachable_time(), target);
  }

  // uint32 nd_cache_limit = 61;
  if (this->nd_cache_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->nd_cache_limit(), target);
  }

  // uint32 complete_protocol_count = 62;
  if (this->complete_protocol_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->complete_protocol_count(), target);
  }

  // uint32 complete_glean_count = 63;
  if (this->complete_glean_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->complete_glean_count(), target);
  }

  // uint32 incomplete_protocol_count = 64;
  if (this->incomplete_protocol_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->incomplete_protocol_count(), target);
  }

  // uint32 incomplete_glean_count = 65;
  if (this->incomplete_glean_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->incomplete_glean_count(), target);
  }

  // uint32 dropped_protocol_req_count = 66;
  if (this->dropped_protocol_req_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->dropped_protocol_req_count(), target);
  }

  // uint32 dropped_glean_req_count = 67;
  if (this->dropped_glean_req_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->dropped_glean_req_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  return target;
}

size_t ipv6_nd_if_params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dropped_glean_req_count = 67;
  if (this->dropped_glean_req_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropped_glean_req_count());
  }

  // uint32 dad_attempts = 51;
  if (this->dad_attempts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dad_attempts());
  }

  // bool is_dad_enabled = 50;
  if (this->is_dad_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool is_icm_pv6_redirect = 52;
  if (this->is_icm_pv6_redirect() != 0) {
    total_size += 2 + 1;
  }

  // bool is_dhcp_managed = 53;
  if (this->is_dhcp_managed() != 0) {
    total_size += 2 + 1;
  }

  // bool is_route_address_managed = 54;
  if (this->is_route_address_managed() != 0) {
    total_size += 2 + 1;
  }

  // bool is_suppressed = 55;
  if (this->is_suppressed() != 0) {
    total_size += 2 + 1;
  }

  // uint32 nd_retransmit_interval = 56;
  if (this->nd_retransmit_interval() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_retransmit_interval());
  }

  // uint32 nd_min_transmit_interval = 57;
  if (this->nd_min_transmit_interval() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_min_transmit_interval());
  }

  // uint32 nd_max_transmit_interval = 58;
  if (this->nd_max_transmit_interval() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_max_transmit_interval());
  }

  // uint32 nd_advertisement_lifetime = 59;
  if (this->nd_advertisement_lifetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_advertisement_lifetime());
  }

  // uint32 nd_reachable_time = 60;
  if (this->nd_reachable_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_reachable_time());
  }

  // uint32 nd_cache_limit = 61;
  if (this->nd_cache_limit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_cache_limit());
  }

  // uint32 complete_protocol_count = 62;
  if (this->complete_protocol_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->complete_protocol_count());
  }

  // uint32 complete_glean_count = 63;
  if (this->complete_glean_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->complete_glean_count());
  }

  // uint32 incomplete_protocol_count = 64;
  if (this->incomplete_protocol_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incomplete_protocol_count());
  }

  // uint32 incomplete_glean_count = 65;
  if (this->incomplete_glean_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incomplete_glean_count());
  }

  // uint32 dropped_protocol_req_count = 66;
  if (this->dropped_protocol_req_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropped_protocol_req_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_if_params::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_if_params* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_if_params>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
    MergeFrom(*source);
  }
}

void ipv6_nd_if_params::MergeFrom(const ipv6_nd_if_params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dropped_glean_req_count() != 0) {
    set_dropped_glean_req_count(from.dropped_glean_req_count());
  }
  if (from.dad_attempts() != 0) {
    set_dad_attempts(from.dad_attempts());
  }
  if (from.is_dad_enabled() != 0) {
    set_is_dad_enabled(from.is_dad_enabled());
  }
  if (from.is_icm_pv6_redirect() != 0) {
    set_is_icm_pv6_redirect(from.is_icm_pv6_redirect());
  }
  if (from.is_dhcp_managed() != 0) {
    set_is_dhcp_managed(from.is_dhcp_managed());
  }
  if (from.is_route_address_managed() != 0) {
    set_is_route_address_managed(from.is_route_address_managed());
  }
  if (from.is_suppressed() != 0) {
    set_is_suppressed(from.is_suppressed());
  }
  if (from.nd_retransmit_interval() != 0) {
    set_nd_retransmit_interval(from.nd_retransmit_interval());
  }
  if (from.nd_min_transmit_interval() != 0) {
    set_nd_min_transmit_interval(from.nd_min_transmit_interval());
  }
  if (from.nd_max_transmit_interval() != 0) {
    set_nd_max_transmit_interval(from.nd_max_transmit_interval());
  }
  if (from.nd_advertisement_lifetime() != 0) {
    set_nd_advertisement_lifetime(from.nd_advertisement_lifetime());
  }
  if (from.nd_reachable_time() != 0) {
    set_nd_reachable_time(from.nd_reachable_time());
  }
  if (from.nd_cache_limit() != 0) {
    set_nd_cache_limit(from.nd_cache_limit());
  }
  if (from.complete_protocol_count() != 0) {
    set_complete_protocol_count(from.complete_protocol_count());
  }
  if (from.complete_glean_count() != 0) {
    set_complete_glean_count(from.complete_glean_count());
  }
  if (from.incomplete_protocol_count() != 0) {
    set_incomplete_protocol_count(from.incomplete_protocol_count());
  }
  if (from.incomplete_glean_count() != 0) {
    set_incomplete_glean_count(from.incomplete_glean_count());
  }
  if (from.dropped_protocol_req_count() != 0) {
    set_dropped_protocol_req_count(from.dropped_protocol_req_count());
  }
}

void ipv6_nd_if_params::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_if_params::CopyFrom(const ipv6_nd_if_params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_if_params::IsInitialized() const {
  return true;
}

void ipv6_nd_if_params::Swap(ipv6_nd_if_params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_if_params::InternalSwap(ipv6_nd_if_params* other) {
  using std::swap;
  swap(dropped_glean_req_count_, other->dropped_glean_req_count_);
  swap(dad_attempts_, other->dad_attempts_);
  swap(is_dad_enabled_, other->is_dad_enabled_);
  swap(is_icm_pv6_redirect_, other->is_icm_pv6_redirect_);
  swap(is_dhcp_managed_, other->is_dhcp_managed_);
  swap(is_route_address_managed_, other->is_route_address_managed_);
  swap(is_suppressed_, other->is_suppressed_);
  swap(nd_retransmit_interval_, other->nd_retransmit_interval_);
  swap(nd_min_transmit_interval_, other->nd_min_transmit_interval_);
  swap(nd_max_transmit_interval_, other->nd_max_transmit_interval_);
  swap(nd_advertisement_lifetime_, other->nd_advertisement_lifetime_);
  swap(nd_reachable_time_, other->nd_reachable_time_);
  swap(nd_cache_limit_, other->nd_cache_limit_);
  swap(complete_protocol_count_, other->complete_protocol_count_);
  swap(complete_glean_count_, other->complete_glean_count_);
  swap(incomplete_protocol_count_, other->incomplete_protocol_count_);
  swap(incomplete_glean_count_, other->incomplete_glean_count_);
  swap(dropped_protocol_req_count_, other->dropped_protocol_req_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_if_params::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace interface
}  // namespace interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)
