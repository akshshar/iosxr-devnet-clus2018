// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_nodes/bundle_node/ipv6_nd_bl_node_entry.proto

#ifndef PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto__INCLUDED
#define PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsipv6_nd_bl_node_entry_KEYSImpl();
void InitDefaultsipv6_nd_bl_node_entry_KEYS();
void InitDefaultsipv6_nd_bl_node_entryImpl();
void InitDefaultsipv6_nd_bl_node_entry();
void InitDefaultsbag_timespecImpl();
void InitDefaultsbag_timespec();
inline void InitDefaults() {
  InitDefaultsipv6_nd_bl_node_entry_KEYS();
  InitDefaultsipv6_nd_bl_node_entry();
  InitDefaultsbag_timespec();
}
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_nodes {
namespace bundle_node {
class bag_timespec;
class bag_timespecDefaultTypeInternal;
extern bag_timespecDefaultTypeInternal _bag_timespec_default_instance_;
class ipv6_nd_bl_node_entry;
class ipv6_nd_bl_node_entryDefaultTypeInternal;
extern ipv6_nd_bl_node_entryDefaultTypeInternal _ipv6_nd_bl_node_entry_default_instance_;
class ipv6_nd_bl_node_entry_KEYS;
class ipv6_nd_bl_node_entry_KEYSDefaultTypeInternal;
extern ipv6_nd_bl_node_entry_KEYSDefaultTypeInternal _ipv6_nd_bl_node_entry_KEYS_default_instance_;
}  // namespace bundle_node
}  // namespace bundle_nodes
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_nodes {
namespace bundle_node {

// ===================================================================

class ipv6_nd_bl_node_entry_KEYS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS) */ {
 public:
  ipv6_nd_bl_node_entry_KEYS();
  virtual ~ipv6_nd_bl_node_entry_KEYS();

  ipv6_nd_bl_node_entry_KEYS(const ipv6_nd_bl_node_entry_KEYS& from);

  inline ipv6_nd_bl_node_entry_KEYS& operator=(const ipv6_nd_bl_node_entry_KEYS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_bl_node_entry_KEYS(ipv6_nd_bl_node_entry_KEYS&& from) noexcept
    : ipv6_nd_bl_node_entry_KEYS() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_bl_node_entry_KEYS& operator=(ipv6_nd_bl_node_entry_KEYS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_bl_node_entry_KEYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_bl_node_entry_KEYS* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_bl_node_entry_KEYS*>(
               &_ipv6_nd_bl_node_entry_KEYS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ipv6_nd_bl_node_entry_KEYS* other);
  friend void swap(ipv6_nd_bl_node_entry_KEYS& a, ipv6_nd_bl_node_entry_KEYS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_bl_node_entry_KEYS* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_bl_node_entry_KEYS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_bl_node_entry_KEYS& from);
  void MergeFrom(const ipv6_nd_bl_node_entry_KEYS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_bl_node_entry_KEYS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string node_name_1 = 2;
  void clear_node_name_1();
  static const int kNodeName1FieldNumber = 2;
  const ::std::string& node_name_1() const;
  void set_node_name_1(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name_1(::std::string&& value);
  #endif
  void set_node_name_1(const char* value);
  void set_node_name_1(const char* value, size_t size);
  ::std::string* mutable_node_name_1();
  ::std::string* release_node_name_1();
  void set_allocated_node_name_1(::std::string* node_name_1);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr node_name_1_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entry_KEYSImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_bl_node_entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry) */ {
 public:
  ipv6_nd_bl_node_entry();
  virtual ~ipv6_nd_bl_node_entry();

  ipv6_nd_bl_node_entry(const ipv6_nd_bl_node_entry& from);

  inline ipv6_nd_bl_node_entry& operator=(const ipv6_nd_bl_node_entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_bl_node_entry(ipv6_nd_bl_node_entry&& from) noexcept
    : ipv6_nd_bl_node_entry() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_bl_node_entry& operator=(ipv6_nd_bl_node_entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_bl_node_entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_bl_node_entry* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_bl_node_entry*>(
               &_ipv6_nd_bl_node_entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ipv6_nd_bl_node_entry* other);
  friend void swap(ipv6_nd_bl_node_entry& a, ipv6_nd_bl_node_entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_bl_node_entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_bl_node_entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_bl_node_entry& from);
  void MergeFrom(const ipv6_nd_bl_node_entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_bl_node_entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string process_name = 51;
  void clear_process_name();
  static const int kProcessNameFieldNumber = 51;
  const ::std::string& process_name() const;
  void set_process_name(const ::std::string& value);
  #if LANG_CXX11
  void set_process_name(::std::string&& value);
  #endif
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  ::std::string* mutable_process_name();
  ::std::string* release_process_name();
  void set_allocated_process_name(::std::string* process_name);

  // string state = 55;
  void clear_state();
  static const int kStateFieldNumber = 55;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 52;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec& age() const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* release_age();
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* mutable_age();
  void set_allocated_age(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* age);

  // uint32 group_id = 50;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 50;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 sent_sequence_number = 53;
  void clear_sent_sequence_number();
  static const int kSentSequenceNumberFieldNumber = 53;
  ::google::protobuf::uint32 sent_sequence_number() const;
  void set_sent_sequence_number(::google::protobuf::uint32 value);

  // uint32 received_sequence_number = 54;
  void clear_received_sequence_number();
  static const int kReceivedSequenceNumberFieldNumber = 54;
  ::google::protobuf::uint32 received_sequence_number() const;
  void set_received_sequence_number(::google::protobuf::uint32 value);

  // uint32 state_changes = 56;
  void clear_state_changes();
  static const int kStateChangesFieldNumber = 56;
  ::google::protobuf::uint32 state_changes() const;
  void set_state_changes(::google::protobuf::uint32 value);

  // uint32 sent_packets = 57;
  void clear_sent_packets();
  static const int kSentPacketsFieldNumber = 57;
  ::google::protobuf::uint32 sent_packets() const;
  void set_sent_packets(::google::protobuf::uint32 value);

  // uint32 received_packets = 58;
  void clear_received_packets();
  static const int kReceivedPacketsFieldNumber = 58;
  ::google::protobuf::uint32 received_packets() const;
  void set_received_packets(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr process_name_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* age_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 sent_sequence_number_;
  ::google::protobuf::uint32 received_sequence_number_;
  ::google::protobuf::uint32 state_changes_;
  ::google::protobuf::uint32 sent_packets_;
  ::google::protobuf::uint32 received_packets_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entryImpl();
};
// -------------------------------------------------------------------

class bag_timespec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec) */ {
 public:
  bag_timespec();
  virtual ~bag_timespec();

  bag_timespec(const bag_timespec& from);

  inline bag_timespec& operator=(const bag_timespec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bag_timespec(bag_timespec&& from) noexcept
    : bag_timespec() {
    *this = ::std::move(from);
  }

  inline bag_timespec& operator=(bag_timespec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_timespec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bag_timespec* internal_default_instance() {
    return reinterpret_cast<const bag_timespec*>(
               &_bag_timespec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(bag_timespec* other);
  friend void swap(bag_timespec& a, bag_timespec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bag_timespec* New() const PROTOBUF_FINAL { return New(NULL); }

  bag_timespec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bag_timespec& from);
  void MergeFrom(const bag_timespec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bag_timespec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 seconds = 1;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::uint32 seconds() const;
  void set_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsbag_timespecImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ipv6_nd_bl_node_entry_KEYS

// string node_name = 1;
inline void ipv6_nd_bl_node_entry_KEYS::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_bl_node_entry_KEYS::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
}
#endif
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
}
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
}
inline ::std::string* ipv6_nd_bl_node_entry_KEYS::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_bl_node_entry_KEYS::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_bl_node_entry_KEYS::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name)
}

// string node_name_1 = 2;
inline void ipv6_nd_bl_node_entry_KEYS::clear_node_name_1() {
  node_name_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_bl_node_entry_KEYS::node_name_1() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
  return node_name_1_.GetNoArena();
}
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name_1(const ::std::string& value) {
  
  node_name_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
}
#if LANG_CXX11
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name_1(::std::string&& value) {
  
  node_name_1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
}
#endif
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name_1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
}
inline void ipv6_nd_bl_node_entry_KEYS::set_node_name_1(const char* value, size_t size) {
  
  node_name_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
}
inline ::std::string* ipv6_nd_bl_node_entry_KEYS::mutable_node_name_1() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
  return node_name_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_bl_node_entry_KEYS::release_node_name_1() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
  
  return node_name_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_bl_node_entry_KEYS::set_allocated_node_name_1(::std::string* node_name_1) {
  if (node_name_1 != NULL) {
    
  } else {
    
  }
  node_name_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name_1);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1)
}

// -------------------------------------------------------------------

// ipv6_nd_bl_node_entry

// uint32 group_id = 50;
inline void ipv6_nd_bl_node_entry::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::group_id() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.group_id)
  return group_id_;
}
inline void ipv6_nd_bl_node_entry::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.group_id)
}

// string process_name = 51;
inline void ipv6_nd_bl_node_entry::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_bl_node_entry::process_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
  return process_name_.GetNoArena();
}
inline void ipv6_nd_bl_node_entry::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
}
#if LANG_CXX11
inline void ipv6_nd_bl_node_entry::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
}
#endif
inline void ipv6_nd_bl_node_entry::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
}
inline void ipv6_nd_bl_node_entry::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
}
inline ::std::string* ipv6_nd_bl_node_entry::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_bl_node_entry::release_process_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_bl_node_entry::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name)
}

// .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
inline bool ipv6_nd_bl_node_entry::has_age() const {
  return this != internal_default_instance() && age_ != NULL;
}
inline void ipv6_nd_bl_node_entry::clear_age() {
  if (GetArenaNoVirtual() == NULL && age_ != NULL) {
    delete age_;
  }
  age_ = NULL;
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec& ipv6_nd_bl_node_entry::age() const {
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* p = age_;
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.age)
  return p != NULL ? *p : *reinterpret_cast<const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec*>(
      &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_bag_timespec_default_instance_);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* ipv6_nd_bl_node_entry::release_age() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.age)
  
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* temp = age_;
  age_ = NULL;
  return temp;
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* ipv6_nd_bl_node_entry::mutable_age() {
  
  if (age_ == NULL) {
    age_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec;
  }
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.age)
  return age_;
}
inline void ipv6_nd_bl_node_entry::set_allocated_age(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec* age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete age_;
  }
  if (age) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, age, submessage_arena);
    }
    
  } else {
    
  }
  age_ = age;
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.age)
}

// uint32 sent_sequence_number = 53;
inline void ipv6_nd_bl_node_entry::clear_sent_sequence_number() {
  sent_sequence_number_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::sent_sequence_number() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.sent_sequence_number)
  return sent_sequence_number_;
}
inline void ipv6_nd_bl_node_entry::set_sent_sequence_number(::google::protobuf::uint32 value) {
  
  sent_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.sent_sequence_number)
}

// uint32 received_sequence_number = 54;
inline void ipv6_nd_bl_node_entry::clear_received_sequence_number() {
  received_sequence_number_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::received_sequence_number() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.received_sequence_number)
  return received_sequence_number_;
}
inline void ipv6_nd_bl_node_entry::set_received_sequence_number(::google::protobuf::uint32 value) {
  
  received_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.received_sequence_number)
}

// string state = 55;
inline void ipv6_nd_bl_node_entry::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_bl_node_entry::state() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
  return state_.GetNoArena();
}
inline void ipv6_nd_bl_node_entry::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
}
#if LANG_CXX11
inline void ipv6_nd_bl_node_entry::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
}
#endif
inline void ipv6_nd_bl_node_entry::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
}
inline void ipv6_nd_bl_node_entry::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
}
inline ::std::string* ipv6_nd_bl_node_entry::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_bl_node_entry::release_state() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_bl_node_entry::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state)
}

// uint32 state_changes = 56;
inline void ipv6_nd_bl_node_entry::clear_state_changes() {
  state_changes_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::state_changes() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state_changes)
  return state_changes_;
}
inline void ipv6_nd_bl_node_entry::set_state_changes(::google::protobuf::uint32 value) {
  
  state_changes_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state_changes)
}

// uint32 sent_packets = 57;
inline void ipv6_nd_bl_node_entry::clear_sent_packets() {
  sent_packets_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::sent_packets() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.sent_packets)
  return sent_packets_;
}
inline void ipv6_nd_bl_node_entry::set_sent_packets(::google::protobuf::uint32 value) {
  
  sent_packets_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.sent_packets)
}

// uint32 received_packets = 58;
inline void ipv6_nd_bl_node_entry::clear_received_packets() {
  received_packets_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_bl_node_entry::received_packets() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.received_packets)
  return received_packets_;
}
inline void ipv6_nd_bl_node_entry::set_received_packets(::google::protobuf::uint32 value) {
  
  received_packets_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.received_packets)
}

// -------------------------------------------------------------------

// bag_timespec

// uint32 seconds = 1;
inline void bag_timespec::clear_seconds() {
  seconds_ = 0u;
}
inline ::google::protobuf::uint32 bag_timespec::seconds() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec.seconds)
  return seconds_;
}
inline void bag_timespec::set_seconds(::google::protobuf::uint32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec.seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bundle_node
}  // namespace bundle_nodes
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto__INCLUDED
