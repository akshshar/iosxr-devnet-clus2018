// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.proto

#ifndef PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto__INCLUDED
#define PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsipv6_nd_if_entry_KEYSImpl();
void InitDefaultsipv6_nd_if_entry_KEYS();
void InitDefaultsipv6_nd_if_entryImpl();
void InitDefaultsipv6_nd_if_entry();
void InitDefaultsipv6_nd_if_paramsImpl();
void InitDefaultsipv6_nd_if_params();
void InitDefaultsipv6_nd_addrImpl();
void InitDefaultsipv6_nd_addr();
void InitDefaultsipv6_nd_gspnodeImpl();
void InitDefaultsipv6_nd_gspnode();
inline void InitDefaults() {
  InitDefaultsipv6_nd_if_entry_KEYS();
  InitDefaultsipv6_nd_if_entry();
  InitDefaultsipv6_nd_if_params();
  InitDefaultsipv6_nd_addr();
  InitDefaultsipv6_nd_gspnode();
}
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_interfaces {
namespace bundle_interface {
class ipv6_nd_addr;
class ipv6_nd_addrDefaultTypeInternal;
extern ipv6_nd_addrDefaultTypeInternal _ipv6_nd_addr_default_instance_;
class ipv6_nd_gspnode;
class ipv6_nd_gspnodeDefaultTypeInternal;
extern ipv6_nd_gspnodeDefaultTypeInternal _ipv6_nd_gspnode_default_instance_;
class ipv6_nd_if_entry;
class ipv6_nd_if_entryDefaultTypeInternal;
extern ipv6_nd_if_entryDefaultTypeInternal _ipv6_nd_if_entry_default_instance_;
class ipv6_nd_if_entry_KEYS;
class ipv6_nd_if_entry_KEYSDefaultTypeInternal;
extern ipv6_nd_if_entry_KEYSDefaultTypeInternal _ipv6_nd_if_entry_KEYS_default_instance_;
class ipv6_nd_if_params;
class ipv6_nd_if_paramsDefaultTypeInternal;
extern ipv6_nd_if_paramsDefaultTypeInternal _ipv6_nd_if_params_default_instance_;
}  // namespace bundle_interface
}  // namespace bundle_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_interfaces {
namespace bundle_interface {

// ===================================================================

class ipv6_nd_if_entry_KEYS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS) */ {
 public:
  ipv6_nd_if_entry_KEYS();
  virtual ~ipv6_nd_if_entry_KEYS();

  ipv6_nd_if_entry_KEYS(const ipv6_nd_if_entry_KEYS& from);

  inline ipv6_nd_if_entry_KEYS& operator=(const ipv6_nd_if_entry_KEYS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_if_entry_KEYS(ipv6_nd_if_entry_KEYS&& from) noexcept
    : ipv6_nd_if_entry_KEYS() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_if_entry_KEYS& operator=(ipv6_nd_if_entry_KEYS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_if_entry_KEYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_if_entry_KEYS* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_if_entry_KEYS*>(
               &_ipv6_nd_if_entry_KEYS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ipv6_nd_if_entry_KEYS* other);
  friend void swap(ipv6_nd_if_entry_KEYS& a, ipv6_nd_if_entry_KEYS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_if_entry_KEYS* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_if_entry_KEYS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_if_entry_KEYS& from);
  void MergeFrom(const ipv6_nd_if_entry_KEYS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_if_entry_KEYS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string interface_name = 2;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 2;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entry_KEYSImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_if_entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry) */ {
 public:
  ipv6_nd_if_entry();
  virtual ~ipv6_nd_if_entry();

  ipv6_nd_if_entry(const ipv6_nd_if_entry& from);

  inline ipv6_nd_if_entry& operator=(const ipv6_nd_if_entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_if_entry(ipv6_nd_if_entry&& from) noexcept
    : ipv6_nd_if_entry() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_if_entry& operator=(ipv6_nd_if_entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_if_entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_if_entry* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_if_entry*>(
               &_ipv6_nd_if_entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ipv6_nd_if_entry* other);
  friend void swap(ipv6_nd_if_entry& a, ipv6_nd_if_entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_if_entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_if_entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_if_entry& from);
  void MergeFrom(const ipv6_nd_if_entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_if_entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
  int global_address_list_size() const;
  void clear_global_address_list();
  static const int kGlobalAddressListFieldNumber = 61;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr& global_address_list(int index) const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* mutable_global_address_list(int index);
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* add_global_address_list();
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr >*
      mutable_global_address_list();
  const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr >&
      global_address_list() const;

  // repeated uint32 member_link_list = 63;
  int member_link_list_size() const;
  void clear_member_link_list();
  static const int kMemberLinkListFieldNumber = 63;
  ::google::protobuf::uint32 member_link_list(int index) const;
  void set_member_link_list(int index, ::google::protobuf::uint32 value);
  void add_member_link_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      member_link_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_member_link_list();

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
  int member_node_list_size() const;
  void clear_member_node_list();
  static const int kMemberNodeListFieldNumber = 64;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode& member_node_list(int index) const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode* mutable_member_node_list(int index);
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode* add_member_node_list();
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode >*
      mutable_member_node_list();
  const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode >&
      member_node_list() const;

  // string parent_interface_name = 50;
  void clear_parent_interface_name();
  static const int kParentInterfaceNameFieldNumber = 50;
  const ::std::string& parent_interface_name() const;
  void set_parent_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_interface_name(::std::string&& value);
  #endif
  void set_parent_interface_name(const char* value);
  void set_parent_interface_name(const char* value, size_t size);
  ::std::string* mutable_parent_interface_name();
  ::std::string* release_parent_interface_name();
  void set_allocated_parent_interface_name(::std::string* parent_interface_name);

  // string mac_addr = 56;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 56;
  const ::std::string& mac_addr() const;
  void set_mac_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_addr(::std::string&& value);
  #endif
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  ::std::string* mutable_mac_addr();
  ::std::string* release_mac_addr();
  void set_allocated_mac_addr(::std::string* mac_addr);

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
  bool has_nd_parameters() const;
  void clear_nd_parameters();
  static const int kNdParametersFieldNumber = 60;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params& nd_parameters() const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* release_nd_parameters();
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* mutable_nd_parameters();
  void set_allocated_nd_parameters(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* nd_parameters);

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
  bool has_local_address() const;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 62;
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr& local_address() const;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* release_local_address();
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* mutable_local_address();
  void set_allocated_local_address(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* local_address);

  // uint32 iftype = 51;
  void clear_iftype();
  static const int kIftypeFieldNumber = 51;
  ::google::protobuf::uint32 iftype() const;
  void set_iftype(::google::protobuf::uint32 value);

  // uint32 mtu = 52;
  void clear_mtu();
  static const int kMtuFieldNumber = 52;
  ::google::protobuf::uint32 mtu() const;
  void set_mtu(::google::protobuf::uint32 value);

  // uint32 etype = 53;
  void clear_etype();
  static const int kEtypeFieldNumber = 53;
  ::google::protobuf::uint32 etype() const;
  void set_etype(::google::protobuf::uint32 value);

  // uint32 vlan_tag = 54;
  void clear_vlan_tag();
  static const int kVlanTagFieldNumber = 54;
  ::google::protobuf::uint32 vlan_tag() const;
  void set_vlan_tag(::google::protobuf::uint32 value);

  // uint32 mac_addr_size = 55;
  void clear_mac_addr_size();
  static const int kMacAddrSizeFieldNumber = 55;
  ::google::protobuf::uint32 mac_addr_size() const;
  void set_mac_addr_size(::google::protobuf::uint32 value);

  // bool is_interface_enabled = 57;
  void clear_is_interface_enabled();
  static const int kIsInterfaceEnabledFieldNumber = 57;
  bool is_interface_enabled() const;
  void set_is_interface_enabled(bool value);

  // bool is_ipv6_enabled = 58;
  void clear_is_ipv6_enabled();
  static const int kIsIpv6EnabledFieldNumber = 58;
  bool is_ipv6_enabled() const;
  void set_is_ipv6_enabled(bool value);

  // bool is_mpls_enabled = 59;
  void clear_is_mpls_enabled();
  static const int kIsMplsEnabledFieldNumber = 59;
  bool is_mpls_enabled() const;
  void set_is_mpls_enabled(bool value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr > global_address_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > member_link_list_;
  mutable int _member_link_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode > member_node_list_;
  ::google::protobuf::internal::ArenaStringPtr parent_interface_name_;
  ::google::protobuf::internal::ArenaStringPtr mac_addr_;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* nd_parameters_;
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* local_address_;
  ::google::protobuf::uint32 iftype_;
  ::google::protobuf::uint32 mtu_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 vlan_tag_;
  ::google::protobuf::uint32 mac_addr_size_;
  bool is_interface_enabled_;
  bool is_ipv6_enabled_;
  bool is_mpls_enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entryImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_if_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params) */ {
 public:
  ipv6_nd_if_params();
  virtual ~ipv6_nd_if_params();

  ipv6_nd_if_params(const ipv6_nd_if_params& from);

  inline ipv6_nd_if_params& operator=(const ipv6_nd_if_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_if_params(ipv6_nd_if_params&& from) noexcept
    : ipv6_nd_if_params() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_if_params& operator=(ipv6_nd_if_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_if_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_if_params* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_if_params*>(
               &_ipv6_nd_if_params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ipv6_nd_if_params* other);
  friend void swap(ipv6_nd_if_params& a, ipv6_nd_if_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_if_params* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_if_params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_if_params& from);
  void MergeFrom(const ipv6_nd_if_params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_if_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dad_attempts = 2;
  void clear_dad_attempts();
  static const int kDadAttemptsFieldNumber = 2;
  ::google::protobuf::uint32 dad_attempts() const;
  void set_dad_attempts(::google::protobuf::uint32 value);

  // bool is_dad_enabled = 1;
  void clear_is_dad_enabled();
  static const int kIsDadEnabledFieldNumber = 1;
  bool is_dad_enabled() const;
  void set_is_dad_enabled(bool value);

  // bool is_icm_pv6_redirect = 3;
  void clear_is_icm_pv6_redirect();
  static const int kIsIcmPv6RedirectFieldNumber = 3;
  bool is_icm_pv6_redirect() const;
  void set_is_icm_pv6_redirect(bool value);

  // bool is_dhcp_managed = 4;
  void clear_is_dhcp_managed();
  static const int kIsDhcpManagedFieldNumber = 4;
  bool is_dhcp_managed() const;
  void set_is_dhcp_managed(bool value);

  // bool is_route_address_managed = 5;
  void clear_is_route_address_managed();
  static const int kIsRouteAddressManagedFieldNumber = 5;
  bool is_route_address_managed() const;
  void set_is_route_address_managed(bool value);

  // bool is_suppressed = 6;
  void clear_is_suppressed();
  static const int kIsSuppressedFieldNumber = 6;
  bool is_suppressed() const;
  void set_is_suppressed(bool value);

  // uint32 nd_retransmit_interval = 7;
  void clear_nd_retransmit_interval();
  static const int kNdRetransmitIntervalFieldNumber = 7;
  ::google::protobuf::uint32 nd_retransmit_interval() const;
  void set_nd_retransmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_min_transmit_interval = 8;
  void clear_nd_min_transmit_interval();
  static const int kNdMinTransmitIntervalFieldNumber = 8;
  ::google::protobuf::uint32 nd_min_transmit_interval() const;
  void set_nd_min_transmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_max_transmit_interval = 9;
  void clear_nd_max_transmit_interval();
  static const int kNdMaxTransmitIntervalFieldNumber = 9;
  ::google::protobuf::uint32 nd_max_transmit_interval() const;
  void set_nd_max_transmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_advertisement_lifetime = 10;
  void clear_nd_advertisement_lifetime();
  static const int kNdAdvertisementLifetimeFieldNumber = 10;
  ::google::protobuf::uint32 nd_advertisement_lifetime() const;
  void set_nd_advertisement_lifetime(::google::protobuf::uint32 value);

  // uint32 nd_reachable_time = 11;
  void clear_nd_reachable_time();
  static const int kNdReachableTimeFieldNumber = 11;
  ::google::protobuf::uint32 nd_reachable_time() const;
  void set_nd_reachable_time(::google::protobuf::uint32 value);

  // uint32 nd_cache_limit = 12;
  void clear_nd_cache_limit();
  static const int kNdCacheLimitFieldNumber = 12;
  ::google::protobuf::uint32 nd_cache_limit() const;
  void set_nd_cache_limit(::google::protobuf::uint32 value);

  // uint32 complete_protocol_count = 13;
  void clear_complete_protocol_count();
  static const int kCompleteProtocolCountFieldNumber = 13;
  ::google::protobuf::uint32 complete_protocol_count() const;
  void set_complete_protocol_count(::google::protobuf::uint32 value);

  // uint32 complete_glean_count = 14;
  void clear_complete_glean_count();
  static const int kCompleteGleanCountFieldNumber = 14;
  ::google::protobuf::uint32 complete_glean_count() const;
  void set_complete_glean_count(::google::protobuf::uint32 value);

  // uint32 incomplete_protocol_count = 15;
  void clear_incomplete_protocol_count();
  static const int kIncompleteProtocolCountFieldNumber = 15;
  ::google::protobuf::uint32 incomplete_protocol_count() const;
  void set_incomplete_protocol_count(::google::protobuf::uint32 value);

  // uint32 incomplete_glean_count = 16;
  void clear_incomplete_glean_count();
  static const int kIncompleteGleanCountFieldNumber = 16;
  ::google::protobuf::uint32 incomplete_glean_count() const;
  void set_incomplete_glean_count(::google::protobuf::uint32 value);

  // uint32 dropped_protocol_req_count = 17;
  void clear_dropped_protocol_req_count();
  static const int kDroppedProtocolReqCountFieldNumber = 17;
  ::google::protobuf::uint32 dropped_protocol_req_count() const;
  void set_dropped_protocol_req_count(::google::protobuf::uint32 value);

  // uint32 dropped_glean_req_count = 18;
  void clear_dropped_glean_req_count();
  static const int kDroppedGleanReqCountFieldNumber = 18;
  ::google::protobuf::uint32 dropped_glean_req_count() const;
  void set_dropped_glean_req_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dad_attempts_;
  bool is_dad_enabled_;
  bool is_icm_pv6_redirect_;
  bool is_dhcp_managed_;
  bool is_route_address_managed_;
  bool is_suppressed_;
  ::google::protobuf::uint32 nd_retransmit_interval_;
  ::google::protobuf::uint32 nd_min_transmit_interval_;
  ::google::protobuf::uint32 nd_max_transmit_interval_;
  ::google::protobuf::uint32 nd_advertisement_lifetime_;
  ::google::protobuf::uint32 nd_reachable_time_;
  ::google::protobuf::uint32 nd_cache_limit_;
  ::google::protobuf::uint32 complete_protocol_count_;
  ::google::protobuf::uint32 complete_glean_count_;
  ::google::protobuf::uint32 incomplete_protocol_count_;
  ::google::protobuf::uint32 incomplete_glean_count_;
  ::google::protobuf::uint32 dropped_protocol_req_count_;
  ::google::protobuf::uint32 dropped_glean_req_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_paramsImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_addr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr) */ {
 public:
  ipv6_nd_addr();
  virtual ~ipv6_nd_addr();

  ipv6_nd_addr(const ipv6_nd_addr& from);

  inline ipv6_nd_addr& operator=(const ipv6_nd_addr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_addr(ipv6_nd_addr&& from) noexcept
    : ipv6_nd_addr() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_addr& operator=(ipv6_nd_addr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_addr* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_addr*>(
               &_ipv6_nd_addr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ipv6_nd_addr* other);
  friend void swap(ipv6_nd_addr& a, ipv6_nd_addr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_addr* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_addr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_addr& from);
  void MergeFrom(const ipv6_nd_addr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_addr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipv6_address = 1;
  void clear_ipv6_address();
  static const int kIpv6AddressFieldNumber = 1;
  const ::std::string& ipv6_address() const;
  void set_ipv6_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6_address(::std::string&& value);
  #endif
  void set_ipv6_address(const char* value);
  void set_ipv6_address(const char* value, size_t size);
  ::std::string* mutable_ipv6_address();
  ::std::string* release_ipv6_address();
  void set_allocated_ipv6_address(::std::string* ipv6_address);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_address_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_addrImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_gspnode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode) */ {
 public:
  ipv6_nd_gspnode();
  virtual ~ipv6_nd_gspnode();

  ipv6_nd_gspnode(const ipv6_nd_gspnode& from);

  inline ipv6_nd_gspnode& operator=(const ipv6_nd_gspnode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_gspnode(ipv6_nd_gspnode&& from) noexcept
    : ipv6_nd_gspnode() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_gspnode& operator=(ipv6_nd_gspnode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_gspnode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_gspnode* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_gspnode*>(
               &_ipv6_nd_gspnode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ipv6_nd_gspnode* other);
  friend void swap(ipv6_nd_gspnode& a, ipv6_nd_gspnode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_gspnode* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_gspnode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_gspnode& from);
  void MergeFrom(const ipv6_nd_gspnode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_gspnode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // uint32 total_links = 2;
  void clear_total_links();
  static const int kTotalLinksFieldNumber = 2;
  ::google::protobuf::uint32 total_links() const;
  void set_total_links(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::uint32 total_links_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_gspnodeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ipv6_nd_if_entry_KEYS

// string node_name = 1;
inline void ipv6_nd_if_entry_KEYS::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_entry_KEYS::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_if_entry_KEYS::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_if_entry_KEYS::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
}
#endif
inline void ipv6_nd_if_entry_KEYS::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
}
inline void ipv6_nd_if_entry_KEYS::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
}
inline ::std::string* ipv6_nd_if_entry_KEYS::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_entry_KEYS::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_entry_KEYS::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name)
}

// string interface_name = 2;
inline void ipv6_nd_if_entry_KEYS::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_entry_KEYS::interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
  return interface_name_.GetNoArena();
}
inline void ipv6_nd_if_entry_KEYS::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_if_entry_KEYS::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
}
#endif
inline void ipv6_nd_if_entry_KEYS::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
}
inline void ipv6_nd_if_entry_KEYS::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
}
inline ::std::string* ipv6_nd_if_entry_KEYS::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_entry_KEYS::release_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_entry_KEYS::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name)
}

// -------------------------------------------------------------------

// ipv6_nd_if_entry

// string parent_interface_name = 50;
inline void ipv6_nd_if_entry::clear_parent_interface_name() {
  parent_interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_entry::parent_interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
  return parent_interface_name_.GetNoArena();
}
inline void ipv6_nd_if_entry::set_parent_interface_name(const ::std::string& value) {
  
  parent_interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_if_entry::set_parent_interface_name(::std::string&& value) {
  
  parent_interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
}
#endif
inline void ipv6_nd_if_entry::set_parent_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
}
inline void ipv6_nd_if_entry::set_parent_interface_name(const char* value, size_t size) {
  
  parent_interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
}
inline ::std::string* ipv6_nd_if_entry::mutable_parent_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
  return parent_interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_entry::release_parent_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
  
  return parent_interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_entry::set_allocated_parent_interface_name(::std::string* parent_interface_name) {
  if (parent_interface_name != NULL) {
    
  } else {
    
  }
  parent_interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name)
}

// uint32 iftype = 51;
inline void ipv6_nd_if_entry::clear_iftype() {
  iftype_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::iftype() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.iftype)
  return iftype_;
}
inline void ipv6_nd_if_entry::set_iftype(::google::protobuf::uint32 value) {
  
  iftype_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.iftype)
}

// uint32 mtu = 52;
inline void ipv6_nd_if_entry::clear_mtu() {
  mtu_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::mtu() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mtu)
  return mtu_;
}
inline void ipv6_nd_if_entry::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mtu)
}

// uint32 etype = 53;
inline void ipv6_nd_if_entry::clear_etype() {
  etype_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::etype() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.etype)
  return etype_;
}
inline void ipv6_nd_if_entry::set_etype(::google::protobuf::uint32 value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.etype)
}

// uint32 vlan_tag = 54;
inline void ipv6_nd_if_entry::clear_vlan_tag() {
  vlan_tag_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::vlan_tag() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.vlan_tag)
  return vlan_tag_;
}
inline void ipv6_nd_if_entry::set_vlan_tag(::google::protobuf::uint32 value) {
  
  vlan_tag_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.vlan_tag)
}

// uint32 mac_addr_size = 55;
inline void ipv6_nd_if_entry::clear_mac_addr_size() {
  mac_addr_size_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::mac_addr_size() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr_size)
  return mac_addr_size_;
}
inline void ipv6_nd_if_entry::set_mac_addr_size(::google::protobuf::uint32 value) {
  
  mac_addr_size_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr_size)
}

// string mac_addr = 56;
inline void ipv6_nd_if_entry::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_entry::mac_addr() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
  return mac_addr_.GetNoArena();
}
inline void ipv6_nd_if_entry::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
}
#if LANG_CXX11
inline void ipv6_nd_if_entry::set_mac_addr(::std::string&& value) {
  
  mac_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
}
#endif
inline void ipv6_nd_if_entry::set_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
}
inline void ipv6_nd_if_entry::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
}
inline ::std::string* ipv6_nd_if_entry::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_entry::release_mac_addr() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_entry::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr)
}

// bool is_interface_enabled = 57;
inline void ipv6_nd_if_entry::clear_is_interface_enabled() {
  is_interface_enabled_ = false;
}
inline bool ipv6_nd_if_entry::is_interface_enabled() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_interface_enabled)
  return is_interface_enabled_;
}
inline void ipv6_nd_if_entry::set_is_interface_enabled(bool value) {
  
  is_interface_enabled_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_interface_enabled)
}

// bool is_ipv6_enabled = 58;
inline void ipv6_nd_if_entry::clear_is_ipv6_enabled() {
  is_ipv6_enabled_ = false;
}
inline bool ipv6_nd_if_entry::is_ipv6_enabled() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_ipv6_enabled)
  return is_ipv6_enabled_;
}
inline void ipv6_nd_if_entry::set_is_ipv6_enabled(bool value) {
  
  is_ipv6_enabled_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_ipv6_enabled)
}

// bool is_mpls_enabled = 59;
inline void ipv6_nd_if_entry::clear_is_mpls_enabled() {
  is_mpls_enabled_ = false;
}
inline bool ipv6_nd_if_entry::is_mpls_enabled() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_mpls_enabled)
  return is_mpls_enabled_;
}
inline void ipv6_nd_if_entry::set_is_mpls_enabled(bool value) {
  
  is_mpls_enabled_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.is_mpls_enabled)
}

// .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
inline bool ipv6_nd_if_entry::has_nd_parameters() const {
  return this != internal_default_instance() && nd_parameters_ != NULL;
}
inline void ipv6_nd_if_entry::clear_nd_parameters() {
  if (GetArenaNoVirtual() == NULL && nd_parameters_ != NULL) {
    delete nd_parameters_;
  }
  nd_parameters_ = NULL;
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params& ipv6_nd_if_entry::nd_parameters() const {
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* p = nd_parameters_;
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.nd_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params*>(
      &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_params_default_instance_);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* ipv6_nd_if_entry::release_nd_parameters() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.nd_parameters)
  
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* temp = nd_parameters_;
  nd_parameters_ = NULL;
  return temp;
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* ipv6_nd_if_entry::mutable_nd_parameters() {
  
  if (nd_parameters_ == NULL) {
    nd_parameters_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params;
  }
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.nd_parameters)
  return nd_parameters_;
}
inline void ipv6_nd_if_entry::set_allocated_nd_parameters(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params* nd_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nd_parameters_;
  }
  if (nd_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nd_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nd_parameters, submessage_arena);
    }
    
  } else {
    
  }
  nd_parameters_ = nd_parameters;
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.nd_parameters)
}

// repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
inline int ipv6_nd_if_entry::global_address_list_size() const {
  return global_address_list_.size();
}
inline void ipv6_nd_if_entry::clear_global_address_list() {
  global_address_list_.Clear();
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr& ipv6_nd_if_entry::global_address_list(int index) const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list)
  return global_address_list_.Get(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* ipv6_nd_if_entry::mutable_global_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list)
  return global_address_list_.Mutable(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* ipv6_nd_if_entry::add_global_address_list() {
  // @@protoc_insertion_point(field_add:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list)
  return global_address_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr >*
ipv6_nd_if_entry::mutable_global_address_list() {
  // @@protoc_insertion_point(field_mutable_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list)
  return &global_address_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr >&
ipv6_nd_if_entry::global_address_list() const {
  // @@protoc_insertion_point(field_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list)
  return global_address_list_;
}

// .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
inline bool ipv6_nd_if_entry::has_local_address() const {
  return this != internal_default_instance() && local_address_ != NULL;
}
inline void ipv6_nd_if_entry::clear_local_address() {
  if (GetArenaNoVirtual() == NULL && local_address_ != NULL) {
    delete local_address_;
  }
  local_address_ = NULL;
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr& ipv6_nd_if_entry::local_address() const {
  const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* p = local_address_;
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.local_address)
  return p != NULL ? *p : *reinterpret_cast<const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr*>(
      &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_addr_default_instance_);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* ipv6_nd_if_entry::release_local_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.local_address)
  
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* temp = local_address_;
  local_address_ = NULL;
  return temp;
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* ipv6_nd_if_entry::mutable_local_address() {
  
  if (local_address_ == NULL) {
    local_address_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr;
  }
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.local_address)
  return local_address_;
}
inline void ipv6_nd_if_entry::set_allocated_local_address(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr* local_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_address_;
  }
  if (local_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_address, submessage_arena);
    }
    
  } else {
    
  }
  local_address_ = local_address;
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.local_address)
}

// repeated uint32 member_link_list = 63;
inline int ipv6_nd_if_entry::member_link_list_size() const {
  return member_link_list_.size();
}
inline void ipv6_nd_if_entry::clear_member_link_list() {
  member_link_list_.Clear();
}
inline ::google::protobuf::uint32 ipv6_nd_if_entry::member_link_list(int index) const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_link_list)
  return member_link_list_.Get(index);
}
inline void ipv6_nd_if_entry::set_member_link_list(int index, ::google::protobuf::uint32 value) {
  member_link_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_link_list)
}
inline void ipv6_nd_if_entry::add_member_link_list(::google::protobuf::uint32 value) {
  member_link_list_.Add(value);
  // @@protoc_insertion_point(field_add:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_link_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ipv6_nd_if_entry::member_link_list() const {
  // @@protoc_insertion_point(field_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_link_list)
  return member_link_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ipv6_nd_if_entry::mutable_member_link_list() {
  // @@protoc_insertion_point(field_mutable_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_link_list)
  return &member_link_list_;
}

// repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
inline int ipv6_nd_if_entry::member_node_list_size() const {
  return member_node_list_.size();
}
inline void ipv6_nd_if_entry::clear_member_node_list() {
  member_node_list_.Clear();
}
inline const ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode& ipv6_nd_if_entry::member_node_list(int index) const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list)
  return member_node_list_.Get(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode* ipv6_nd_if_entry::mutable_member_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list)
  return member_node_list_.Mutable(index);
}
inline ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode* ipv6_nd_if_entry::add_member_node_list() {
  // @@protoc_insertion_point(field_add:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list)
  return member_node_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode >*
ipv6_nd_if_entry::mutable_member_node_list() {
  // @@protoc_insertion_point(field_mutable_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list)
  return &member_node_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode >&
ipv6_nd_if_entry::member_node_list() const {
  // @@protoc_insertion_point(field_list:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list)
  return member_node_list_;
}

// -------------------------------------------------------------------

// ipv6_nd_if_params

// bool is_dad_enabled = 1;
inline void ipv6_nd_if_params::clear_is_dad_enabled() {
  is_dad_enabled_ = false;
}
inline bool ipv6_nd_if_params::is_dad_enabled() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_dad_enabled)
  return is_dad_enabled_;
}
inline void ipv6_nd_if_params::set_is_dad_enabled(bool value) {
  
  is_dad_enabled_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_dad_enabled)
}

// uint32 dad_attempts = 2;
inline void ipv6_nd_if_params::clear_dad_attempts() {
  dad_attempts_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dad_attempts() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dad_attempts)
  return dad_attempts_;
}
inline void ipv6_nd_if_params::set_dad_attempts(::google::protobuf::uint32 value) {
  
  dad_attempts_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dad_attempts)
}

// bool is_icm_pv6_redirect = 3;
inline void ipv6_nd_if_params::clear_is_icm_pv6_redirect() {
  is_icm_pv6_redirect_ = false;
}
inline bool ipv6_nd_if_params::is_icm_pv6_redirect() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_icm_pv6_redirect)
  return is_icm_pv6_redirect_;
}
inline void ipv6_nd_if_params::set_is_icm_pv6_redirect(bool value) {
  
  is_icm_pv6_redirect_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_icm_pv6_redirect)
}

// bool is_dhcp_managed = 4;
inline void ipv6_nd_if_params::clear_is_dhcp_managed() {
  is_dhcp_managed_ = false;
}
inline bool ipv6_nd_if_params::is_dhcp_managed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_dhcp_managed)
  return is_dhcp_managed_;
}
inline void ipv6_nd_if_params::set_is_dhcp_managed(bool value) {
  
  is_dhcp_managed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_dhcp_managed)
}

// bool is_route_address_managed = 5;
inline void ipv6_nd_if_params::clear_is_route_address_managed() {
  is_route_address_managed_ = false;
}
inline bool ipv6_nd_if_params::is_route_address_managed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_route_address_managed)
  return is_route_address_managed_;
}
inline void ipv6_nd_if_params::set_is_route_address_managed(bool value) {
  
  is_route_address_managed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_route_address_managed)
}

// bool is_suppressed = 6;
inline void ipv6_nd_if_params::clear_is_suppressed() {
  is_suppressed_ = false;
}
inline bool ipv6_nd_if_params::is_suppressed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_suppressed)
  return is_suppressed_;
}
inline void ipv6_nd_if_params::set_is_suppressed(bool value) {
  
  is_suppressed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.is_suppressed)
}

// uint32 nd_retransmit_interval = 7;
inline void ipv6_nd_if_params::clear_nd_retransmit_interval() {
  nd_retransmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_retransmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_retransmit_interval)
  return nd_retransmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_retransmit_interval(::google::protobuf::uint32 value) {
  
  nd_retransmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_retransmit_interval)
}

// uint32 nd_min_transmit_interval = 8;
inline void ipv6_nd_if_params::clear_nd_min_transmit_interval() {
  nd_min_transmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_min_transmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_min_transmit_interval)
  return nd_min_transmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_min_transmit_interval(::google::protobuf::uint32 value) {
  
  nd_min_transmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_min_transmit_interval)
}

// uint32 nd_max_transmit_interval = 9;
inline void ipv6_nd_if_params::clear_nd_max_transmit_interval() {
  nd_max_transmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_max_transmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_max_transmit_interval)
  return nd_max_transmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_max_transmit_interval(::google::protobuf::uint32 value) {
  
  nd_max_transmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_max_transmit_interval)
}

// uint32 nd_advertisement_lifetime = 10;
inline void ipv6_nd_if_params::clear_nd_advertisement_lifetime() {
  nd_advertisement_lifetime_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_advertisement_lifetime() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_advertisement_lifetime)
  return nd_advertisement_lifetime_;
}
inline void ipv6_nd_if_params::set_nd_advertisement_lifetime(::google::protobuf::uint32 value) {
  
  nd_advertisement_lifetime_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_advertisement_lifetime)
}

// uint32 nd_reachable_time = 11;
inline void ipv6_nd_if_params::clear_nd_reachable_time() {
  nd_reachable_time_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_reachable_time() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_reachable_time)
  return nd_reachable_time_;
}
inline void ipv6_nd_if_params::set_nd_reachable_time(::google::protobuf::uint32 value) {
  
  nd_reachable_time_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_reachable_time)
}

// uint32 nd_cache_limit = 12;
inline void ipv6_nd_if_params::clear_nd_cache_limit() {
  nd_cache_limit_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_cache_limit() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_cache_limit)
  return nd_cache_limit_;
}
inline void ipv6_nd_if_params::set_nd_cache_limit(::google::protobuf::uint32 value) {
  
  nd_cache_limit_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.nd_cache_limit)
}

// uint32 complete_protocol_count = 13;
inline void ipv6_nd_if_params::clear_complete_protocol_count() {
  complete_protocol_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::complete_protocol_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.complete_protocol_count)
  return complete_protocol_count_;
}
inline void ipv6_nd_if_params::set_complete_protocol_count(::google::protobuf::uint32 value) {
  
  complete_protocol_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.complete_protocol_count)
}

// uint32 complete_glean_count = 14;
inline void ipv6_nd_if_params::clear_complete_glean_count() {
  complete_glean_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::complete_glean_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.complete_glean_count)
  return complete_glean_count_;
}
inline void ipv6_nd_if_params::set_complete_glean_count(::google::protobuf::uint32 value) {
  
  complete_glean_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.complete_glean_count)
}

// uint32 incomplete_protocol_count = 15;
inline void ipv6_nd_if_params::clear_incomplete_protocol_count() {
  incomplete_protocol_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::incomplete_protocol_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.incomplete_protocol_count)
  return incomplete_protocol_count_;
}
inline void ipv6_nd_if_params::set_incomplete_protocol_count(::google::protobuf::uint32 value) {
  
  incomplete_protocol_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.incomplete_protocol_count)
}

// uint32 incomplete_glean_count = 16;
inline void ipv6_nd_if_params::clear_incomplete_glean_count() {
  incomplete_glean_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::incomplete_glean_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.incomplete_glean_count)
  return incomplete_glean_count_;
}
inline void ipv6_nd_if_params::set_incomplete_glean_count(::google::protobuf::uint32 value) {
  
  incomplete_glean_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.incomplete_glean_count)
}

// uint32 dropped_protocol_req_count = 17;
inline void ipv6_nd_if_params::clear_dropped_protocol_req_count() {
  dropped_protocol_req_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dropped_protocol_req_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dropped_protocol_req_count)
  return dropped_protocol_req_count_;
}
inline void ipv6_nd_if_params::set_dropped_protocol_req_count(::google::protobuf::uint32 value) {
  
  dropped_protocol_req_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dropped_protocol_req_count)
}

// uint32 dropped_glean_req_count = 18;
inline void ipv6_nd_if_params::clear_dropped_glean_req_count() {
  dropped_glean_req_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dropped_glean_req_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dropped_glean_req_count)
  return dropped_glean_req_count_;
}
inline void ipv6_nd_if_params::set_dropped_glean_req_count(::google::protobuf::uint32 value) {
  
  dropped_glean_req_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params.dropped_glean_req_count)
}

// -------------------------------------------------------------------

// ipv6_nd_addr

// string ipv6_address = 1;
inline void ipv6_nd_addr::clear_ipv6_address() {
  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_addr::ipv6_address() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
  return ipv6_address_.GetNoArena();
}
inline void ipv6_nd_addr::set_ipv6_address(const ::std::string& value) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
}
#if LANG_CXX11
inline void ipv6_nd_addr::set_ipv6_address(::std::string&& value) {
  
  ipv6_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
}
#endif
inline void ipv6_nd_addr::set_ipv6_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
}
inline void ipv6_nd_addr::set_ipv6_address(const char* value, size_t size) {
  
  ipv6_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
}
inline ::std::string* ipv6_nd_addr::mutable_ipv6_address() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
  return ipv6_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_addr::release_ipv6_address() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
  
  return ipv6_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_addr::set_allocated_ipv6_address(::std::string* ipv6_address) {
  if (ipv6_address != NULL) {
    
  } else {
    
  }
  ipv6_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_address);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address)
}

// -------------------------------------------------------------------

// ipv6_nd_gspnode

// string node_name = 1;
inline void ipv6_nd_gspnode::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_gspnode::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_gspnode::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_gspnode::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
}
#endif
inline void ipv6_nd_gspnode::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
}
inline void ipv6_nd_gspnode::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
}
inline ::std::string* ipv6_nd_gspnode::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_gspnode::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_gspnode::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name)
}

// uint32 total_links = 2;
inline void ipv6_nd_gspnode::clear_total_links() {
  total_links_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_gspnode::total_links() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.total_links)
  return total_links_;
}
inline void ipv6_nd_gspnode::set_total_links(::google::protobuf::uint32 value) {
  
  total_links_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.total_links)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bundle_interface
}  // namespace bundle_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto__INCLUDED
