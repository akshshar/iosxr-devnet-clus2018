// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_summary/ipv6_nd_neighbor_entry_summary.proto

#include "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_summary/ipv6_nd_neighbor_entry_summary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace neighbor_summary {
class ipv6_nd_neighbor_entry_summary_KEYSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_neighbor_entry_summary_KEYS>
      _instance;
} _ipv6_nd_neighbor_entry_summary_KEYS_default_instance_;
class ipv6_nd_neighbor_entry_summaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_neighbor_entry_summary>
      _instance;
} _ipv6_nd_neighbor_entry_summary_default_instance_;
class bag_nbr_entry_sumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bag_nbr_entry_sum>
      _instance;
} _bag_nbr_entry_sum_default_instance_;
}  // namespace neighbor_summary
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto {
void InitDefaultsipv6_nd_neighbor_entry_summary_KEYSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_KEYS_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary_KEYS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary_KEYS::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_neighbor_entry_summary_KEYS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_neighbor_entry_summary_KEYSImpl);
}

void InitDefaultsipv6_nd_neighbor_entry_summaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsbag_nbr_entry_sum();
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_neighbor_entry_summary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_neighbor_entry_summaryImpl);
}

void InitDefaultsbag_nbr_entry_sumImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_bag_nbr_entry_sum_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::InitAsDefaultInstance();
}

void InitDefaultsbag_nbr_entry_sum() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsbag_nbr_entry_sumImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary_KEYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary_KEYS, node_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary, multicast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary, static__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary, dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary, total_neighbor_entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, incomplete_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, reachable_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, stale_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, delayed_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, probe_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, deleted_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum, subtotal_neighbor_entries_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary_KEYS)},
  { 6, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::ipv6_nd_neighbor_entry_summary)},
  { 15, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_KEYS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_bag_nbr_entry_sum_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_summary/ipv6_nd_neighbor_entry_summary.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nncisco_ios_xr_ipv6_nd_oper/ipv6_node_di"
      "scovery/nodes/node/neighbor_summary/ipv6"
      "_nd_neighbor_entry_summary.proto\022Icisco_"
      "ios_xr_ipv6_nd_oper.ipv6_node_discovery."
      "nodes.node.neighbor_summary\"8\n#ipv6_nd_n"
      "eighbor_entry_summary_KEYS\022\021\n\tnode_name\030"
      "\001 \001(\t\"\216\003\n\036ipv6_nd_neighbor_entry_summary"
      "\022o\n\tmulticast\0302 \001(\0132\\.cisco_ios_xr_ipv6_"
      "nd_oper.ipv6_node_discovery.nodes.node.n"
      "eighbor_summary.bag_nbr_entry_sum\022l\n\006sta"
      "tic\0303 \001(\0132\\.cisco_ios_xr_ipv6_nd_oper.ip"
      "v6_node_discovery.nodes.node.neighbor_su"
      "mmary.bag_nbr_entry_sum\022m\n\007dynamic\0304 \001(\013"
      "2\\.cisco_ios_xr_ipv6_nd_oper.ipv6_node_d"
      "iscovery.nodes.node.neighbor_summary.bag"
      "_nbr_entry_sum\022\036\n\026total_neighbor_entries"
      "\0305 \001(\r\"\315\001\n\021bag_nbr_entry_sum\022\032\n\022incomple"
      "te_entries\030\001 \001(\r\022\031\n\021reachable_entries\030\002 "
      "\001(\r\022\025\n\rstale_entries\030\003 \001(\r\022\027\n\017delayed_en"
      "tries\030\004 \001(\r\022\025\n\rprobe_entries\030\005 \001(\r\022\027\n\017de"
      "leted_entries\030\006 \001(\r\022!\n\031subtotal_neighbor"
      "_entries\030\007 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_summary/ipv6_nd_neighbor_entry_summary.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace neighbor_summary {

// ===================================================================

void ipv6_nd_neighbor_entry_summary_KEYS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_neighbor_entry_summary_KEYS::kNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_neighbor_entry_summary_KEYS::ipv6_nd_neighbor_entry_summary_KEYS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsipv6_nd_neighbor_entry_summary_KEYS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
}
ipv6_nd_neighbor_entry_summary_KEYS::ipv6_nd_neighbor_entry_summary_KEYS(const ipv6_nd_neighbor_entry_summary_KEYS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
}

void ipv6_nd_neighbor_entry_summary_KEYS::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_neighbor_entry_summary_KEYS::~ipv6_nd_neighbor_entry_summary_KEYS() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  SharedDtor();
}

void ipv6_nd_neighbor_entry_summary_KEYS::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_neighbor_entry_summary_KEYS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_neighbor_entry_summary_KEYS::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_neighbor_entry_summary_KEYS& ipv6_nd_neighbor_entry_summary_KEYS::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsipv6_nd_neighbor_entry_summary_KEYS();
  return *internal_default_instance();
}

ipv6_nd_neighbor_entry_summary_KEYS* ipv6_nd_neighbor_entry_summary_KEYS::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_neighbor_entry_summary_KEYS* n = new ipv6_nd_neighbor_entry_summary_KEYS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_neighbor_entry_summary_KEYS::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_neighbor_entry_summary_KEYS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  return false;
#undef DO_
}

void ipv6_nd_neighbor_entry_summary_KEYS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
}

::google::protobuf::uint8* ipv6_nd_neighbor_entry_summary_KEYS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  return target;
}

size_t ipv6_nd_neighbor_entry_summary_KEYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_neighbor_entry_summary_KEYS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_neighbor_entry_summary_KEYS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_neighbor_entry_summary_KEYS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
    MergeFrom(*source);
  }
}

void ipv6_nd_neighbor_entry_summary_KEYS::MergeFrom(const ipv6_nd_neighbor_entry_summary_KEYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
}

void ipv6_nd_neighbor_entry_summary_KEYS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_neighbor_entry_summary_KEYS::CopyFrom(const ipv6_nd_neighbor_entry_summary_KEYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_neighbor_entry_summary_KEYS::IsInitialized() const {
  return true;
}

void ipv6_nd_neighbor_entry_summary_KEYS::Swap(ipv6_nd_neighbor_entry_summary_KEYS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_neighbor_entry_summary_KEYS::InternalSwap(ipv6_nd_neighbor_entry_summary_KEYS* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_neighbor_entry_summary_KEYS::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_neighbor_entry_summary::InitAsDefaultInstance() {
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_default_instance_._instance.get_mutable()->multicast_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::internal_default_instance());
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_default_instance_._instance.get_mutable()->static__ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::internal_default_instance());
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::_ipv6_nd_neighbor_entry_summary_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_neighbor_entry_summary::kMulticastFieldNumber;
const int ipv6_nd_neighbor_entry_summary::kStaticFieldNumber;
const int ipv6_nd_neighbor_entry_summary::kDynamicFieldNumber;
const int ipv6_nd_neighbor_entry_summary::kTotalNeighborEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_neighbor_entry_summary::ipv6_nd_neighbor_entry_summary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsipv6_nd_neighbor_entry_summary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
}
ipv6_nd_neighbor_entry_summary::ipv6_nd_neighbor_entry_summary(const ipv6_nd_neighbor_entry_summary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multicast()) {
    multicast_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum(*from.multicast_);
  } else {
    multicast_ = NULL;
  }
  if (from.has_static_()) {
    static__ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum(*from.static__);
  } else {
    static__ = NULL;
  }
  if (from.has_dynamic()) {
    dynamic_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum(*from.dynamic_);
  } else {
    dynamic_ = NULL;
  }
  total_neighbor_entries_ = from.total_neighbor_entries_;
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
}

void ipv6_nd_neighbor_entry_summary::SharedCtor() {
  ::memset(&multicast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_neighbor_entries_) -
      reinterpret_cast<char*>(&multicast_)) + sizeof(total_neighbor_entries_));
  _cached_size_ = 0;
}

ipv6_nd_neighbor_entry_summary::~ipv6_nd_neighbor_entry_summary() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  SharedDtor();
}

void ipv6_nd_neighbor_entry_summary::SharedDtor() {
  if (this != internal_default_instance()) delete multicast_;
  if (this != internal_default_instance()) delete static__;
  if (this != internal_default_instance()) delete dynamic_;
}

void ipv6_nd_neighbor_entry_summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_neighbor_entry_summary::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_neighbor_entry_summary& ipv6_nd_neighbor_entry_summary::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsipv6_nd_neighbor_entry_summary();
  return *internal_default_instance();
}

ipv6_nd_neighbor_entry_summary* ipv6_nd_neighbor_entry_summary::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_neighbor_entry_summary* n = new ipv6_nd_neighbor_entry_summary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_neighbor_entry_summary::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && multicast_ != NULL) {
    delete multicast_;
  }
  multicast_ = NULL;
  if (GetArenaNoVirtual() == NULL && static__ != NULL) {
    delete static__;
  }
  static__ = NULL;
  if (GetArenaNoVirtual() == NULL && dynamic_ != NULL) {
    delete dynamic_;
  }
  dynamic_ = NULL;
  total_neighbor_entries_ = 0u;
  _internal_metadata_.Clear();
}

bool ipv6_nd_neighbor_entry_summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum multicast = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multicast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum static = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_static_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum dynamic = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_neighbor_entries = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_neighbor_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  return false;
#undef DO_
}

void ipv6_nd_neighbor_entry_summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum multicast = 50;
  if (this->has_multicast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->multicast_, output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum static = 51;
  if (this->has_static_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->static__, output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum dynamic = 52;
  if (this->has_dynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->dynamic_, output);
  }

  // uint32 total_neighbor_entries = 53;
  if (this->total_neighbor_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->total_neighbor_entries(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
}

::google::protobuf::uint8* ipv6_nd_neighbor_entry_summary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum multicast = 50;
  if (this->has_multicast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, *this->multicast_, deterministic, target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum static = 51;
  if (this->has_static_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, *this->static__, deterministic, target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum dynamic = 52;
  if (this->has_dynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, *this->dynamic_, deterministic, target);
  }

  // uint32 total_neighbor_entries = 53;
  if (this->total_neighbor_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->total_neighbor_entries(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  return target;
}

size_t ipv6_nd_neighbor_entry_summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum multicast = 50;
  if (this->has_multicast()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->multicast_);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum static = 51;
  if (this->has_static_()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->static__);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum dynamic = 52;
  if (this->has_dynamic()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dynamic_);
  }

  // uint32 total_neighbor_entries = 53;
  if (this->total_neighbor_entries() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_neighbor_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_neighbor_entry_summary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_neighbor_entry_summary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_neighbor_entry_summary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
    MergeFrom(*source);
  }
}

void ipv6_nd_neighbor_entry_summary::MergeFrom(const ipv6_nd_neighbor_entry_summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multicast()) {
    mutable_multicast()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::MergeFrom(from.multicast());
  }
  if (from.has_static_()) {
    mutable_static_()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::MergeFrom(from.static_());
  }
  if (from.has_dynamic()) {
    mutable_dynamic()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::neighbor_summary::bag_nbr_entry_sum::MergeFrom(from.dynamic());
  }
  if (from.total_neighbor_entries() != 0) {
    set_total_neighbor_entries(from.total_neighbor_entries());
  }
}

void ipv6_nd_neighbor_entry_summary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_neighbor_entry_summary::CopyFrom(const ipv6_nd_neighbor_entry_summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_neighbor_entry_summary::IsInitialized() const {
  return true;
}

void ipv6_nd_neighbor_entry_summary::Swap(ipv6_nd_neighbor_entry_summary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_neighbor_entry_summary::InternalSwap(ipv6_nd_neighbor_entry_summary* other) {
  using std::swap;
  swap(multicast_, other->multicast_);
  swap(static__, other->static__);
  swap(dynamic_, other->dynamic_);
  swap(total_neighbor_entries_, other->total_neighbor_entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_neighbor_entry_summary::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bag_nbr_entry_sum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bag_nbr_entry_sum::kIncompleteEntriesFieldNumber;
const int bag_nbr_entry_sum::kReachableEntriesFieldNumber;
const int bag_nbr_entry_sum::kStaleEntriesFieldNumber;
const int bag_nbr_entry_sum::kDelayedEntriesFieldNumber;
const int bag_nbr_entry_sum::kProbeEntriesFieldNumber;
const int bag_nbr_entry_sum::kDeletedEntriesFieldNumber;
const int bag_nbr_entry_sum::kSubtotalNeighborEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bag_nbr_entry_sum::bag_nbr_entry_sum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsbag_nbr_entry_sum();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
}
bag_nbr_entry_sum::bag_nbr_entry_sum(const bag_nbr_entry_sum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&incomplete_entries_, &from.incomplete_entries_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtotal_neighbor_entries_) -
    reinterpret_cast<char*>(&incomplete_entries_)) + sizeof(subtotal_neighbor_entries_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
}

void bag_nbr_entry_sum::SharedCtor() {
  ::memset(&incomplete_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtotal_neighbor_entries_) -
      reinterpret_cast<char*>(&incomplete_entries_)) + sizeof(subtotal_neighbor_entries_));
  _cached_size_ = 0;
}

bag_nbr_entry_sum::~bag_nbr_entry_sum() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  SharedDtor();
}

void bag_nbr_entry_sum::SharedDtor() {
}

void bag_nbr_entry_sum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_nbr_entry_sum::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bag_nbr_entry_sum& bag_nbr_entry_sum::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::InitDefaultsbag_nbr_entry_sum();
  return *internal_default_instance();
}

bag_nbr_entry_sum* bag_nbr_entry_sum::New(::google::protobuf::Arena* arena) const {
  bag_nbr_entry_sum* n = new bag_nbr_entry_sum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bag_nbr_entry_sum::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&incomplete_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtotal_neighbor_entries_) -
      reinterpret_cast<char*>(&incomplete_entries_)) + sizeof(subtotal_neighbor_entries_));
  _internal_metadata_.Clear();
}

bool bag_nbr_entry_sum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 incomplete_entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incomplete_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reachable_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reachable_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stale_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stale_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delayed_entries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delayed_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 probe_entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probe_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deleted_entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deleted_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subtotal_neighbor_entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtotal_neighbor_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  return false;
#undef DO_
}

void bag_nbr_entry_sum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 incomplete_entries = 1;
  if (this->incomplete_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->incomplete_entries(), output);
  }

  // uint32 reachable_entries = 2;
  if (this->reachable_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reachable_entries(), output);
  }

  // uint32 stale_entries = 3;
  if (this->stale_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stale_entries(), output);
  }

  // uint32 delayed_entries = 4;
  if (this->delayed_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delayed_entries(), output);
  }

  // uint32 probe_entries = 5;
  if (this->probe_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->probe_entries(), output);
  }

  // uint32 deleted_entries = 6;
  if (this->deleted_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deleted_entries(), output);
  }

  // uint32 subtotal_neighbor_entries = 7;
  if (this->subtotal_neighbor_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->subtotal_neighbor_entries(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
}

::google::protobuf::uint8* bag_nbr_entry_sum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 incomplete_entries = 1;
  if (this->incomplete_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->incomplete_entries(), target);
  }

  // uint32 reachable_entries = 2;
  if (this->reachable_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reachable_entries(), target);
  }

  // uint32 stale_entries = 3;
  if (this->stale_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stale_entries(), target);
  }

  // uint32 delayed_entries = 4;
  if (this->delayed_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delayed_entries(), target);
  }

  // uint32 probe_entries = 5;
  if (this->probe_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->probe_entries(), target);
  }

  // uint32 deleted_entries = 6;
  if (this->deleted_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deleted_entries(), target);
  }

  // uint32 subtotal_neighbor_entries = 7;
  if (this->subtotal_neighbor_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->subtotal_neighbor_entries(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  return target;
}

size_t bag_nbr_entry_sum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 incomplete_entries = 1;
  if (this->incomplete_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incomplete_entries());
  }

  // uint32 reachable_entries = 2;
  if (this->reachable_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reachable_entries());
  }

  // uint32 stale_entries = 3;
  if (this->stale_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stale_entries());
  }

  // uint32 delayed_entries = 4;
  if (this->delayed_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delayed_entries());
  }

  // uint32 probe_entries = 5;
  if (this->probe_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->probe_entries());
  }

  // uint32 deleted_entries = 6;
  if (this->deleted_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deleted_entries());
  }

  // uint32 subtotal_neighbor_entries = 7;
  if (this->subtotal_neighbor_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subtotal_neighbor_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_nbr_entry_sum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  GOOGLE_DCHECK_NE(&from, this);
  const bag_nbr_entry_sum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bag_nbr_entry_sum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
    MergeFrom(*source);
  }
}

void bag_nbr_entry_sum::MergeFrom(const bag_nbr_entry_sum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.incomplete_entries() != 0) {
    set_incomplete_entries(from.incomplete_entries());
  }
  if (from.reachable_entries() != 0) {
    set_reachable_entries(from.reachable_entries());
  }
  if (from.stale_entries() != 0) {
    set_stale_entries(from.stale_entries());
  }
  if (from.delayed_entries() != 0) {
    set_delayed_entries(from.delayed_entries());
  }
  if (from.probe_entries() != 0) {
    set_probe_entries(from.probe_entries());
  }
  if (from.deleted_entries() != 0) {
    set_deleted_entries(from.deleted_entries());
  }
  if (from.subtotal_neighbor_entries() != 0) {
    set_subtotal_neighbor_entries(from.subtotal_neighbor_entries());
  }
}

void bag_nbr_entry_sum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_nbr_entry_sum::CopyFrom(const bag_nbr_entry_sum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_nbr_entry_sum::IsInitialized() const {
  return true;
}

void bag_nbr_entry_sum::Swap(bag_nbr_entry_sum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bag_nbr_entry_sum::InternalSwap(bag_nbr_entry_sum* other) {
  using std::swap;
  swap(incomplete_entries_, other->incomplete_entries_);
  swap(reachable_entries_, other->reachable_entries_);
  swap(stale_entries_, other->stale_entries_);
  swap(delayed_entries_, other->delayed_entries_);
  swap(probe_entries_, other->probe_entries_);
  swap(deleted_entries_, other->deleted_entries_);
  swap(subtotal_neighbor_entries_, other->subtotal_neighbor_entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bag_nbr_entry_sum::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fneighbor_5fsummary_2fipv6_5fnd_5fneighbor_5fentry_5fsummary_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace neighbor_summary
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)
