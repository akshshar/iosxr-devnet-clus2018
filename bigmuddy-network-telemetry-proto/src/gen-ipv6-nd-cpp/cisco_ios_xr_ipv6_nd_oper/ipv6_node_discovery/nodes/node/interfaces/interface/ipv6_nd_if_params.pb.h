// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/interfaces/interface/ipv6_nd_if_params.proto

#ifndef PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto__INCLUDED
#define PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsipv6_nd_if_params_KEYSImpl();
void InitDefaultsipv6_nd_if_params_KEYS();
void InitDefaultsipv6_nd_if_paramsImpl();
void InitDefaultsipv6_nd_if_params();
inline void InitDefaults() {
  InitDefaultsipv6_nd_if_params_KEYS();
  InitDefaultsipv6_nd_if_params();
}
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace interfaces {
namespace interface {
class ipv6_nd_if_params;
class ipv6_nd_if_paramsDefaultTypeInternal;
extern ipv6_nd_if_paramsDefaultTypeInternal _ipv6_nd_if_params_default_instance_;
class ipv6_nd_if_params_KEYS;
class ipv6_nd_if_params_KEYSDefaultTypeInternal;
extern ipv6_nd_if_params_KEYSDefaultTypeInternal _ipv6_nd_if_params_KEYS_default_instance_;
}  // namespace interface
}  // namespace interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace interfaces {
namespace interface {

// ===================================================================

class ipv6_nd_if_params_KEYS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS) */ {
 public:
  ipv6_nd_if_params_KEYS();
  virtual ~ipv6_nd_if_params_KEYS();

  ipv6_nd_if_params_KEYS(const ipv6_nd_if_params_KEYS& from);

  inline ipv6_nd_if_params_KEYS& operator=(const ipv6_nd_if_params_KEYS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_if_params_KEYS(ipv6_nd_if_params_KEYS&& from) noexcept
    : ipv6_nd_if_params_KEYS() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_if_params_KEYS& operator=(ipv6_nd_if_params_KEYS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_if_params_KEYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_if_params_KEYS* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_if_params_KEYS*>(
               &_ipv6_nd_if_params_KEYS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ipv6_nd_if_params_KEYS* other);
  friend void swap(ipv6_nd_if_params_KEYS& a, ipv6_nd_if_params_KEYS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_if_params_KEYS* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_if_params_KEYS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_if_params_KEYS& from);
  void MergeFrom(const ipv6_nd_if_params_KEYS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_if_params_KEYS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string interface_name = 2;
  void clear_interface_name();
  static const int kInterfaceNameFieldNumber = 2;
  const ::std::string& interface_name() const;
  void set_interface_name(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_name(::std::string&& value);
  #endif
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  ::std::string* mutable_interface_name();
  ::std::string* release_interface_name();
  void set_allocated_interface_name(::std::string* interface_name);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr interface_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_params_KEYSImpl();
};
// -------------------------------------------------------------------

class ipv6_nd_if_params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params) */ {
 public:
  ipv6_nd_if_params();
  virtual ~ipv6_nd_if_params();

  ipv6_nd_if_params(const ipv6_nd_if_params& from);

  inline ipv6_nd_if_params& operator=(const ipv6_nd_if_params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ipv6_nd_if_params(ipv6_nd_if_params&& from) noexcept
    : ipv6_nd_if_params() {
    *this = ::std::move(from);
  }

  inline ipv6_nd_if_params& operator=(ipv6_nd_if_params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_nd_if_params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ipv6_nd_if_params* internal_default_instance() {
    return reinterpret_cast<const ipv6_nd_if_params*>(
               &_ipv6_nd_if_params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ipv6_nd_if_params* other);
  friend void swap(ipv6_nd_if_params& a, ipv6_nd_if_params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ipv6_nd_if_params* New() const PROTOBUF_FINAL { return New(NULL); }

  ipv6_nd_if_params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ipv6_nd_if_params& from);
  void MergeFrom(const ipv6_nd_if_params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ipv6_nd_if_params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dropped_glean_req_count = 67;
  void clear_dropped_glean_req_count();
  static const int kDroppedGleanReqCountFieldNumber = 67;
  ::google::protobuf::uint32 dropped_glean_req_count() const;
  void set_dropped_glean_req_count(::google::protobuf::uint32 value);

  // uint32 dad_attempts = 51;
  void clear_dad_attempts();
  static const int kDadAttemptsFieldNumber = 51;
  ::google::protobuf::uint32 dad_attempts() const;
  void set_dad_attempts(::google::protobuf::uint32 value);

  // bool is_dad_enabled = 50;
  void clear_is_dad_enabled();
  static const int kIsDadEnabledFieldNumber = 50;
  bool is_dad_enabled() const;
  void set_is_dad_enabled(bool value);

  // bool is_icm_pv6_redirect = 52;
  void clear_is_icm_pv6_redirect();
  static const int kIsIcmPv6RedirectFieldNumber = 52;
  bool is_icm_pv6_redirect() const;
  void set_is_icm_pv6_redirect(bool value);

  // bool is_dhcp_managed = 53;
  void clear_is_dhcp_managed();
  static const int kIsDhcpManagedFieldNumber = 53;
  bool is_dhcp_managed() const;
  void set_is_dhcp_managed(bool value);

  // bool is_route_address_managed = 54;
  void clear_is_route_address_managed();
  static const int kIsRouteAddressManagedFieldNumber = 54;
  bool is_route_address_managed() const;
  void set_is_route_address_managed(bool value);

  // bool is_suppressed = 55;
  void clear_is_suppressed();
  static const int kIsSuppressedFieldNumber = 55;
  bool is_suppressed() const;
  void set_is_suppressed(bool value);

  // uint32 nd_retransmit_interval = 56;
  void clear_nd_retransmit_interval();
  static const int kNdRetransmitIntervalFieldNumber = 56;
  ::google::protobuf::uint32 nd_retransmit_interval() const;
  void set_nd_retransmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_min_transmit_interval = 57;
  void clear_nd_min_transmit_interval();
  static const int kNdMinTransmitIntervalFieldNumber = 57;
  ::google::protobuf::uint32 nd_min_transmit_interval() const;
  void set_nd_min_transmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_max_transmit_interval = 58;
  void clear_nd_max_transmit_interval();
  static const int kNdMaxTransmitIntervalFieldNumber = 58;
  ::google::protobuf::uint32 nd_max_transmit_interval() const;
  void set_nd_max_transmit_interval(::google::protobuf::uint32 value);

  // uint32 nd_advertisement_lifetime = 59;
  void clear_nd_advertisement_lifetime();
  static const int kNdAdvertisementLifetimeFieldNumber = 59;
  ::google::protobuf::uint32 nd_advertisement_lifetime() const;
  void set_nd_advertisement_lifetime(::google::protobuf::uint32 value);

  // uint32 nd_reachable_time = 60;
  void clear_nd_reachable_time();
  static const int kNdReachableTimeFieldNumber = 60;
  ::google::protobuf::uint32 nd_reachable_time() const;
  void set_nd_reachable_time(::google::protobuf::uint32 value);

  // uint32 nd_cache_limit = 61;
  void clear_nd_cache_limit();
  static const int kNdCacheLimitFieldNumber = 61;
  ::google::protobuf::uint32 nd_cache_limit() const;
  void set_nd_cache_limit(::google::protobuf::uint32 value);

  // uint32 complete_protocol_count = 62;
  void clear_complete_protocol_count();
  static const int kCompleteProtocolCountFieldNumber = 62;
  ::google::protobuf::uint32 complete_protocol_count() const;
  void set_complete_protocol_count(::google::protobuf::uint32 value);

  // uint32 complete_glean_count = 63;
  void clear_complete_glean_count();
  static const int kCompleteGleanCountFieldNumber = 63;
  ::google::protobuf::uint32 complete_glean_count() const;
  void set_complete_glean_count(::google::protobuf::uint32 value);

  // uint32 incomplete_protocol_count = 64;
  void clear_incomplete_protocol_count();
  static const int kIncompleteProtocolCountFieldNumber = 64;
  ::google::protobuf::uint32 incomplete_protocol_count() const;
  void set_incomplete_protocol_count(::google::protobuf::uint32 value);

  // uint32 incomplete_glean_count = 65;
  void clear_incomplete_glean_count();
  static const int kIncompleteGleanCountFieldNumber = 65;
  ::google::protobuf::uint32 incomplete_glean_count() const;
  void set_incomplete_glean_count(::google::protobuf::uint32 value);

  // uint32 dropped_protocol_req_count = 66;
  void clear_dropped_protocol_req_count();
  static const int kDroppedProtocolReqCountFieldNumber = 66;
  ::google::protobuf::uint32 dropped_protocol_req_count() const;
  void set_dropped_protocol_req_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dropped_glean_req_count_;
  ::google::protobuf::uint32 dad_attempts_;
  bool is_dad_enabled_;
  bool is_icm_pv6_redirect_;
  bool is_dhcp_managed_;
  bool is_route_address_managed_;
  bool is_suppressed_;
  ::google::protobuf::uint32 nd_retransmit_interval_;
  ::google::protobuf::uint32 nd_min_transmit_interval_;
  ::google::protobuf::uint32 nd_max_transmit_interval_;
  ::google::protobuf::uint32 nd_advertisement_lifetime_;
  ::google::protobuf::uint32 nd_reachable_time_;
  ::google::protobuf::uint32 nd_cache_limit_;
  ::google::protobuf::uint32 complete_protocol_count_;
  ::google::protobuf::uint32 complete_glean_count_;
  ::google::protobuf::uint32 incomplete_protocol_count_;
  ::google::protobuf::uint32 incomplete_glean_count_;
  ::google::protobuf::uint32 dropped_protocol_req_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::TableStruct;
  friend void ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto::InitDefaultsipv6_nd_if_paramsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ipv6_nd_if_params_KEYS

// string node_name = 1;
inline void ipv6_nd_if_params_KEYS::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_params_KEYS::node_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
  return node_name_.GetNoArena();
}
inline void ipv6_nd_if_params_KEYS::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
}
#if LANG_CXX11
inline void ipv6_nd_if_params_KEYS::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
}
#endif
inline void ipv6_nd_if_params_KEYS::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
}
inline void ipv6_nd_if_params_KEYS::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
}
inline ::std::string* ipv6_nd_if_params_KEYS::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_params_KEYS::release_node_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_params_KEYS::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.node_name)
}

// string interface_name = 2;
inline void ipv6_nd_if_params_KEYS::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ipv6_nd_if_params_KEYS::interface_name() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
  return interface_name_.GetNoArena();
}
inline void ipv6_nd_if_params_KEYS::set_interface_name(const ::std::string& value) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
}
#if LANG_CXX11
inline void ipv6_nd_if_params_KEYS::set_interface_name(::std::string&& value) {
  
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
}
#endif
inline void ipv6_nd_if_params_KEYS::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
}
inline void ipv6_nd_if_params_KEYS::set_interface_name(const char* value, size_t size) {
  
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
}
inline ::std::string* ipv6_nd_if_params_KEYS::mutable_interface_name() {
  
  // @@protoc_insertion_point(field_mutable:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ipv6_nd_if_params_KEYS::release_interface_name() {
  // @@protoc_insertion_point(field_release:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
  
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ipv6_nd_if_params_KEYS::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    
  } else {
    
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS.interface_name)
}

// -------------------------------------------------------------------

// ipv6_nd_if_params

// bool is_dad_enabled = 50;
inline void ipv6_nd_if_params::clear_is_dad_enabled() {
  is_dad_enabled_ = false;
}
inline bool ipv6_nd_if_params::is_dad_enabled() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_dad_enabled)
  return is_dad_enabled_;
}
inline void ipv6_nd_if_params::set_is_dad_enabled(bool value) {
  
  is_dad_enabled_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_dad_enabled)
}

// uint32 dad_attempts = 51;
inline void ipv6_nd_if_params::clear_dad_attempts() {
  dad_attempts_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dad_attempts() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dad_attempts)
  return dad_attempts_;
}
inline void ipv6_nd_if_params::set_dad_attempts(::google::protobuf::uint32 value) {
  
  dad_attempts_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dad_attempts)
}

// bool is_icm_pv6_redirect = 52;
inline void ipv6_nd_if_params::clear_is_icm_pv6_redirect() {
  is_icm_pv6_redirect_ = false;
}
inline bool ipv6_nd_if_params::is_icm_pv6_redirect() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_icm_pv6_redirect)
  return is_icm_pv6_redirect_;
}
inline void ipv6_nd_if_params::set_is_icm_pv6_redirect(bool value) {
  
  is_icm_pv6_redirect_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_icm_pv6_redirect)
}

// bool is_dhcp_managed = 53;
inline void ipv6_nd_if_params::clear_is_dhcp_managed() {
  is_dhcp_managed_ = false;
}
inline bool ipv6_nd_if_params::is_dhcp_managed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_dhcp_managed)
  return is_dhcp_managed_;
}
inline void ipv6_nd_if_params::set_is_dhcp_managed(bool value) {
  
  is_dhcp_managed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_dhcp_managed)
}

// bool is_route_address_managed = 54;
inline void ipv6_nd_if_params::clear_is_route_address_managed() {
  is_route_address_managed_ = false;
}
inline bool ipv6_nd_if_params::is_route_address_managed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_route_address_managed)
  return is_route_address_managed_;
}
inline void ipv6_nd_if_params::set_is_route_address_managed(bool value) {
  
  is_route_address_managed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_route_address_managed)
}

// bool is_suppressed = 55;
inline void ipv6_nd_if_params::clear_is_suppressed() {
  is_suppressed_ = false;
}
inline bool ipv6_nd_if_params::is_suppressed() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_suppressed)
  return is_suppressed_;
}
inline void ipv6_nd_if_params::set_is_suppressed(bool value) {
  
  is_suppressed_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.is_suppressed)
}

// uint32 nd_retransmit_interval = 56;
inline void ipv6_nd_if_params::clear_nd_retransmit_interval() {
  nd_retransmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_retransmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_retransmit_interval)
  return nd_retransmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_retransmit_interval(::google::protobuf::uint32 value) {
  
  nd_retransmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_retransmit_interval)
}

// uint32 nd_min_transmit_interval = 57;
inline void ipv6_nd_if_params::clear_nd_min_transmit_interval() {
  nd_min_transmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_min_transmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_min_transmit_interval)
  return nd_min_transmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_min_transmit_interval(::google::protobuf::uint32 value) {
  
  nd_min_transmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_min_transmit_interval)
}

// uint32 nd_max_transmit_interval = 58;
inline void ipv6_nd_if_params::clear_nd_max_transmit_interval() {
  nd_max_transmit_interval_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_max_transmit_interval() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_max_transmit_interval)
  return nd_max_transmit_interval_;
}
inline void ipv6_nd_if_params::set_nd_max_transmit_interval(::google::protobuf::uint32 value) {
  
  nd_max_transmit_interval_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_max_transmit_interval)
}

// uint32 nd_advertisement_lifetime = 59;
inline void ipv6_nd_if_params::clear_nd_advertisement_lifetime() {
  nd_advertisement_lifetime_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_advertisement_lifetime() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_advertisement_lifetime)
  return nd_advertisement_lifetime_;
}
inline void ipv6_nd_if_params::set_nd_advertisement_lifetime(::google::protobuf::uint32 value) {
  
  nd_advertisement_lifetime_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_advertisement_lifetime)
}

// uint32 nd_reachable_time = 60;
inline void ipv6_nd_if_params::clear_nd_reachable_time() {
  nd_reachable_time_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_reachable_time() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_reachable_time)
  return nd_reachable_time_;
}
inline void ipv6_nd_if_params::set_nd_reachable_time(::google::protobuf::uint32 value) {
  
  nd_reachable_time_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_reachable_time)
}

// uint32 nd_cache_limit = 61;
inline void ipv6_nd_if_params::clear_nd_cache_limit() {
  nd_cache_limit_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::nd_cache_limit() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_cache_limit)
  return nd_cache_limit_;
}
inline void ipv6_nd_if_params::set_nd_cache_limit(::google::protobuf::uint32 value) {
  
  nd_cache_limit_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.nd_cache_limit)
}

// uint32 complete_protocol_count = 62;
inline void ipv6_nd_if_params::clear_complete_protocol_count() {
  complete_protocol_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::complete_protocol_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.complete_protocol_count)
  return complete_protocol_count_;
}
inline void ipv6_nd_if_params::set_complete_protocol_count(::google::protobuf::uint32 value) {
  
  complete_protocol_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.complete_protocol_count)
}

// uint32 complete_glean_count = 63;
inline void ipv6_nd_if_params::clear_complete_glean_count() {
  complete_glean_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::complete_glean_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.complete_glean_count)
  return complete_glean_count_;
}
inline void ipv6_nd_if_params::set_complete_glean_count(::google::protobuf::uint32 value) {
  
  complete_glean_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.complete_glean_count)
}

// uint32 incomplete_protocol_count = 64;
inline void ipv6_nd_if_params::clear_incomplete_protocol_count() {
  incomplete_protocol_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::incomplete_protocol_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.incomplete_protocol_count)
  return incomplete_protocol_count_;
}
inline void ipv6_nd_if_params::set_incomplete_protocol_count(::google::protobuf::uint32 value) {
  
  incomplete_protocol_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.incomplete_protocol_count)
}

// uint32 incomplete_glean_count = 65;
inline void ipv6_nd_if_params::clear_incomplete_glean_count() {
  incomplete_glean_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::incomplete_glean_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.incomplete_glean_count)
  return incomplete_glean_count_;
}
inline void ipv6_nd_if_params::set_incomplete_glean_count(::google::protobuf::uint32 value) {
  
  incomplete_glean_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.incomplete_glean_count)
}

// uint32 dropped_protocol_req_count = 66;
inline void ipv6_nd_if_params::clear_dropped_protocol_req_count() {
  dropped_protocol_req_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dropped_protocol_req_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dropped_protocol_req_count)
  return dropped_protocol_req_count_;
}
inline void ipv6_nd_if_params::set_dropped_protocol_req_count(::google::protobuf::uint32 value) {
  
  dropped_protocol_req_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dropped_protocol_req_count)
}

// uint32 dropped_glean_req_count = 67;
inline void ipv6_nd_if_params::clear_dropped_glean_req_count() {
  dropped_glean_req_count_ = 0u;
}
inline ::google::protobuf::uint32 ipv6_nd_if_params::dropped_glean_req_count() const {
  // @@protoc_insertion_point(field_get:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dropped_glean_req_count)
  return dropped_glean_req_count_;
}
inline void ipv6_nd_if_params::set_dropped_glean_req_count(::google::protobuf::uint32 value) {
  
  dropped_glean_req_count_ = value;
  // @@protoc_insertion_point(field_set:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params.dropped_glean_req_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interface
}  // namespace interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2finterfaces_2finterface_2fipv6_5fnd_5fif_5fparams_2eproto__INCLUDED
