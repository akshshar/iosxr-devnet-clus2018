// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_nodes/bundle_node/ipv6_nd_bl_node_entry.proto

#include "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_nodes/bundle_node/ipv6_nd_bl_node_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_nodes {
namespace bundle_node {
class ipv6_nd_bl_node_entry_KEYSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_bl_node_entry_KEYS>
      _instance;
} _ipv6_nd_bl_node_entry_KEYS_default_instance_;
class ipv6_nd_bl_node_entryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_bl_node_entry>
      _instance;
} _ipv6_nd_bl_node_entry_default_instance_;
class bag_timespecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bag_timespec>
      _instance;
} _bag_timespec_default_instance_;
}  // namespace bundle_node
}  // namespace bundle_nodes
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto {
void InitDefaultsipv6_nd_bl_node_entry_KEYSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_ipv6_nd_bl_node_entry_KEYS_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_bl_node_entry_KEYS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_bl_node_entry_KEYSImpl);
}

void InitDefaultsipv6_nd_bl_node_entryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsbag_timespec();
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_ipv6_nd_bl_node_entry_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_bl_node_entry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_bl_node_entryImpl);
}

void InitDefaultsbag_timespecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_bag_timespec_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec::InitAsDefaultInstance();
}

void InitDefaultsbag_timespec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsbag_timespecImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS, node_name_1_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, process_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, sent_sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, received_sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, state_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, sent_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry, received_packets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec, seconds_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry_KEYS)},
  { 7, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::ipv6_nd_bl_node_entry)},
  { 21, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_ipv6_nd_bl_node_entry_KEYS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_ipv6_nd_bl_node_entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_bag_timespec_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_nodes/bundle_node/ipv6_nd_bl_node_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nmcisco_ios_xr_ipv6_nd_oper/ipv6_node_di"
      "scovery/nodes/node/bundle_nodes/bundle_n"
      "ode/ipv6_nd_bl_node_entry.proto\022Qcisco_i"
      "os_xr_ipv6_nd_oper.ipv6_node_discovery.n"
      "odes.node.bundle_nodes.bundle_node\"D\n\032ip"
      "v6_nd_bl_node_entry_KEYS\022\021\n\tnode_name\030\001 "
      "\001(\t\022\023\n\013node_name_1\030\002 \001(\t\"\303\002\n\025ipv6_nd_bl_"
      "node_entry\022\020\n\010group_id\0302 \001(\r\022\024\n\014process_"
      "name\0303 \001(\t\022l\n\003age\0304 \001(\0132_.cisco_ios_xr_i"
      "pv6_nd_oper.ipv6_node_discovery.nodes.no"
      "de.bundle_nodes.bundle_node.bag_timespec"
      "\022\034\n\024sent_sequence_number\0305 \001(\r\022 \n\030receiv"
      "ed_sequence_number\0306 \001(\r\022\r\n\005state\0307 \001(\t\022"
      "\025\n\rstate_changes\0308 \001(\r\022\024\n\014sent_packets\0309"
      " \001(\r\022\030\n\020received_packets\030: \001(\r\"\037\n\014bag_ti"
      "mespec\022\017\n\007seconds\030\001 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_nodes/bundle_node/ipv6_nd_bl_node_entry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_nodes {
namespace bundle_node {

// ===================================================================

void ipv6_nd_bl_node_entry_KEYS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_bl_node_entry_KEYS::kNodeNameFieldNumber;
const int ipv6_nd_bl_node_entry_KEYS::kNodeName1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_bl_node_entry_KEYS::ipv6_nd_bl_node_entry_KEYS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entry_KEYS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
}
ipv6_nd_bl_node_entry_KEYS::ipv6_nd_bl_node_entry_KEYS(const ipv6_nd_bl_node_entry_KEYS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  node_name_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name_1().size() > 0) {
    node_name_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_1_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
}

void ipv6_nd_bl_node_entry_KEYS::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_bl_node_entry_KEYS::~ipv6_nd_bl_node_entry_KEYS() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  SharedDtor();
}

void ipv6_nd_bl_node_entry_KEYS::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_bl_node_entry_KEYS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_bl_node_entry_KEYS::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_bl_node_entry_KEYS& ipv6_nd_bl_node_entry_KEYS::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entry_KEYS();
  return *internal_default_instance();
}

ipv6_nd_bl_node_entry_KEYS* ipv6_nd_bl_node_entry_KEYS::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_bl_node_entry_KEYS* n = new ipv6_nd_bl_node_entry_KEYS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_bl_node_entry_KEYS::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_bl_node_entry_KEYS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_name_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name_1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name_1().data(), static_cast<int>(this->node_name_1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  return false;
#undef DO_
}

void ipv6_nd_bl_node_entry_KEYS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // string node_name_1 = 2;
  if (this->node_name_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name_1().data(), static_cast<int>(this->node_name_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_name_1(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
}

::google::protobuf::uint8* ipv6_nd_bl_node_entry_KEYS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // string node_name_1 = 2;
  if (this->node_name_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name_1().data(), static_cast<int>(this->node_name_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS.node_name_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_name_1(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  return target;
}

size_t ipv6_nd_bl_node_entry_KEYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string node_name_1 = 2;
  if (this->node_name_1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name_1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_bl_node_entry_KEYS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_bl_node_entry_KEYS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_bl_node_entry_KEYS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
    MergeFrom(*source);
  }
}

void ipv6_nd_bl_node_entry_KEYS::MergeFrom(const ipv6_nd_bl_node_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.node_name_1().size() > 0) {

    node_name_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_1_);
  }
}

void ipv6_nd_bl_node_entry_KEYS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_bl_node_entry_KEYS::CopyFrom(const ipv6_nd_bl_node_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_bl_node_entry_KEYS::IsInitialized() const {
  return true;
}

void ipv6_nd_bl_node_entry_KEYS::Swap(ipv6_nd_bl_node_entry_KEYS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_bl_node_entry_KEYS::InternalSwap(ipv6_nd_bl_node_entry_KEYS* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  node_name_1_.Swap(&other->node_name_1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_bl_node_entry_KEYS::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_bl_node_entry::InitAsDefaultInstance() {
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::_ipv6_nd_bl_node_entry_default_instance_._instance.get_mutable()->age_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_bl_node_entry::kGroupIdFieldNumber;
const int ipv6_nd_bl_node_entry::kProcessNameFieldNumber;
const int ipv6_nd_bl_node_entry::kAgeFieldNumber;
const int ipv6_nd_bl_node_entry::kSentSequenceNumberFieldNumber;
const int ipv6_nd_bl_node_entry::kReceivedSequenceNumberFieldNumber;
const int ipv6_nd_bl_node_entry::kStateFieldNumber;
const int ipv6_nd_bl_node_entry::kStateChangesFieldNumber;
const int ipv6_nd_bl_node_entry::kSentPacketsFieldNumber;
const int ipv6_nd_bl_node_entry::kReceivedPacketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_bl_node_entry::ipv6_nd_bl_node_entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
}
ipv6_nd_bl_node_entry::ipv6_nd_bl_node_entry(const ipv6_nd_bl_node_entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_age()) {
    age_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec(*from.age_);
  } else {
    age_ = NULL;
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_packets_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(received_packets_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
}

void ipv6_nd_bl_node_entry::SharedCtor() {
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_packets_) -
      reinterpret_cast<char*>(&age_)) + sizeof(received_packets_));
  _cached_size_ = 0;
}

ipv6_nd_bl_node_entry::~ipv6_nd_bl_node_entry() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  SharedDtor();
}

void ipv6_nd_bl_node_entry::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete age_;
}

void ipv6_nd_bl_node_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_bl_node_entry::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_bl_node_entry& ipv6_nd_bl_node_entry::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsipv6_nd_bl_node_entry();
  return *internal_default_instance();
}

ipv6_nd_bl_node_entry* ipv6_nd_bl_node_entry::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_bl_node_entry* n = new ipv6_nd_bl_node_entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_bl_node_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && age_ != NULL) {
    delete age_;
  }
  age_ = NULL;
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_packets_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(received_packets_));
  _internal_metadata_.Clear();
}

bool ipv6_nd_bl_node_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_name = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sent_sequence_number = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 received_sequence_number = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state_changes = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sent_packets = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 received_packets = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  return false;
#undef DO_
}

void ipv6_nd_bl_node_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 50;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->group_id(), output);
  }

  // string process_name = 51;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->process_name(), output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
  if (this->has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->age_, output);
  }

  // uint32 sent_sequence_number = 53;
  if (this->sent_sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->sent_sequence_number(), output);
  }

  // uint32 received_sequence_number = 54;
  if (this->received_sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->received_sequence_number(), output);
  }

  // string state = 55;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->state(), output);
  }

  // uint32 state_changes = 56;
  if (this->state_changes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->state_changes(), output);
  }

  // uint32 sent_packets = 57;
  if (this->sent_packets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->sent_packets(), output);
  }

  // uint32 received_packets = 58;
  if (this->received_packets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->received_packets(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
}

::google::protobuf::uint8* ipv6_nd_bl_node_entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 50;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->group_id(), target);
  }

  // string process_name = 51;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->process_name(), target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
  if (this->has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, *this->age_, deterministic, target);
  }

  // uint32 sent_sequence_number = 53;
  if (this->sent_sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->sent_sequence_number(), target);
  }

  // uint32 received_sequence_number = 54;
  if (this->received_sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->received_sequence_number(), target);
  }

  // string state = 55;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->state(), target);
  }

  // uint32 state_changes = 56;
  if (this->state_changes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->state_changes(), target);
  }

  // uint32 sent_packets = 57;
  if (this->sent_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->sent_packets(), target);
  }

  // uint32 received_packets = 58;
  if (this->received_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->received_packets(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  return target;
}

size_t ipv6_nd_bl_node_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string process_name = 51;
  if (this->process_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // string state = 55;
  if (this->state().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec age = 52;
  if (this->has_age()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->age_);
  }

  // uint32 group_id = 50;
  if (this->group_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 sent_sequence_number = 53;
  if (this->sent_sequence_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent_sequence_number());
  }

  // uint32 received_sequence_number = 54;
  if (this->received_sequence_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received_sequence_number());
  }

  // uint32 state_changes = 56;
  if (this->state_changes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_changes());
  }

  // uint32 sent_packets = 57;
  if (this->sent_packets() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent_packets());
  }

  // uint32 received_packets = 58;
  if (this->received_packets() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received_packets());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_bl_node_entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_bl_node_entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_bl_node_entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
    MergeFrom(*source);
  }
}

void ipv6_nd_bl_node_entry::MergeFrom(const ipv6_nd_bl_node_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {

    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_age()) {
    mutable_age()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_nodes::bundle_node::bag_timespec::MergeFrom(from.age());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.sent_sequence_number() != 0) {
    set_sent_sequence_number(from.sent_sequence_number());
  }
  if (from.received_sequence_number() != 0) {
    set_received_sequence_number(from.received_sequence_number());
  }
  if (from.state_changes() != 0) {
    set_state_changes(from.state_changes());
  }
  if (from.sent_packets() != 0) {
    set_sent_packets(from.sent_packets());
  }
  if (from.received_packets() != 0) {
    set_received_packets(from.received_packets());
  }
}

void ipv6_nd_bl_node_entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_bl_node_entry::CopyFrom(const ipv6_nd_bl_node_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.ipv6_nd_bl_node_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_bl_node_entry::IsInitialized() const {
  return true;
}

void ipv6_nd_bl_node_entry::Swap(ipv6_nd_bl_node_entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_bl_node_entry::InternalSwap(ipv6_nd_bl_node_entry* other) {
  using std::swap;
  process_name_.Swap(&other->process_name_);
  state_.Swap(&other->state_);
  swap(age_, other->age_);
  swap(group_id_, other->group_id_);
  swap(sent_sequence_number_, other->sent_sequence_number_);
  swap(received_sequence_number_, other->received_sequence_number_);
  swap(state_changes_, other->state_changes_);
  swap(sent_packets_, other->sent_packets_);
  swap(received_packets_, other->received_packets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_bl_node_entry::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bag_timespec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bag_timespec::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bag_timespec::bag_timespec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsbag_timespec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
}
bag_timespec::bag_timespec(const bag_timespec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_ = from.seconds_;
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
}

void bag_timespec::SharedCtor() {
  seconds_ = 0u;
  _cached_size_ = 0;
}

bag_timespec::~bag_timespec() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  SharedDtor();
}

void bag_timespec::SharedDtor() {
}

void bag_timespec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_timespec::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bag_timespec& bag_timespec::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::InitDefaultsbag_timespec();
  return *internal_default_instance();
}

bag_timespec* bag_timespec::New(::google::protobuf::Arena* arena) const {
  bag_timespec* n = new bag_timespec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bag_timespec::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_ = 0u;
  _internal_metadata_.Clear();
}

bool bag_timespec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  return false;
#undef DO_
}

void bag_timespec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
}

::google::protobuf::uint8* bag_timespec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  return target;
}

size_t bag_timespec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_timespec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  GOOGLE_DCHECK_NE(&from, this);
  const bag_timespec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bag_timespec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
    MergeFrom(*source);
  }
}

void bag_timespec::MergeFrom(const bag_timespec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
}

void bag_timespec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_timespec::CopyFrom(const bag_timespec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_nodes.bundle_node.bag_timespec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_timespec::IsInitialized() const {
  return true;
}

void bag_timespec::Swap(bag_timespec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bag_timespec::InternalSwap(bag_timespec* other) {
  using std::swap;
  swap(seconds_, other->seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bag_timespec::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5fnodes_2fbundle_5fnode_2fipv6_5fnd_5fbl_5fnode_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bundle_node
}  // namespace bundle_nodes
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)
