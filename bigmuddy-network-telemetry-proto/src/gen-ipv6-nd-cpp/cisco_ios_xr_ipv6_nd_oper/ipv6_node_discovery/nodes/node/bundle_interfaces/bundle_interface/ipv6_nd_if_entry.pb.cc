// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.proto

#include "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_interfaces {
namespace bundle_interface {
class ipv6_nd_if_entry_KEYSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_if_entry_KEYS>
      _instance;
} _ipv6_nd_if_entry_KEYS_default_instance_;
class ipv6_nd_if_entryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_if_entry>
      _instance;
} _ipv6_nd_if_entry_default_instance_;
class ipv6_nd_if_paramsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_if_params>
      _instance;
} _ipv6_nd_if_params_default_instance_;
class ipv6_nd_addrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_addr>
      _instance;
} _ipv6_nd_addr_default_instance_;
class ipv6_nd_gspnodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ipv6_nd_gspnode>
      _instance;
} _ipv6_nd_gspnode_default_instance_;
}  // namespace bundle_interface
}  // namespace bundle_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper
namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto {
void InitDefaultsipv6_nd_if_entry_KEYSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_KEYS_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_if_entry_KEYS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_if_entry_KEYSImpl);
}

void InitDefaultsipv6_nd_if_entryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_params();
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_gspnode();
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_if_entry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_if_entryImpl);
}

void InitDefaultsipv6_nd_if_paramsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_params_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_if_params() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_if_paramsImpl);
}

void InitDefaultsipv6_nd_addrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_addr_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_addr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_addrImpl);
}

void InitDefaultsipv6_nd_gspnodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_gspnode_default_instance_;
    new (ptr) ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode::InitAsDefaultInstance();
}

void InitDefaultsipv6_nd_gspnode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsipv6_nd_gspnodeImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS, interface_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, parent_interface_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, iftype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, mtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, etype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, vlan_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, mac_addr_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, mac_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, is_interface_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, is_ipv6_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, is_mpls_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, nd_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, global_address_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, local_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, member_link_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry, member_node_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, is_dad_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, dad_attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, is_icm_pv6_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, is_dhcp_managed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, is_route_address_managed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, is_suppressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_retransmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_min_transmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_max_transmit_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_advertisement_lifetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_reachable_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, nd_cache_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, complete_protocol_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, complete_glean_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, incomplete_protocol_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, incomplete_glean_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, dropped_protocol_req_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params, dropped_glean_req_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr, ipv6_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode, total_links_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry_KEYS)},
  { 7, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_entry)},
  { 27, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params)},
  { 50, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr)},
  { 56, -1, sizeof(::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_gspnode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_KEYS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_params_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_addr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_gspnode_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nrcisco_ios_xr_ipv6_nd_oper/ipv6_node_di"
      "scovery/nodes/node/bundle_interfaces/bun"
      "dle_interface/ipv6_nd_if_entry.proto\022[ci"
      "sco_ios_xr_ipv6_nd_oper.ipv6_node_discov"
      "ery.nodes.node.bundle_interfaces.bundle_"
      "interface\"B\n\025ipv6_nd_if_entry_KEYS\022\021\n\tno"
      "de_name\030\001 \001(\t\022\026\n\016interface_name\030\002 \001(\t\"\237\006"
      "\n\020ipv6_nd_if_entry\022\035\n\025parent_interface_n"
      "ame\0302 \001(\t\022\016\n\006iftype\0303 \001(\r\022\013\n\003mtu\0304 \001(\r\022\r"
      "\n\005etype\0305 \001(\r\022\020\n\010vlan_tag\0306 \001(\r\022\025\n\rmac_a"
      "ddr_size\0307 \001(\r\022\020\n\010mac_addr\0308 \001(\t\022\034\n\024is_i"
      "nterface_enabled\0309 \001(\010\022\027\n\017is_ipv6_enable"
      "d\030: \001(\010\022\027\n\017is_mpls_enabled\030; \001(\010\022\205\001\n\rnd_"
      "parameters\030< \001(\0132n.cisco_ios_xr_ipv6_nd_"
      "oper.ipv6_node_discovery.nodes.node.bund"
      "le_interfaces.bundle_interface.ipv6_nd_i"
      "f_params\022\206\001\n\023global_address_list\030= \003(\0132i"
      ".cisco_ios_xr_ipv6_nd_oper.ipv6_node_dis"
      "covery.nodes.node.bundle_interfaces.bund"
      "le_interface.ipv6_nd_addr\022\200\001\n\rlocal_addr"
      "ess\030> \001(\0132i.cisco_ios_xr_ipv6_nd_oper.ip"
      "v6_node_discovery.nodes.node.bundle_inte"
      "rfaces.bundle_interface.ipv6_nd_addr\022\030\n\020"
      "member_link_list\030\? \003(\r\022\206\001\n\020member_node_l"
      "ist\030@ \003(\0132l.cisco_ios_xr_ipv6_nd_oper.ip"
      "v6_node_discovery.nodes.node.bundle_inte"
      "rfaces.bundle_interface.ipv6_nd_gspnode\""
      "\261\004\n\021ipv6_nd_if_params\022\026\n\016is_dad_enabled\030"
      "\001 \001(\010\022\024\n\014dad_attempts\030\002 \001(\r\022\033\n\023is_icm_pv"
      "6_redirect\030\003 \001(\010\022\027\n\017is_dhcp_managed\030\004 \001("
      "\010\022 \n\030is_route_address_managed\030\005 \001(\010\022\025\n\ri"
      "s_suppressed\030\006 \001(\010\022\036\n\026nd_retransmit_inte"
      "rval\030\007 \001(\r\022 \n\030nd_min_transmit_interval\030\010"
      " \001(\r\022 \n\030nd_max_transmit_interval\030\t \001(\r\022!"
      "\n\031nd_advertisement_lifetime\030\n \001(\r\022\031\n\021nd_"
      "reachable_time\030\013 \001(\r\022\026\n\016nd_cache_limit\030\014"
      " \001(\r\022\037\n\027complete_protocol_count\030\r \001(\r\022\034\n"
      "\024complete_glean_count\030\016 \001(\r\022!\n\031incomplet"
      "e_protocol_count\030\017 \001(\r\022\036\n\026incomplete_gle"
      "an_count\030\020 \001(\r\022\"\n\032dropped_protocol_req_c"
      "ount\030\021 \001(\r\022\037\n\027dropped_glean_req_count\030\022 "
      "\001(\r\"$\n\014ipv6_nd_addr\022\024\n\014ipv6_address\030\001 \001("
      "\t\"9\n\017ipv6_nd_gspnode\022\021\n\tnode_name\030\001 \001(\t\022"
      "\023\n\013total_links\030\002 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto
namespace cisco_ios_xr_ipv6_nd_oper {
namespace ipv6_node_discovery {
namespace nodes {
namespace node {
namespace bundle_interfaces {
namespace bundle_interface {

// ===================================================================

void ipv6_nd_if_entry_KEYS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_if_entry_KEYS::kNodeNameFieldNumber;
const int ipv6_nd_if_entry_KEYS::kInterfaceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_if_entry_KEYS::ipv6_nd_if_entry_KEYS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entry_KEYS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
}
ipv6_nd_if_entry_KEYS::ipv6_nd_if_entry_KEYS(const ipv6_nd_if_entry_KEYS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_name().size() > 0) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
}

void ipv6_nd_if_entry_KEYS::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_if_entry_KEYS::~ipv6_nd_if_entry_KEYS() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  SharedDtor();
}

void ipv6_nd_if_entry_KEYS::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_if_entry_KEYS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_if_entry_KEYS::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_if_entry_KEYS& ipv6_nd_if_entry_KEYS::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entry_KEYS();
  return *internal_default_instance();
}

ipv6_nd_if_entry_KEYS* ipv6_nd_if_entry_KEYS::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_if_entry_KEYS* n = new ipv6_nd_if_entry_KEYS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_if_entry_KEYS::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_if_entry_KEYS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_name().data(), static_cast<int>(this->interface_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  return false;
#undef DO_
}

void ipv6_nd_if_entry_KEYS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
}

::google::protobuf::uint8* ipv6_nd_if_entry_KEYS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_name().data(), static_cast<int>(this->interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  return target;
}

size_t ipv6_nd_if_entry_KEYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string interface_name = 2;
  if (this->interface_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_if_entry_KEYS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_if_entry_KEYS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_if_entry_KEYS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
    MergeFrom(*source);
  }
}

void ipv6_nd_if_entry_KEYS::MergeFrom(const ipv6_nd_if_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.interface_name().size() > 0) {

    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
}

void ipv6_nd_if_entry_KEYS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_if_entry_KEYS::CopyFrom(const ipv6_nd_if_entry_KEYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_if_entry_KEYS::IsInitialized() const {
  return true;
}

void ipv6_nd_if_entry_KEYS::Swap(ipv6_nd_if_entry_KEYS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_if_entry_KEYS::InternalSwap(ipv6_nd_if_entry_KEYS* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  interface_name_.Swap(&other->interface_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_if_entry_KEYS::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_if_entry::InitAsDefaultInstance() {
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_default_instance_._instance.get_mutable()->nd_parameters_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params::internal_default_instance());
  ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::_ipv6_nd_if_entry_default_instance_._instance.get_mutable()->local_address_ = const_cast< ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr*>(
      ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_if_entry::kParentInterfaceNameFieldNumber;
const int ipv6_nd_if_entry::kIftypeFieldNumber;
const int ipv6_nd_if_entry::kMtuFieldNumber;
const int ipv6_nd_if_entry::kEtypeFieldNumber;
const int ipv6_nd_if_entry::kVlanTagFieldNumber;
const int ipv6_nd_if_entry::kMacAddrSizeFieldNumber;
const int ipv6_nd_if_entry::kMacAddrFieldNumber;
const int ipv6_nd_if_entry::kIsInterfaceEnabledFieldNumber;
const int ipv6_nd_if_entry::kIsIpv6EnabledFieldNumber;
const int ipv6_nd_if_entry::kIsMplsEnabledFieldNumber;
const int ipv6_nd_if_entry::kNdParametersFieldNumber;
const int ipv6_nd_if_entry::kGlobalAddressListFieldNumber;
const int ipv6_nd_if_entry::kLocalAddressFieldNumber;
const int ipv6_nd_if_entry::kMemberLinkListFieldNumber;
const int ipv6_nd_if_entry::kMemberNodeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_if_entry::ipv6_nd_if_entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
}
ipv6_nd_if_entry::ipv6_nd_if_entry(const ipv6_nd_if_entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      global_address_list_(from.global_address_list_),
      member_link_list_(from.member_link_list_),
      member_node_list_(from.member_node_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_interface_name().size() > 0) {
    parent_interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_interface_name_);
  }
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_addr().size() > 0) {
    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  if (from.has_nd_parameters()) {
    nd_parameters_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params(*from.nd_parameters_);
  } else {
    nd_parameters_ = NULL;
  }
  if (from.has_local_address()) {
    local_address_ = new ::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr(*from.local_address_);
  } else {
    local_address_ = NULL;
  }
  ::memcpy(&iftype_, &from.iftype_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_mpls_enabled_) -
    reinterpret_cast<char*>(&iftype_)) + sizeof(is_mpls_enabled_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
}

void ipv6_nd_if_entry::SharedCtor() {
  parent_interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nd_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_mpls_enabled_) -
      reinterpret_cast<char*>(&nd_parameters_)) + sizeof(is_mpls_enabled_));
  _cached_size_ = 0;
}

ipv6_nd_if_entry::~ipv6_nd_if_entry() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  SharedDtor();
}

void ipv6_nd_if_entry::SharedDtor() {
  parent_interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nd_parameters_;
  if (this != internal_default_instance()) delete local_address_;
}

void ipv6_nd_if_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_if_entry::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_if_entry& ipv6_nd_if_entry::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_entry();
  return *internal_default_instance();
}

ipv6_nd_if_entry* ipv6_nd_if_entry::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_if_entry* n = new ipv6_nd_if_entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_if_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  global_address_list_.Clear();
  member_link_list_.Clear();
  member_node_list_.Clear();
  parent_interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && nd_parameters_ != NULL) {
    delete nd_parameters_;
  }
  nd_parameters_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_address_ != NULL) {
    delete local_address_;
  }
  local_address_ = NULL;
  ::memset(&iftype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_mpls_enabled_) -
      reinterpret_cast<char*>(&iftype_)) + sizeof(is_mpls_enabled_));
  _internal_metadata_.Clear();
}

bool ipv6_nd_if_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent_interface_name = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_interface_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_interface_name().data(), static_cast<int>(this->parent_interface_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 iftype = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iftype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mtu = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 etype = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vlan_tag = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mac_addr_size = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mac_addr_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac_addr = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_addr().data(), static_cast<int>(this->mac_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_interface_enabled = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interface_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ipv6_enabled = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ipv6_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_mpls_enabled = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mpls_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nd_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_global_address_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 member_link_list = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_link_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 506u, input, this->mutable_member_link_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_member_node_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  return false;
#undef DO_
}

void ipv6_nd_if_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_interface_name = 50;
  if (this->parent_interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_interface_name().data(), static_cast<int>(this->parent_interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->parent_interface_name(), output);
  }

  // uint32 iftype = 51;
  if (this->iftype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->iftype(), output);
  }

  // uint32 mtu = 52;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->mtu(), output);
  }

  // uint32 etype = 53;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->etype(), output);
  }

  // uint32 vlan_tag = 54;
  if (this->vlan_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->vlan_tag(), output);
  }

  // uint32 mac_addr_size = 55;
  if (this->mac_addr_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->mac_addr_size(), output);
  }

  // string mac_addr = 56;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), static_cast<int>(this->mac_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->mac_addr(), output);
  }

  // bool is_interface_enabled = 57;
  if (this->is_interface_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_interface_enabled(), output);
  }

  // bool is_ipv6_enabled = 58;
  if (this->is_ipv6_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->is_ipv6_enabled(), output);
  }

  // bool is_mpls_enabled = 59;
  if (this->is_mpls_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->is_mpls_enabled(), output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
  if (this->has_nd_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->nd_parameters_, output);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_address_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->global_address_list(static_cast<int>(i)), output);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
  if (this->has_local_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->local_address_, output);
  }

  // repeated uint32 member_link_list = 63;
  if (this->member_link_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(63, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _member_link_list_cached_byte_size_));
  }
  for (int i = 0, n = this->member_link_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->member_link_list(i), output);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_node_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->member_node_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
}

::google::protobuf::uint8* ipv6_nd_if_entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_interface_name = 50;
  if (this->parent_interface_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_interface_name().data(), static_cast<int>(this->parent_interface_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.parent_interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->parent_interface_name(), target);
  }

  // uint32 iftype = 51;
  if (this->iftype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->iftype(), target);
  }

  // uint32 mtu = 52;
  if (this->mtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->mtu(), target);
  }

  // uint32 etype = 53;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->etype(), target);
  }

  // uint32 vlan_tag = 54;
  if (this->vlan_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->vlan_tag(), target);
  }

  // uint32 mac_addr_size = 55;
  if (this->mac_addr_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->mac_addr_size(), target);
  }

  // string mac_addr = 56;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), static_cast<int>(this->mac_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->mac_addr(), target);
  }

  // bool is_interface_enabled = 57;
  if (this->is_interface_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_interface_enabled(), target);
  }

  // bool is_ipv6_enabled = 58;
  if (this->is_ipv6_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->is_ipv6_enabled(), target);
  }

  // bool is_mpls_enabled = 59;
  if (this->is_mpls_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->is_mpls_enabled(), target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
  if (this->has_nd_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, *this->nd_parameters_, deterministic, target);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_address_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, this->global_address_list(static_cast<int>(i)), deterministic, target);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
  if (this->has_local_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        62, *this->local_address_, deterministic, target);
  }

  // repeated uint32 member_link_list = 63;
  if (this->member_link_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      63,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _member_link_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->member_link_list_, target);
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_node_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        64, this->member_node_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  return target;
}

size_t ipv6_nd_if_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr global_address_list = 61;
  {
    unsigned int count = static_cast<unsigned int>(this->global_address_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->global_address_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 member_link_list = 63;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->member_link_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_link_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode member_node_list = 64;
  {
    unsigned int count = static_cast<unsigned int>(this->member_node_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->member_node_list(static_cast<int>(i)));
    }
  }

  // string parent_interface_name = 50;
  if (this->parent_interface_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_interface_name());
  }

  // string mac_addr = 56;
  if (this->mac_addr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_addr());
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params nd_parameters = 60;
  if (this->has_nd_parameters()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nd_parameters_);
  }

  // .cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr local_address = 62;
  if (this->has_local_address()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_address_);
  }

  // uint32 iftype = 51;
  if (this->iftype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iftype());
  }

  // uint32 mtu = 52;
  if (this->mtu() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtu());
  }

  // uint32 etype = 53;
  if (this->etype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->etype());
  }

  // uint32 vlan_tag = 54;
  if (this->vlan_tag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vlan_tag());
  }

  // uint32 mac_addr_size = 55;
  if (this->mac_addr_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mac_addr_size());
  }

  // bool is_interface_enabled = 57;
  if (this->is_interface_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool is_ipv6_enabled = 58;
  if (this->is_ipv6_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool is_mpls_enabled = 59;
  if (this->is_mpls_enabled() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_if_entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_if_entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_if_entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
    MergeFrom(*source);
  }
}

void ipv6_nd_if_entry::MergeFrom(const ipv6_nd_if_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_address_list_.MergeFrom(from.global_address_list_);
  member_link_list_.MergeFrom(from.member_link_list_);
  member_node_list_.MergeFrom(from.member_node_list_);
  if (from.parent_interface_name().size() > 0) {

    parent_interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_interface_name_);
  }
  if (from.mac_addr().size() > 0) {

    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  if (from.has_nd_parameters()) {
    mutable_nd_parameters()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_if_params::MergeFrom(from.nd_parameters());
  }
  if (from.has_local_address()) {
    mutable_local_address()->::cisco_ios_xr_ipv6_nd_oper::ipv6_node_discovery::nodes::node::bundle_interfaces::bundle_interface::ipv6_nd_addr::MergeFrom(from.local_address());
  }
  if (from.iftype() != 0) {
    set_iftype(from.iftype());
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
  if (from.vlan_tag() != 0) {
    set_vlan_tag(from.vlan_tag());
  }
  if (from.mac_addr_size() != 0) {
    set_mac_addr_size(from.mac_addr_size());
  }
  if (from.is_interface_enabled() != 0) {
    set_is_interface_enabled(from.is_interface_enabled());
  }
  if (from.is_ipv6_enabled() != 0) {
    set_is_ipv6_enabled(from.is_ipv6_enabled());
  }
  if (from.is_mpls_enabled() != 0) {
    set_is_mpls_enabled(from.is_mpls_enabled());
  }
}

void ipv6_nd_if_entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_if_entry::CopyFrom(const ipv6_nd_if_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_if_entry::IsInitialized() const {
  return true;
}

void ipv6_nd_if_entry::Swap(ipv6_nd_if_entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_if_entry::InternalSwap(ipv6_nd_if_entry* other) {
  using std::swap;
  global_address_list_.InternalSwap(&other->global_address_list_);
  member_link_list_.InternalSwap(&other->member_link_list_);
  member_node_list_.InternalSwap(&other->member_node_list_);
  parent_interface_name_.Swap(&other->parent_interface_name_);
  mac_addr_.Swap(&other->mac_addr_);
  swap(nd_parameters_, other->nd_parameters_);
  swap(local_address_, other->local_address_);
  swap(iftype_, other->iftype_);
  swap(mtu_, other->mtu_);
  swap(etype_, other->etype_);
  swap(vlan_tag_, other->vlan_tag_);
  swap(mac_addr_size_, other->mac_addr_size_);
  swap(is_interface_enabled_, other->is_interface_enabled_);
  swap(is_ipv6_enabled_, other->is_ipv6_enabled_);
  swap(is_mpls_enabled_, other->is_mpls_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_if_entry::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_if_params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_if_params::kIsDadEnabledFieldNumber;
const int ipv6_nd_if_params::kDadAttemptsFieldNumber;
const int ipv6_nd_if_params::kIsIcmPv6RedirectFieldNumber;
const int ipv6_nd_if_params::kIsDhcpManagedFieldNumber;
const int ipv6_nd_if_params::kIsRouteAddressManagedFieldNumber;
const int ipv6_nd_if_params::kIsSuppressedFieldNumber;
const int ipv6_nd_if_params::kNdRetransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdMinTransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdMaxTransmitIntervalFieldNumber;
const int ipv6_nd_if_params::kNdAdvertisementLifetimeFieldNumber;
const int ipv6_nd_if_params::kNdReachableTimeFieldNumber;
const int ipv6_nd_if_params::kNdCacheLimitFieldNumber;
const int ipv6_nd_if_params::kCompleteProtocolCountFieldNumber;
const int ipv6_nd_if_params::kCompleteGleanCountFieldNumber;
const int ipv6_nd_if_params::kIncompleteProtocolCountFieldNumber;
const int ipv6_nd_if_params::kIncompleteGleanCountFieldNumber;
const int ipv6_nd_if_params::kDroppedProtocolReqCountFieldNumber;
const int ipv6_nd_if_params::kDroppedGleanReqCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_if_params::ipv6_nd_if_params()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_params();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
}
ipv6_nd_if_params::ipv6_nd_if_params(const ipv6_nd_if_params& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dad_attempts_, &from.dad_attempts_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_glean_req_count_) -
    reinterpret_cast<char*>(&dad_attempts_)) + sizeof(dropped_glean_req_count_));
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
}

void ipv6_nd_if_params::SharedCtor() {
  ::memset(&dad_attempts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_glean_req_count_) -
      reinterpret_cast<char*>(&dad_attempts_)) + sizeof(dropped_glean_req_count_));
  _cached_size_ = 0;
}

ipv6_nd_if_params::~ipv6_nd_if_params() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  SharedDtor();
}

void ipv6_nd_if_params::SharedDtor() {
}

void ipv6_nd_if_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_if_params::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_if_params& ipv6_nd_if_params::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_if_params();
  return *internal_default_instance();
}

ipv6_nd_if_params* ipv6_nd_if_params::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_if_params* n = new ipv6_nd_if_params;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_if_params::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dad_attempts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_glean_req_count_) -
      reinterpret_cast<char*>(&dad_attempts_)) + sizeof(dropped_glean_req_count_));
  _internal_metadata_.Clear();
}

bool ipv6_nd_if_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_dad_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dad_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dad_attempts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dad_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_icm_pv6_redirect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_icm_pv6_redirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_managed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_route_address_managed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_route_address_managed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_suppressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suppressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_retransmit_interval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_retransmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_min_transmit_interval = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_min_transmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_max_transmit_interval = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_max_transmit_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_advertisement_lifetime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_advertisement_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_reachable_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_reachable_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nd_cache_limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nd_cache_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 complete_protocol_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_protocol_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 complete_glean_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_glean_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incomplete_protocol_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incomplete_protocol_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incomplete_glean_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incomplete_glean_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropped_protocol_req_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropped_protocol_req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropped_glean_req_count = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropped_glean_req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  return false;
#undef DO_
}

void ipv6_nd_if_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dad_enabled = 1;
  if (this->is_dad_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_dad_enabled(), output);
  }

  // uint32 dad_attempts = 2;
  if (this->dad_attempts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dad_attempts(), output);
  }

  // bool is_icm_pv6_redirect = 3;
  if (this->is_icm_pv6_redirect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_icm_pv6_redirect(), output);
  }

  // bool is_dhcp_managed = 4;
  if (this->is_dhcp_managed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dhcp_managed(), output);
  }

  // bool is_route_address_managed = 5;
  if (this->is_route_address_managed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_route_address_managed(), output);
  }

  // bool is_suppressed = 6;
  if (this->is_suppressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_suppressed(), output);
  }

  // uint32 nd_retransmit_interval = 7;
  if (this->nd_retransmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nd_retransmit_interval(), output);
  }

  // uint32 nd_min_transmit_interval = 8;
  if (this->nd_min_transmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nd_min_transmit_interval(), output);
  }

  // uint32 nd_max_transmit_interval = 9;
  if (this->nd_max_transmit_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nd_max_transmit_interval(), output);
  }

  // uint32 nd_advertisement_lifetime = 10;
  if (this->nd_advertisement_lifetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nd_advertisement_lifetime(), output);
  }

  // uint32 nd_reachable_time = 11;
  if (this->nd_reachable_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nd_reachable_time(), output);
  }

  // uint32 nd_cache_limit = 12;
  if (this->nd_cache_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nd_cache_limit(), output);
  }

  // uint32 complete_protocol_count = 13;
  if (this->complete_protocol_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->complete_protocol_count(), output);
  }

  // uint32 complete_glean_count = 14;
  if (this->complete_glean_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->complete_glean_count(), output);
  }

  // uint32 incomplete_protocol_count = 15;
  if (this->incomplete_protocol_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->incomplete_protocol_count(), output);
  }

  // uint32 incomplete_glean_count = 16;
  if (this->incomplete_glean_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->incomplete_glean_count(), output);
  }

  // uint32 dropped_protocol_req_count = 17;
  if (this->dropped_protocol_req_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dropped_protocol_req_count(), output);
  }

  // uint32 dropped_glean_req_count = 18;
  if (this->dropped_glean_req_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dropped_glean_req_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
}

::google::protobuf::uint8* ipv6_nd_if_params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dad_enabled = 1;
  if (this->is_dad_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_dad_enabled(), target);
  }

  // uint32 dad_attempts = 2;
  if (this->dad_attempts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dad_attempts(), target);
  }

  // bool is_icm_pv6_redirect = 3;
  if (this->is_icm_pv6_redirect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_icm_pv6_redirect(), target);
  }

  // bool is_dhcp_managed = 4;
  if (this->is_dhcp_managed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dhcp_managed(), target);
  }

  // bool is_route_address_managed = 5;
  if (this->is_route_address_managed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_route_address_managed(), target);
  }

  // bool is_suppressed = 6;
  if (this->is_suppressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_suppressed(), target);
  }

  // uint32 nd_retransmit_interval = 7;
  if (this->nd_retransmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nd_retransmit_interval(), target);
  }

  // uint32 nd_min_transmit_interval = 8;
  if (this->nd_min_transmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nd_min_transmit_interval(), target);
  }

  // uint32 nd_max_transmit_interval = 9;
  if (this->nd_max_transmit_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->nd_max_transmit_interval(), target);
  }

  // uint32 nd_advertisement_lifetime = 10;
  if (this->nd_advertisement_lifetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nd_advertisement_lifetime(), target);
  }

  // uint32 nd_reachable_time = 11;
  if (this->nd_reachable_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nd_reachable_time(), target);
  }

  // uint32 nd_cache_limit = 12;
  if (this->nd_cache_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nd_cache_limit(), target);
  }

  // uint32 complete_protocol_count = 13;
  if (this->complete_protocol_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->complete_protocol_count(), target);
  }

  // uint32 complete_glean_count = 14;
  if (this->complete_glean_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->complete_glean_count(), target);
  }

  // uint32 incomplete_protocol_count = 15;
  if (this->incomplete_protocol_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->incomplete_protocol_count(), target);
  }

  // uint32 incomplete_glean_count = 16;
  if (this->incomplete_glean_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->incomplete_glean_count(), target);
  }

  // uint32 dropped_protocol_req_count = 17;
  if (this->dropped_protocol_req_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->dropped_protocol_req_count(), target);
  }

  // uint32 dropped_glean_req_count = 18;
  if (this->dropped_glean_req_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dropped_glean_req_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  return target;
}

size_t ipv6_nd_if_params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dad_attempts = 2;
  if (this->dad_attempts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dad_attempts());
  }

  // bool is_dad_enabled = 1;
  if (this->is_dad_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_icm_pv6_redirect = 3;
  if (this->is_icm_pv6_redirect() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dhcp_managed = 4;
  if (this->is_dhcp_managed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_route_address_managed = 5;
  if (this->is_route_address_managed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_suppressed = 6;
  if (this->is_suppressed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nd_retransmit_interval = 7;
  if (this->nd_retransmit_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_retransmit_interval());
  }

  // uint32 nd_min_transmit_interval = 8;
  if (this->nd_min_transmit_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_min_transmit_interval());
  }

  // uint32 nd_max_transmit_interval = 9;
  if (this->nd_max_transmit_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_max_transmit_interval());
  }

  // uint32 nd_advertisement_lifetime = 10;
  if (this->nd_advertisement_lifetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_advertisement_lifetime());
  }

  // uint32 nd_reachable_time = 11;
  if (this->nd_reachable_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_reachable_time());
  }

  // uint32 nd_cache_limit = 12;
  if (this->nd_cache_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nd_cache_limit());
  }

  // uint32 complete_protocol_count = 13;
  if (this->complete_protocol_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->complete_protocol_count());
  }

  // uint32 complete_glean_count = 14;
  if (this->complete_glean_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->complete_glean_count());
  }

  // uint32 incomplete_protocol_count = 15;
  if (this->incomplete_protocol_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incomplete_protocol_count());
  }

  // uint32 incomplete_glean_count = 16;
  if (this->incomplete_glean_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incomplete_glean_count());
  }

  // uint32 dropped_protocol_req_count = 17;
  if (this->dropped_protocol_req_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropped_protocol_req_count());
  }

  // uint32 dropped_glean_req_count = 18;
  if (this->dropped_glean_req_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropped_glean_req_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_if_params::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_if_params* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_if_params>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
    MergeFrom(*source);
  }
}

void ipv6_nd_if_params::MergeFrom(const ipv6_nd_if_params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dad_attempts() != 0) {
    set_dad_attempts(from.dad_attempts());
  }
  if (from.is_dad_enabled() != 0) {
    set_is_dad_enabled(from.is_dad_enabled());
  }
  if (from.is_icm_pv6_redirect() != 0) {
    set_is_icm_pv6_redirect(from.is_icm_pv6_redirect());
  }
  if (from.is_dhcp_managed() != 0) {
    set_is_dhcp_managed(from.is_dhcp_managed());
  }
  if (from.is_route_address_managed() != 0) {
    set_is_route_address_managed(from.is_route_address_managed());
  }
  if (from.is_suppressed() != 0) {
    set_is_suppressed(from.is_suppressed());
  }
  if (from.nd_retransmit_interval() != 0) {
    set_nd_retransmit_interval(from.nd_retransmit_interval());
  }
  if (from.nd_min_transmit_interval() != 0) {
    set_nd_min_transmit_interval(from.nd_min_transmit_interval());
  }
  if (from.nd_max_transmit_interval() != 0) {
    set_nd_max_transmit_interval(from.nd_max_transmit_interval());
  }
  if (from.nd_advertisement_lifetime() != 0) {
    set_nd_advertisement_lifetime(from.nd_advertisement_lifetime());
  }
  if (from.nd_reachable_time() != 0) {
    set_nd_reachable_time(from.nd_reachable_time());
  }
  if (from.nd_cache_limit() != 0) {
    set_nd_cache_limit(from.nd_cache_limit());
  }
  if (from.complete_protocol_count() != 0) {
    set_complete_protocol_count(from.complete_protocol_count());
  }
  if (from.complete_glean_count() != 0) {
    set_complete_glean_count(from.complete_glean_count());
  }
  if (from.incomplete_protocol_count() != 0) {
    set_incomplete_protocol_count(from.incomplete_protocol_count());
  }
  if (from.incomplete_glean_count() != 0) {
    set_incomplete_glean_count(from.incomplete_glean_count());
  }
  if (from.dropped_protocol_req_count() != 0) {
    set_dropped_protocol_req_count(from.dropped_protocol_req_count());
  }
  if (from.dropped_glean_req_count() != 0) {
    set_dropped_glean_req_count(from.dropped_glean_req_count());
  }
}

void ipv6_nd_if_params::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_if_params::CopyFrom(const ipv6_nd_if_params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_if_params::IsInitialized() const {
  return true;
}

void ipv6_nd_if_params::Swap(ipv6_nd_if_params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_if_params::InternalSwap(ipv6_nd_if_params* other) {
  using std::swap;
  swap(dad_attempts_, other->dad_attempts_);
  swap(is_dad_enabled_, other->is_dad_enabled_);
  swap(is_icm_pv6_redirect_, other->is_icm_pv6_redirect_);
  swap(is_dhcp_managed_, other->is_dhcp_managed_);
  swap(is_route_address_managed_, other->is_route_address_managed_);
  swap(is_suppressed_, other->is_suppressed_);
  swap(nd_retransmit_interval_, other->nd_retransmit_interval_);
  swap(nd_min_transmit_interval_, other->nd_min_transmit_interval_);
  swap(nd_max_transmit_interval_, other->nd_max_transmit_interval_);
  swap(nd_advertisement_lifetime_, other->nd_advertisement_lifetime_);
  swap(nd_reachable_time_, other->nd_reachable_time_);
  swap(nd_cache_limit_, other->nd_cache_limit_);
  swap(complete_protocol_count_, other->complete_protocol_count_);
  swap(complete_glean_count_, other->complete_glean_count_);
  swap(incomplete_protocol_count_, other->incomplete_protocol_count_);
  swap(incomplete_glean_count_, other->incomplete_glean_count_);
  swap(dropped_protocol_req_count_, other->dropped_protocol_req_count_);
  swap(dropped_glean_req_count_, other->dropped_glean_req_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_if_params::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_addr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_addr::kIpv6AddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_addr::ipv6_nd_addr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
}
ipv6_nd_addr::ipv6_nd_addr(const ipv6_nd_addr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv6_address().size() > 0) {
    ipv6_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
}

void ipv6_nd_addr::SharedCtor() {
  ipv6_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ipv6_nd_addr::~ipv6_nd_addr() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  SharedDtor();
}

void ipv6_nd_addr::SharedDtor() {
  ipv6_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_addr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_addr::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_addr& ipv6_nd_addr::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_addr();
  return *internal_default_instance();
}

ipv6_nd_addr* ipv6_nd_addr::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_addr* n = new ipv6_nd_addr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_addr::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ipv6_nd_addr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipv6_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  return false;
#undef DO_
}

void ipv6_nd_addr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipv6_address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
}

::google::protobuf::uint8* ipv6_nd_addr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6_address().data(), static_cast<int>(this->ipv6_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr.ipv6_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipv6_address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  return target;
}

size_t ipv6_nd_addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ipv6_address = 1;
  if (this->ipv6_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv6_address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_addr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_addr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_addr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
    MergeFrom(*source);
  }
}

void ipv6_nd_addr::MergeFrom(const ipv6_nd_addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipv6_address().size() > 0) {

    ipv6_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_address_);
  }
}

void ipv6_nd_addr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_addr::CopyFrom(const ipv6_nd_addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_addr::IsInitialized() const {
  return true;
}

void ipv6_nd_addr::Swap(ipv6_nd_addr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_addr::InternalSwap(ipv6_nd_addr* other) {
  using std::swap;
  ipv6_address_.Swap(&other->ipv6_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_addr::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ipv6_nd_gspnode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ipv6_nd_gspnode::kNodeNameFieldNumber;
const int ipv6_nd_gspnode::kTotalLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ipv6_nd_gspnode::ipv6_nd_gspnode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_gspnode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
}
ipv6_nd_gspnode::ipv6_nd_gspnode(const ipv6_nd_gspnode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  total_links_ = from.total_links_;
  // @@protoc_insertion_point(copy_constructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
}

void ipv6_nd_gspnode::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_links_ = 0u;
  _cached_size_ = 0;
}

ipv6_nd_gspnode::~ipv6_nd_gspnode() {
  // @@protoc_insertion_point(destructor:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  SharedDtor();
}

void ipv6_nd_gspnode::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ipv6_nd_gspnode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_nd_gspnode::descriptor() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ipv6_nd_gspnode& ipv6_nd_gspnode::default_instance() {
  ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::InitDefaultsipv6_nd_gspnode();
  return *internal_default_instance();
}

ipv6_nd_gspnode* ipv6_nd_gspnode::New(::google::protobuf::Arena* arena) const {
  ipv6_nd_gspnode* n = new ipv6_nd_gspnode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ipv6_nd_gspnode::Clear() {
// @@protoc_insertion_point(message_clear_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_links_ = 0u;
  _internal_metadata_.Clear();
}

bool ipv6_nd_gspnode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_links = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_links_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  return false;
#undef DO_
}

void ipv6_nd_gspnode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // uint32 total_links = 2;
  if (this->total_links() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_links(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
}

::google::protobuf::uint8* ipv6_nd_gspnode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // uint32 total_links = 2;
  if (this->total_links() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_links(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  return target;
}

size_t ipv6_nd_gspnode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // uint32 total_links = 2;
  if (this->total_links() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_links());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_nd_gspnode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  GOOGLE_DCHECK_NE(&from, this);
  const ipv6_nd_gspnode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ipv6_nd_gspnode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
    MergeFrom(*source);
  }
}

void ipv6_nd_gspnode::MergeFrom(const ipv6_nd_gspnode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.total_links() != 0) {
    set_total_links(from.total_links());
  }
}

void ipv6_nd_gspnode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_nd_gspnode::CopyFrom(const ipv6_nd_gspnode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_nd_gspnode::IsInitialized() const {
  return true;
}

void ipv6_nd_gspnode::Swap(ipv6_nd_gspnode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ipv6_nd_gspnode::InternalSwap(ipv6_nd_gspnode* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  swap(total_links_, other->total_links_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ipv6_nd_gspnode::GetMetadata() const {
  protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cisco_5fios_5fxr_5fipv6_5fnd_5foper_2fipv6_5fnode_5fdiscovery_2fnodes_2fnode_2fbundle_5finterfaces_2fbundle_5finterface_2fipv6_5fnd_5fif_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bundle_interface
}  // namespace bundle_interfaces
}  // namespace node
}  // namespace nodes
}  // namespace ipv6_node_discovery
}  // namespace cisco_ios_xr_ipv6_nd_oper

// @@protoc_insertion_point(global_scope)
